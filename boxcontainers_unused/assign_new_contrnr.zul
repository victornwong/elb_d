<?xml version="1.0" encoding="UTF-8"?>
<?page id="assign_new_container_wind"?>
<zk>

<!--

Dispatch Manifest module

Version				: 0.1
Coding began date	: 18/01/2010
Developer			: Victor Wong

(c)2009 ALS Technichem Malaysia Sdn Bhd

MSSQL to create table

USE [AccDatabase3]
GO
/****** Object:  Table [dbo].[BoxRental]    Script Date: 01/21/2010 15:55:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[BoxRental](
	[origid] [int] IDENTITY(1,1) NOT NULL,
	[rentout_date] [datetime] NULL,
	[box_id] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[extranotes] [varchar](255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
 CONSTRAINT [PK_DispatchSchedule] PRIMARY KEY CLUSTERED 
(
	[origid] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF

-->

<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript src="../alsglobal/alsglobalfuncs.zs" />

<zscript src="../alsglobal/alsglobal_guifuncs.zs" />
<zscript src="../alsglobal/alsglobal_sqlfuncs.zs" />
<zscript src="../alsglobal/securityfuncs.zs" />

<zscript src="../alsglobal/chillerbox.zs" />

<zscript>
<![CDATA[

import java.util.*;
import java.text.*;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;

// Some security checking codes here
// useraccessobj = getUserAccessObject();

myincludeid = Executions.getCurrent().getParameter("myid");

// hardcoded html-post parameter name: ar_code (set in customer_extra_address.zul -> playDocsDeliveryDetails()
// the_arcode = Executions.getCurrent().getParameter("ar_code");

windcounter = 1;

DISPATCHMANIFEST_TABLE = "DispatchManifest";


Object whathuh;

class dispatchManifestInput
{
	public Datebox dm_schedule_date;
	public Textbox dm_dispatcher_id;
	public Textbox dm_extranotes;
	public Textbox dm_origid;
	
	public Listbox dm_transportation;
	
	public Textbox dm_dispatcher_name;
	public Textbox dm_outsource_name;

	public dispatchManifestInput(Textbox iorigid, Datebox ischedule_date, Textbox idispatcher_id, Textbox iextranotes, 
		Textbox idispatchername, Textbox ioutsource, Listbox itransportation)
	{
		dm_schedule_date = ischedule_date;
		dm_dispatcher_id = idispatcher_id;
		dm_extranotes = iextranotes;
		
		dm_origid = iorigid;
		
		dm_dispatcher_name = idispatchername;
		dm_outsource_name = ioutsource;
		
		dm_transportation = itransportation;
	}
	
	void clearDetails()
	{
		dm_dispatcher_id.setValue("");
		dm_extranotes.setValue("");
		
		dm_origid.setValue("");
		
		dm_dispatcher_name.setValue("");
		dm_outsource_name.setValue("");
	}
	
	void showDetails()
	{
		// clear schedules listbox first
		makeDispatchScheduleListbox(dispschedule_div);
	
		iorigid = strip_PrefixID(dm_origid.getValue());
		
		if(iorigid.equals("")) return;
		
		sql = als_mysoftsql();
		if(sql == NULL) return;
		
		sqlstatem = "select * from " + DISPATCHMANIFEST_TABLE + " where origid=" + iorigid;
		therec = sql.firstRow(sqlstatem);
		sql.close();
		
		if(therec == null)
		{
			showMessage("ERROR! Cannot retrieve manifest record");
			return;
		}
		
		dm_schedule_date.setValue(therec.get("schedule_date"));
		dm_dispatcher_id.setValue(therec.get("dispatcher_id"));
		dm_extranotes.setValue(therec.get("extranotes"));
		
		dm_dispatcher_name.setValue("");
		dm_outsource_name.setValue("");
		
		transid = therec.get("transportation");
		
		transindex = (transid.equals("Car")) ? 1 : 0;
		dm_transportation.setSelectedIndex(transindex);
		
		// show dispatcher name as dispatcher_id is supposed to be hidden
		disprec = getDispatcherRec(therec.get("dispatcher_id"));

		if(disprec != null)
		{
			dm_dispatcher_name.setValue(disprec.get("dispatcher_name"));
			dm_outsource_name.setValue(disprec.get("outsource_name"));
		}
		
		// put codes here to update the manifest's schedules listbox
		populateDispatchScheduleListbox(dm_origid.getValue());
		
	}
	
	void saveSchedulesList()
	{
		// hardcoded dispatchschedule2 listbox id
		listcount = dispatchschedule2.getItemCount();
		
		// nothing, just return
		if(listcount == 0) return;
		
		imanifest_origid = strip_PrefixID(dm_origid.getValue());
		
		sql = als_mysoftsql();

		if(sql == NULL) return;
		
		for(i=0; i<listcount; i++)
		{
			// get schedule origid
			ischorigid = dispatchschedule2.getItemAtIndex(i).getLabel();
			schorigid = strip_PrefixID(ischorigid);

			// update manifest_id field

			sqlstatem = "update DispatchScheduleDetails set manifest_id=" + imanifest_origid + ", " +
				"dispatcher_id='" + dm_dispatcher_name.getValue() + "' " +
				"where origid=" + schorigid ;
				
			sql.execute(sqlstatem);
		
		}

		sql.close();
	}
	
	void updateDetails()
	{
		// nothing to update, return
		if(dm_origid.getValue().equals(""))
		{
			clearDetails();
			return;
		}
		
		sql = als_mysoftsql();

		if(sql == NULL) return;
		
		iorigid = strip_PrefixID(dm_origid.getValue());
		
		idispid = dm_dispatcher_id.getValue();
		ischedule_date = getDateFromDatebox(schedule_date);
		iextranotes = replaceSingleQuotes(dm_extranotes.getValue());
		itransport = dm_transportation.getSelectedItem().getLabel();

		sqlstatem = "update " + DISPATCHMANIFEST_TABLE + " set dispatcher_id='" + idispid + "'," +
		"schedule_date='" + ischedule_date + "'," +
		"extranotes='" + iextranotes + "', " +
		"transportation='" + itransport + "' " +
		"where origid=" + iorigid;
		
		sql.execute(sqlstatem);
		sql.close();
		
		// codes to save schedules list - update the manifest_id in DispatchScheduleDetails
		saveSchedulesList();
		
		// clear all input boxes and deselect from search-box
		// clearDetails();
		
		// dispatchmanifest_lb.clearSelection();
		
		// refresh list boxes
		// startDispatchManifestSearch(startdate,enddate);
		
		//makeDispatchScheduleListbox(dispschedule_div);
		//populateDispatchScheduleListbox(String imanif_origid);
	}

}

void dropDispatcherId(Event event)
{
	Component dragged = event.dragged;
	idispid = dragged.getLabel();
	
	therec = getDispatcherRec(idispid); // in alsglobalfuncs.zs
	
	newdispatcher_name.setValue(therec.get("dispatcher_name"));
	newoutsource_name.setValue(therec.get("outsource_name"));
	dispatcher_id.setValue(idispid);
	
}

void playAssignContainerAvailable()
{
	uniqwindowid = myincludeid + "wind" + windcounter;
	globalActivateWindow("miscwindows","boxcontainers/container_available.zul", uniqwindowid, "boxo=0");
	windcounter++;
}

class MyDispatchManifest_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		// 28/1/2010: save previous rec if available
		whathuh.updateDetails();
	
		irecno = dispatchmanifest_lb.getSelectedItem().getLabel();

		whathuh.dm_origid.setValue(irecno);
		whathuh.showDetails();
		
		startDispatchManifestSearch(startdate,enddate);
	}
	
} // end of MyDispatchManifest_Listener

Listbox makeDispatchManifestListbox(Div mDiv)
{
    Listbox newlb = new Listbox();

    newlb.setId("dispatchmanifest_lb");
    newlb.setVflex(true);
	
    // newlb.setContext("dispatchSchedulingContext");
    // newlb.setPopup("testmypop");
	
	newlb.addEventListener("onSelect", new MyDispatchManifest_Listener());

    newlb.setParent(mDiv);

    Listhead newhead = new Listhead();
    newhead.setSizable(true);
    newhead.setParent(newlb);
	
    Listheader hd1 = new Listheader();
    hd1.setLabel("Customer");
    hd1.setSort("auto");
    hd1.setParent(newhead);

    Listheader hd2 = new Listheader();
    hd2.setLabel("Date");
    hd2.setSort("auto");
    hd2.setParent(newhead);

	Listheader hd3 = new Listheader();
    hd3.setLabel("Type of Container");
    hd3.setSort("auto");
    hd3.setParent(newhead);
	
	Listheader hd4 = new Listheader();
    hd4.setLabel("Prservative");
    hd4.setSort("auto");
    hd4.setParent(newhead);
	
    Listheader hd5 = new Listheader();
    hd5.setLabel("Quantity");
    hd5.setSort("auto");
    hd5.setParent(newhead);

    newlb.setRows(10);

    return newlb;

} // end of makeDispatchManifestListbox()

// check manifest schedules listbox for dups schedule, return true if dup
boolean checkManifestSchedule_Dups(String iwhichrec)
{
	// hardcoded dispatchschedule2 listbox id
	
	listcount = dispatchschedule2.getItemCount();
	retval = false;
	
	if(listcount > 0)
	{
		for(i=0; i<listcount; i++)
		{
			lb_origid = dispatchschedule2.getItemAtIndex(i);
			
			if(lb_origid.getLabel().equals(iwhichrec))
			{
				showMessageBox("Destination already in manifest");
				
				retval = true;
				break;
			}
		}
	}
	
	return retval;
}

boolean checkScheduleAssignedToManifest(Object iwhichrec)
{
	retval = false;
	idispmanif = iwhichrec.get("manifest_id");

	if(idispmanif != 0)
	{
		showMessageBox("Schedule already assigned to " + DISPATCHMANIFEST_PREFIX + idispmanif.toString());
		retval=true;
	}
	
	return retval;

}

class MyDropListener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		Component dragged = event.dragged;

		// alert(dragged.getLabel());
		
		iorigid_schedule_details = dragged.getLabel();
		
		// check for dups in the list
		if(checkManifestSchedule_Dups(iorigid_schedule_details)) return;
	
		// no manifest selected, ignore insertion of schedule
		if(whathuh.dm_origid.getValue().equals("")) return;
		
		therec = getDispatchScheduleRec(iorigid_schedule_details);
		
		if(therec == null) return;
		
		// destination already completed, don't add into list anymore.
		if(therec.get("completed") == 1)
		{
			showMessageBox(iorigid_schedule_details + " is completed, can't insert");
			return;
		}

		// check if schedule already assigned to a manifest
		// 3/2/2010: recode this part, if destination in manifest but incomplete and date is earlier than the manifest date then can insert
		if(checkScheduleAssignedToManifest(therec)) return;
		
		if(therec.get("ar_code").equals(""))
		{
			showMessageBox(iorigid_schedule_details + " is empty, cannot insert");
			return;
		}

		String[] strarray = new String[2];
		
		strarray[0] = SCHEDULEID_PREFIX + therec.get("origid").toString();

		iar_code = therec.get("ar_code");
		icompanyname = "Undefined";
			
		if(!iar_code.equals(""))
			icompanyname = getCompanyName(iar_code);
			
		strarray[1] = icompanyname;
		
		insertListItems(dispatchschedule2,strarray,SCHEDULEID_PREFIX);
	}
}

void clearDispatchScheduleListbox(Div mDiv)
{
	Listbox oldlb = mDiv.getFellowIfAny("dispatchschedule2");
	
	if(oldlb != null)
		oldlb.setParent(null);
}

// to populate makeDispatchScheduleListbox - dispatchschedule2 with recs
// imanif_origid = which manifest id to search for
void populateDispatchScheduleListbox(String imanif_origid)
{
	sql = als_mysoftsql();
	if(sql == NULL) return;
	
	maniforig = strip_PrefixID(imanif_origid);
	
	sqlstatem = "select * from DispatchScheduleDetails where manifest_id=" + maniforig;
	
	tlist = sql.rows(sqlstatem);
	sql.close();
	
	if(tlist == null) return;
	
	String[] strarray = new String[2];
	
	for(ilist : tlist)
	{
		strarray[0] = SCHEDULEID_PREFIX + ilist.get("origid").toString();
		
		icompanyname = getCompanyName(ilist.get("ar_code"));
		strarray[1] = icompanyname;

		// dispatchschedule2 hardcoded as in makeDispatchScheduleListbox()
		
		insertListItems(dispatchschedule2,strarray,SCHEDULEID_PREFIX);
		
		}
}

Listbox makeDispatchScheduleListbox(Div mDiv)
{
	// clear the listbox first
	clearDispatchScheduleListbox(mDiv);

    Listbox newlb = new Listbox();

    newlb.setId("dispatchschedule2");
    newlb.setVflex(true);
	
    // newlb.setContext("dispatchSchedulingContext");
    // newlb.setPopup("testmypop");
	
	newlb.setDroppable(SCHEDULEID_PREFIX);
	newlb.addEventListener("onDrop", new MyDropListener());

    newlb.setParent(mDiv);

    Listhead newhead = new Listhead();
    newhead.setSizable(true);
    newhead.setParent(newlb);
	
    Listheader hd1 = new Listheader();
    hd1.setLabel("CustCode");
    hd1.setSort("auto");
    hd1.setParent(newhead);

    Listheader hd2 = new Listheader();
    hd2.setLabel("Customer");
    hd2.setSort("auto");
    hd2.setParent(newhead);
	
    return newlb;

} // end of makeDispatchScheduleListbox()

// Do the search and populate listbox
void startDispatchManifestSearch(Datebox startd, Datebox endd)
{
	sdate = getDateFromDatebox(startd);
    edate = getDateFromDatebox(endd);
	
    sql = als_mysoftsql();
    if(sql == NULL) return;

	sqlstatem = "select * from " + DISPATCHMANIFEST_TABLE + " where schedule_date between '" + sdate + "' and '" + edate + "'" + 
	" order by schedule_date desc";
	
	tlist = sql.rows(sqlstatem);
	sql.close();

	// found some records but must be within limit else the browser will crash
	reccount = tlist.size();
	
	// if there's previously a listbox, remove before adding a new one.
	Listbox oldlb = dispatchmanifest_div.getFellowIfAny("dispatchmanifest_lb");
	if(oldlb != null) oldlb.setParent(null);

	// create a new listbox and attach to dispatchmanifest_div
	Listbox newlb = makeDispatchManifestListbox(dispatchmanifest_div);
	
	if(reccount > 0 && reccount <= 500)
	{
		String[] strarray = new String[3];

        // showMessageBox(tlist.get(0).get("Date_Created").toString());
		for(ilist : tlist)
		{
            strarray[0] = DISPATCHMANIFEST_PREFIX + ilist.get("origid").toString();
            strarray[1] = ilist.get("schedule_date").toString().substring(0,10);
			
			idispcode = ilist.get("dispatcher_id");
			idispname = "Undefined";

			if(!idispcode.equals(""))
			{
				xrec = getDispatcherRec(idispcode);
				if(xrec != null)
					idispname = xrec.get("dispatcher_name");
			}
			
			strarray[2] = idispname;

            insertListItems(newlb,strarray,DISPATCHMANIFEST_PREFIX);
		}
	}

} // end of startDispatchManifestSearch()

// Create an entry in the boxrentalform table ..
// fields: 
void createNewBoxRental(Datebox ihiddendatebox)
{
	todaysdate = getDateFromDatebox(ihiddendatebox);

	sql = als_mysoftsql();
    if(sql == NULL) return;

	sqlstatem = "insert into " + BOXRENTAL_TABLE + " values ('" + todaysdate + "','','','')";
	
	//sql.execute(sqlstatem);
	sql.close();
	
	// refresh the dispatch schedule search-box.. set today's date for both start/end search date
	//setTodayDatebox(startdate);
	//setTodayDatebox(enddate);
	startDispatchManifestSearch(startdate,enddate);

} // end of createNewboxrentalform()

void removeScheduleFromListbox()
{
	// make sure to update ScheduleDetails.manifest_id or whatever to reflect removal of schedule from the manifest
	
	iselected = dispatchschedule2.getSelectedIndex();
	idisps = dispatchschedule2.getSelectedItem().getLabel();
	idispshid = strip_PrefixID(idisps);
	
	if(iselected == -1) return;

	sql = als_mysoftsql();
    if(sql == NULL) return;
	
	sqlstatem = "update DispatchScheduleDetails set manifest_id=0, dispatcher_id='' where origid=" + idispshid ;
	sql.execute(sqlstatem);
	sql.close();
    	
	dispatchschedule2.removeItemAt(iselected);
}

void saveForm()
{
	whathuh.updateDetails();
	startBoxRentalSearch(startdate,enddate);
	
	makeDispatchScheduleListbox(dispschedule_div);
	populateDispatchScheduleListbox(whathuh.dm_origid.getValue());
	
	// whathuh.clearDetails();
}

// Remove a dispatch manifest .. some logic here
void removeBoxRental()
{
	// Make sure there're no destinations.. otherwise don't allow deletion. Can recode this if user got use to the system and wanted fast response, delete the whole lot
	
	manfids = whathuh.dm_origid.getValue();
	manifid = strip_PrefixID(manfids);
	if(manifid.equals("")) return;

	// sure to delete?
	if (Messagebox.show("Delete manifest " + manfids, "Are you sure?", 
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO)
		return;
	
	// Remove all destinations' linking to the manifest. Otherwise destinations will not be able to assign to a new manifest
	
	sql = als_mysoftsql();
    if(sql == NULL) return;
	
	sqlstatem = "update DispatchScheduleDetails set manifest_id=0, dispatcher_id='' where manifest_id=" + manifid;
	sql.execute(sqlstatem);
	
	// finally delete boxrental from the database
	
	sqlstatem = "delete from BoxRental where origid=";
	sql.execute(sqlstatem);

	sql.close();

	whathuh.clearDetails();
	startDispatchManifestSearch(startdate,enddate);
	makeDispatchScheduleListbox(dispschedule_div);
}

]]>
</zscript>

<window id="boxrental_manager.win" title="Assign New Container" width="700px" height="700px" position="center"
 mode="overlapped" border="normal" closable="true"
 onCancel="globalCloseWindow(myincludeid)" onClose="globalCloseWindow(myincludeid)"
>
<div>

<groupbox mold="3d" width="100%">
<caption label="New Container" />

<hbox>
	<label value="Rentout date" />
	<datebox id="startdate" format="yyyy-MM-dd" />
	
	<label value="Return date" />
	<datebox id="enddate" format="yyyy-MM-dd" />
	
	<button label="Search" onClick="startBoxRentalSearch(startdate,enddate)" />
	<button label="New Container" onClick="createNewBoxRental(hiddendatebox)" />
	<button label="Delete Container" onClick="removeBoxRental()" />

	<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" />
	
</hbox>
<separator height="3px" />

<div id="dispatchmanifest_div" />

</groupbox>

<hbox>

<groupbox mold="3d" width="460px">
<caption label="Container Result" />

<div id="dispschedule_div" />

<zscript>
makeDispatchScheduleListbox(dispschedule_div);
</zscript>

<button label="Remove Container" onClick="removecontainerFromListbox()" />

</groupbox>

<vbox>
<groupbox mold="3d" width="215px">
<caption label="Container details" />

<vbox>
	<textbox id="ar_code" disabled="true" />
	
	<label value="Rent out date" />
	<datebox id="rentout_date" format="yyyy-MM-dd" />
			
	<label value="Box Code" />
	<textbox id="Box_id" width="150px" droppable="BOXID" onDrop="dropbox_id(event)" />

	<label value="Quantity" />
	<textbox id="quantity" width="150px" />
				
	<label value="Type of Container" />
	<textbox id="containertype" multiline="true" width="200px" height="20px" disabled="true" />

	<label value="Type of Prservative" />
	<textbox id="containerprservative" multiline="true" width="200px" height="20px" disabled="true" />
	
	<button label="Assign Container Available" onClick="playAssignContainerAvailable()"/>
	<button label="Save Form " onClick="saveForm()" />
</vbox>

</groupbox>

<button label="Close window" onClick="globalCloseWindow(myincludeid)" />

</vbox>

</hbox>

<zscript>
<![CDATA[

setTodayDatebox(startdate);
setTodayDatebox(enddate);
setTodayDatebox(hiddendatebox);

]]>
</zscript>

<separator height="10px" />

</div>

</window>

</zk>
