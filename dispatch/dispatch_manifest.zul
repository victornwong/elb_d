<?xml version="1.0" encoding="UTF-8"?>
<?page id="dispatch_manifest_wind"?>
<zk>
<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript src="../alsglobal/dispatchschedule.zs" />
<zscript>
<![CDATA[
MYVERSION = "v0.1";
/*
<zscript src="../alsglobal/alsglobalfuncs.zs" />
<zscript src="../alsglobal/alsglobal_guifuncs.zs" />
<zscript src="../alsglobal/alsglobal_sqlfuncs.zs" />
<zscript src="../alsglobal/securityfuncs.zs" />

Dispatch Manifest module
Coding began date	: 18/01/2010
Written by			: Victor Wong

02/04/2012: optimize and port to byte-compl
*/

import java.io.*;
import java.util.*;
import java.text.*;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.victor.*;
sechand = new SecurityFuncs();

useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);
myincludeid = Executions.getCurrent().getParameter("myid");

// hardcoded html-post parameter name: ar_code (set in customer_extra_address.zul -> playDocsDeliveryDetails()
// the_arcode = Executions.getCurrent().getParameter("ar_code");

kiboo = new Generals();
sqlhand = new SqlFuncs();
lbhand = new ListboxHandler();
guihand = new GuiFuncs();

windcounter = 1;
DISPATCHMANIFEST_TABLE = "DispatchManifest";
String[] transportationtypes = { "Motorcycle","Car","Bicycle" };
Object whathuh;

// check manifest schedules listbox for dups schedule, return true if dup
boolean checkManifestSchedule_Dups(String iwhichrec)
{
	// hardcoded dispatchschedule2 listbox id
	listcount = dispatchschedule2.getItemCount();
	retval = false;
	if(listcount > 0)
	{
		for(i=0; i<listcount; i++)
		{
			lb_origid = dispatchschedule2.getItemAtIndex(i);
			if(lb_origid.getLabel().equals(iwhichrec))
			{
				guihand.showMessageBox("Destination already in manifest");
				retval = true;
				break;
			}
		}
	}
	return retval;
}

boolean checkScheduleAssignedToManifest(Object iwhichrec)
{
	retval = false;
	idispmanif = iwhichrec.get("manifest_id");
	if(idispmanif != 0)
	{
		guihand.showMessageBox("Schedule already assigned to " + DISPATCHMANIFEST_PREFIX + idispmanif.toString());
		retval=true;
	}
	return retval;
}

class dispatchManifestInput
{
	public Datebox dm_schedule_date;
	public Textbox dm_dispatcher_id;
	public Textbox dm_extranotes;
	public Textbox dm_origid;
	
	public Listbox dm_transportation;
	
	public Textbox dm_dispatcher_name;
	public Textbox dm_outsource_name;

	public dispatchManifestInput(Textbox iorigid, Datebox ischedule_date, Textbox idispatcher_id, Textbox iextranotes, 
		Textbox idispatchername, Textbox ioutsource, Listbox itransportation)
	{
		dm_schedule_date = ischedule_date;
		dm_dispatcher_id = idispatcher_id;
		dm_extranotes = iextranotes;
		
		dm_origid = iorigid;
		
		dm_dispatcher_name = idispatchername;
		dm_outsource_name = ioutsource;
		
		dm_transportation = itransportation;
	}
	
	void clearDetails()
	{
		dm_dispatcher_id.setValue("");
		dm_extranotes.setValue("");
		
		dm_origid.setValue("");
		
		dm_dispatcher_name.setValue("");
		dm_outsource_name.setValue("");
	}
	
	void showDetails()
	{
		// clear schedules listbox first
		iorigid = kiboo.strip_PrefixID(dm_origid.getValue());
		if(iorigid.equals("")) return;

		sql = sqlhand.als_mysoftsql();
		if(sql == null) return;

		sqlstatem = "select * from " + DISPATCHMANIFEST_TABLE + " where origid=" + iorigid;
		therec = sql.firstRow(sqlstatem);
		sql.close();

		if(therec == null)
		{
			guihand.showMessage("ERROR! Cannot retrieve manifest record");
			return;
		}

		dm_schedule_date.setValue(therec.get("schedule_date"));
		dm_dispatcher_id.setValue(therec.get("dispatcher_id"));
		dm_extranotes.setValue(therec.get("extranotes"));

		dm_dispatcher_name.setValue("");
		dm_outsource_name.setValue("");

		transid = therec.get("transportation");

		transindex = (transid.equals("Car")) ? 1 : 0;
		dm_transportation.setSelectedIndex(transindex);

		// show dispatcher name as dispatcher_id is supposed to be hidden
		disprec = getDispatcherRec(therec.get("dispatcher_id"));

		if(disprec != null)
		{
			dm_dispatcher_name.setValue(disprec.get("dispatcher_name"));
			dm_outsource_name.setValue(disprec.get("outsource_name"));
		}
		// put codes here to update the manifest's schedules listbox
		populateDispatchScheduleListbox(dm_origid.getValue());
	}
	
	void saveSchedulesList()
	{
		// hardcoded dispatchschedule2 listbox id
		listcount = dispatchschedule2.getItemCount();

		if(listcount == 0) return;
		imanifest_origid = kiboo.strip_PrefixID(dm_origid.getValue());
		sql = sqlhand.als_mysoftsql();
		if(sql == null) return;

		for(i=0; i<listcount; i++)
		{
			// get schedule origid
			ischorigid = dispatchschedule2.getItemAtIndex(i).getLabel();
			schorigid = kiboo.strip_PrefixID(ischorigid);
			// update manifest_id field
			sqlstatem = "update DispatchScheduleDetails set manifest_id=" + imanifest_origid + ", " +
				"dispatcher_id='" + dm_dispatcher_name.getValue() + "' " +
				"where origid=" + schorigid ;
			sql.execute(sqlstatem);
		}
		sql.close();
	}

	void updateDetails()
	{
		if(dm_origid.getValue().equals(""))
		{
			clearDetails();
			return;
		}

		sql = sqlhand.als_mysoftsql();
		if(sql == null) return;
		iorigid = kiboo.strip_PrefixID(dm_origid.getValue());

		idispid = dm_dispatcher_id.getValue();
		ischedule_date = kiboo.getDateFromDatebox(schedule_date);
		iextranotes = kiboo.replaceSingleQuotes(dm_extranotes.getValue());
		itransport = dm_transportation.getSelectedItem().getLabel();

		sqlstatem = "update " + DISPATCHMANIFEST_TABLE + " set dispatcher_id='" + idispid + "'," +
		"schedule_date='" + ischedule_date + "'," +
		"extranotes='" + iextranotes + "', " +
		"transportation='" + itransport + "' " +
		"where origid=" + iorigid;

		sql.execute(sqlstatem);
		sql.close();
		// codes to save schedules list - update the manifest_id in DispatchScheduleDetails
		saveSchedulesList();
	}

}

void dropDispatcherId(Event event)
{
	Component dragged = event.dragged;
	idispid = dragged.getLabel();
	therec = getDispatcherRec(idispid); // in alsglobalfuncs.zs
	newdispatcher_name.setValue(therec.get("dispatcher_name"));
	newoutsource_name.setValue(therec.get("outsource_name"));
	dispatcher_id.setValue(idispid);
}

void playAssignDispatcher()
{
	// no manifest selected, just return..
	if(whathuh.dm_origid.getValue().equals("")) return;

	uniqwindowid = "dispass" + myincludeid + "wind" + windcounter;
	guihand.globalActivateWindow(mainPlayground,"miscwindows","dispatch/dispatcher_selectionbox.zul", uniqwindowid, "dispid=0",useraccessobj);
	windcounter++;
}

class MyDispatchManifest_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		// 28/1/2010: save previous rec if available
		whathuh.updateDetails();
		irecno = dispatchmanifest_lb.getSelectedItem().getLabel();
		whathuh.dm_origid.setValue(irecno);
		whathuh.showDetails();
		startDispatchManifestSearch(startdate,enddate);
	}
	
} // end of MyDispatchManifest_Listener

class MyDropListener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		Component dragged = event.dragged;
		iorigid_schedule_details = dragged.getLabel();

		// check for dups in the list
		if(checkManifestSchedule_Dups(iorigid_schedule_details)) return;

		// no manifest selected, ignore insertion of schedule
		if(whathuh.dm_origid.getValue().equals("")) return;

		therec = getDispatchScheduleRec(iorigid_schedule_details);

		if(therec == null) return;

		// destination already completed, don't add into list anymore.
		if(therec.get("completed") == 1)
		{
			guihand.showMessageBox(iorigid_schedule_details + " is completed, can't insert");
			return;
		}

		// check if schedule already assigned to a manifest
		// 3/2/2010: recode this part, if destination in manifest but incomplete and date is earlier than the manifest date then can insert
		if(checkScheduleAssignedToManifest(therec)) return;

		if(therec.get("ar_code").equals(""))
		{
			guihand.showMessageBox(iorigid_schedule_details + " is empty, cannot insert");
			return;
		}

		String[] strarray = new String[2];
		strarray[0] = SCHEDULEID_PREFIX + therec.get("origid").toString();
		iar_code = therec.get("ar_code");
		icompanyname = "Undefined";
		if(!iar_code.equals("")) icompanyname = sqlhand.getCompanyName(iar_code);
		strarray[1] = icompanyname;
		lbhand.insertListItems(dispatchschedule2,strarray,SCHEDULEID_PREFIX,"");
	}
}

// imanif_origid = which manifest id to search for
void populateDispatchScheduleListbox(String imanif_origid)
{
Object[] dest_lb_headers = {
	new listboxHeaderWidthObj("SchID",true,"80px"),
	new listboxHeaderWidthObj("Customer",true,""),
};

	newlb = lbhand.makeVWListbox_Width(dispschedule_div,dest_lb_headers,"dispatchschedule2",15);
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	maniforig = kiboo.strip_PrefixID(imanif_origid);
	sqlstatem = "select * from DispatchScheduleDetails where manifest_id=" + maniforig;
	tlist = sql.rows(sqlstatem);
	sql.close();

	newlb.setDroppable(SCHEDULEID_PREFIX);
	newlb.addEventListener("onDrop", new MyDropListener());

	if(tlist.size() == 0) return;

	String[] strarray = new String[2];
	for(ilist : tlist)
	{
		strarray[0] = SCHEDULEID_PREFIX + ilist.get("origid").toString();
		icompanyname = sqlhand.getCompanyName(ilist.get("ar_code"));
		strarray[1] = icompanyname;
		lbhand.insertListItems(newlb,strarray,SCHEDULEID_PREFIX,"");
	}
}

// Do the search and populate listbox
void startDispatchManifestSearch(Datebox startd, Datebox endd)
{
Object[] dispm_lb_headers = {
	new listboxHeaderWidthObj("ManifestID",true,"80px"),
	new listboxHeaderWidthObj("Date",true,""),
	new listboxHeaderWidthObj("Dispatcher",true,""),
};

	sdate = kiboo.getDateFromDatebox(startd);
	edate = kiboo.getDateFromDatebox(endd);

	newlb = lbhand.makeVWListbox_Width(dispatchmanifest_div,dispm_lb_headers,"dispatchmanifest_lb",15);
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	sqlstatem = "select top 200 * from " + DISPATCHMANIFEST_TABLE + " where schedule_date between '" + sdate + "' and '" + edate + "'" + 
	" order by schedule_date desc";

	tlist = sql.rows(sqlstatem);
	sql.close();

	newlb.addEventListener("onSelect", new MyDispatchManifest_Listener());

	if(tlist.size() == 0) return;
	String[] strarray = new String[3];

	for(ilist : tlist)
	{
		strarray[0] = DISPATCHMANIFEST_PREFIX + ilist.get("origid").toString();
		strarray[1] = ilist.get("schedule_date").toString().substring(0,10);
		idispcode = ilist.get("dispatcher_id");
		idispname = "Undefined";

		if(!idispcode.equals(""))
		{
			xrec = getDispatcherRec(idispcode);
			if(xrec != null) idispname = xrec.get("dispatcher_name");
		}

		strarray[2] = idispname;

		lbhand.insertListItems(newlb,strarray,DISPATCHMANIFEST_PREFIX,"");
	}

} // end of startDispatchManifestSearch()

// Create an entry in the dispatchschedule table ..
// fields: 
void createNewDispatchManifest(Datebox ihiddendatebox)
{
	todaysdate = kiboo.getDateFromDatebox(ihiddendatebox);

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	sqlstatem = "insert into " + DISPATCHMANIFEST_TABLE + " values ('" + todaysdate + "','','','')";
	sql.execute(sqlstatem);
	sql.close();

	// refresh the dispatch schedule search-box.. set today's date for both start/end search date
	//setTodayDatebox(startdate);
	//setTodayDatebox(enddate);
	startDispatchManifestSearch(startdate,enddate);

} // end of createNewDispatchManifest()

void removeScheduleFromListbox()
{
	// make sure to update ScheduleDetails.manifest_id or whatever to reflect removal of schedule from the manifest
	iselected = dispatchschedule2.getSelectedIndex();
	idisps = dispatchschedule2.getSelectedItem().getLabel();
	idispshid = kiboo.strip_PrefixID(idisps);
	if(iselected == -1) return;
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	sqlstatem = "update DispatchScheduleDetails set manifest_id=0, dispatcher_id='' where origid=" + idispshid ;
	sql.execute(sqlstatem);
	sql.close();
	dispatchschedule2.removeItemAt(iselected);
}

// Print manifest using BIRT template - call print_dispatchmanifest.zul to actually run the BIRT viewer
void printDispatchManifest()
{
	ithemanif = kiboo.strip_PrefixID(whathuh.dm_origid.getValue());
	theparam = "manifest_id=" + ithemanif;
	uniqwindowid = "prtmanif" + myincludeid + "wind" + windcounter;
	guihand.globalActivateWindow(mainPlayground,"miscwindows","dispatch/print_dispatchmanifest.zul", uniqwindowid, theparam,useraccessobj);
	windcounter++;
} // end of showTheDocument()

void saveManifest()
{
	whathuh.updateDetails();
	startDispatchManifestSearch(startdate,enddate);
	populateDispatchScheduleListbox(whathuh.dm_origid.getValue());
	// whathuh.clearDetails();
}

// Remove a dispatch manifest .. some logic here
void removeDispatchManifest()
{
	// Make sure there're no destinations.. otherwise don't allow deletion. Can recode this if user got use to the system and wanted fast response, delete the whole lot
	manfids = whathuh.dm_origid.getValue();
	manifid = kiboo.strip_PrefixID(manfids);
	if(manifid.equals("")) return;

	// sure to delete?
	if (Messagebox.show("Delete manifest " + manfids, "Are you sure?", 
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO)
		return;

	// Remove all destinations' linking to the manifest. Otherwise destinations will not be able to assign to a new manifest
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	sqlstatem = "update DispatchScheduleDetails set manifest_id=0, dispatcher_id='' where manifest_id=" + manifid;
	sql.execute(sqlstatem);
	// finally delete manifest from the database
	sqlstatem = "delete from DispatchManifest where origid=" + manifid;
	sql.execute(sqlstatem);
	sql.close();
	whathuh.clearDetails();
	startDispatchManifestSearch(startdate,enddate);
}

// 9/10/2010: special func - send manifest(PDF) to ISIS outsource
// c:\birt-runtime-2_5_0\ReportEngine\genReport.bat -f PDF -o test.pdf -p "manifest_id=" C:\Tomcat 6.0\webapps\BIRT\dispatchmanifest.rptdesign
void sendManifestToISIS_clicker()
{
	dispmanf_txt = whathuh.dm_origid.getValue();
	if(dispmanf_txt.equals("")) return;

	ithemanif = kiboo.strip_PrefixID(dispmanf_txt);
	theparam = "manifest_id=" + ithemanif;
	outfname = "\"" + session.getWebApp().getRealPath("/tmp/" + dispmanf_txt + ".pdf") + "\"" ;
	outfn_pdf = "\"" + session.getWebApp().getRealPath("/tmp/" + dispmanf_txt + ".pdf") + "\"" ;

	/*
	runstring = "cmd /c start/wait c:/birt-runtime-2_5_0/ReportEngine/genReport.bat -f PDF -o " + outfname + " -p \"" + theparam + 
	"\" \"C:/Tomcat 6.0/webapps/BIRT/dispatchmanifest.rptdesign\"";
	*/
	runstring = "c:\\kaching.bat " + outfname + " " + theparam;

	Process p = Runtime.getRuntime().exec(runstring);
	//Process k = Runtime.getRuntime().exec("c:\\ssconv.bat " + outfname + " " + outfn_pdf);

	alert("done..");
}

]]>
</zscript>

<window id="dispatch_manifest" title="Dispatch/Sampling Manifest ${MYVERSION}" width="700px" height="640px" position="center" mode="overlapped" border="normal" closable="true">
<div>
<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" onCreate="self.value = new Date()" />
<groupbox mold="3d" width="100%">
	<caption label="Manifest" />
	<hbox>
		<label value="Start date" style="font-size:9px" />
		<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" onCreate="self.value = new Date()" />
		<label value="End date" style="font-size:9px" />
		<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" onCreate="self.value = new Date()" />
		<button label="Search" style="font-size:9px" onClick="startDispatchManifestSearch(startdate,enddate)" />
		<button label="New manifest" style="font-size:9px" onClick="createNewDispatchManifest(hiddendatebox)" />
		<button label="Delete manifest" style="font-size:9px" onClick="removeDispatchManifest()" />
	</hbox>
	<separator height="3px" />
	<div id="dispatchmanifest_div" />
</groupbox>
<hbox>
<groupbox mold="3d" width="460px">
<caption label="Destinations" />
<div id="dispschedule_div" />
<button label="Remove destination" style="font-size:9px" onClick="removeScheduleFromListbox()" />

</groupbox>

<vbox>
<groupbox mold="3d" width="215px">
<caption label="Manifest details" />

<vbox>
	<textbox id="manifest_origid" style="font-size:9px" disabled="true" />
	<label value="Job date" style="font-size:9px" />
	<datebox id="schedule_date" format="yyyy-MM-dd" style="font-size:9px" onCreate="self.value = new Date()" />
	<label value="Dispatcher name" style="font-size:9px" />
	<textbox id="newdispatcher_name" width="150px" droppable="DSPRID" onDrop="dropDispatcherId(event)" style="font-size:9px" />
	<label value="Outsource" style="font-size:9px" />
	<textbox id="newoutsource_name" style="font-size:9px" width="150px" disabled="true" />
	<textbox id="dispatcher_id" visible="false" />
	<label value="Extra notes" style="font-size:9px" />
	<textbox id="newextranotes" style="font-size:9px" multiline="true" width="200px" height="50px" />
	<hbox>
		<label value="Transport" style="font-size:9px" />
		<listbox mold="select" rows="1" id="transport_type_dd" style="font-size:9px" />
		<zscript>
			lbhand.populateDropdownListbox(transport_type_dd,transportationtypes);
		</zscript>
	</hbox>
	<button label="Assign dispatcher" style="font-size:9px" onClick="playAssignDispatcher()"/>
	<button label="Save this manifest" style="font-size:9px" onClick="saveManifest()" />
	<button label="Print manifest" style="font-size:9px" onClick="printDispatchManifest()" />
	<button label="E-mail to ISIS Logistics" style="font-size:9px" onClick="sendManifestToISIS_clicker()" />
</vbox>

</groupbox>

<button label="Close window" style="font-size:9px" onClick="guihand.globalCloseWindow(mainPlayground,myincludeid)" />

</vbox>

</hbox>

<zscript>
<![CDATA[

tNewManifestInput = new dispatchManifestInput(manifest_origid,schedule_date,dispatcher_id,newextranotes,newdispatcher_name,newoutsource_name,transport_type_dd);
whathuh = tNewManifestInput;

/*

populateDispatcherDetailsBox(extra_addr_div);

tNewDispatcherInput = new extraAddressInput(newaddress1, newaddress2, newzip, newcity, newstate,
	newprimaryphone, newprimaryfax, newdispatcher_name, newoutsource_name, newemail, newextranotes, newaddr_recno);
*/

kiboo.setTodayDatebox(startdate);
kiboo.setTodayDatebox(enddate);
kiboo.setTodayDatebox(hiddendatebox);

startDispatchManifestSearch(startdate,enddate);

]]>
</zscript>
</div>
</window>
</zk>

