<?xml version="1.0" encoding="UTF-8"?>
<?page id="resultentry_v3_mod"?>
<zk>
<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript src="../alsglobal/formMaker_v1.zs" />
<zscript src="../alsglobal/uploadedWorksheet_v1.zs" />
<zscript>
<![CDATA[
MYTITLE = "Advance Results Entry (with additional forms)";
MYVERSION = "v0.3";
boolean debugflag = false;
/*
Title		: Chemistry result entry
Written by	: Victor Wong

stockmasterdetails.NewField5 = formkeeper id !! IMPORTANT !!

New version with support of form-keeper and excel-worksheet funcs
Must standardize the report-template as import funcs are hard-coded

*/
/*
import java.lang.Float;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.zk.zutl.*;
*/
import java.util.*;
import java.text.*;
import java.io.*;

import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;

import org.zkoss.zul.*;

import org.victor.*;
sechand = new SecurityFuncs();

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals();
sqlhand = new SqlFuncs();
lbhand = new ListboxHandler();
guihand = new GuiFuncs();
luhand = new LookupFuncs();

int last_loadtype = 0;
String glob_selected_folderno = "";
String glob_selected_jobsample = "";
String glob_selected_jtp = "";
String glob_selected_mysoft = "";
String glob_selected_formkeeper = "";
String glob_selected_testname = "";
String glob_selected_method = "";

vicFormMaker glob_formmaker = null;

// knockoff from the web - to be used later
String getKeyByValue(HashMap ihmap, String istring)
{
	ffe = "";
	for(tentry : ihmap.entrySet())
	{
		ffe += tentry.getKey() + "->" + tentry.getValue() + ", ";
		if( istring.equals(tentry.getValue()) ) break; //return tentry.getKey();
	}
	alert(ffe);
	return null;
}

void clearSomeFields()
{
	keyin_by.setValue("");
	keyin_date.setValue("");
	saved_msg.setValue("");
}

void showTestForms()
{
	if(glob_selected_jtp.equals("")) return;
	
	workarea.setVisible(false);

	// check got formkeeper-id, if not, try loading from stockmasterdetails
	if(glob_selected_formkeeper.equals("") && !glob_selected_mysoft.equals(""))
	{
		smd = sqlhand.getMySoftMasterProductRec(glob_selected_mysoft);
		if(smd == null) return;
		fkfsmd = kiboo.checkNullString(smd.get("NewField5"));
		if(fkfsmd.equals("")) return;

		fmobj = sqlhand.getFormKeeper_rec(fkfsmd);
		if(fmobj == null) { gui.showMessageBox("ERR: Cannot load XML-form definitions"); return; }

		glob_selected_formkeeper = fmobj.get("origid").toString();

		formxml = sqlhand.clobToString(fmobj.get("xmlformstring"));
		exmres = sqlhand.clobToString(fmobj.get("exampleresult"));
		glob_formmaker = new vicFormMaker(form_holder,"thebigform",formxml);
		glob_formmaker.generateForm();
		glob_formmaker.populateFormValues(exmres);

		form_sampleid.setValue(glob_selected_jobsample);

		clearSomeFields();

		// check if any previous results entered
		lresult = sqlhand.getLatestResult(glob_selected_jobsample,glob_selected_mysoft);
		if(lresult != null)
		{
			kuser = lresult.get("username");
			kdate = (lresult.get("Analysed_Date") != null) ? lresult.get("Analysed_Date").toString().substring(0,10) : "";
			keyin_by.setValue(kuser);
			keyin_date.setValue(kdate);

			kres = lresult.get("formresults");
			if(kres != null)
			{
				resl = sqlhand.clobToString(kres);
				glob_formmaker.populateFormValues(resl);
			}
		}

		workarea.setVisible(true);
	}
}

class sampletests_onSelect implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = sampletests_lb.getSelectedItem();
		glob_selected_jtp = lbhand.getListcellItemLabel(isel,0);
		glob_selected_mysoft = lbhand.getListcellItemLabel(isel,1);
		glob_selected_formkeeper = lbhand.getListcellItemLabel(isel,2);
		glob_selected_testname = lbhand.getListcellItemLabel(isel,3);
		glob_selected_method = lbhand.getListcellItemLabel(isel,4);
		showTestForms();
	}
}

void showJobSampleTests(String iwhat)
{
Object[] jtplist_headers =
{
	new listboxHeaderWidthObj("jtpid",false,""),
	new listboxHeaderWidthObj("mysc",false,""),
	new listboxHeaderWidthObj("formkeeper",false,""),
	new listboxHeaderWidthObj("Test with results-form",true,""),
	new listboxHeaderWidthObj("Method",true,""),
};

	sqlstm = "select jtp.origid,jtp.mysoftcode,jtp.formkeeper_id, smd.description, smd.description2 " + 
	"from jobtestparameters jtp " +
	"left join stockmasterdetails smd on smd.id = jtp.mysoftcode " +
	"where jobsamples_id=" + iwhat + " order by origid";

	Listbox newlb = lbhand.makeVWListbox_Width(sampletests_holder, jtplist_headers, "sampletests_lb", 15);
	jobsample_id.setValue(iwhat);

	jtps = sqlhand.gpSqlGetRows(sqlstm);
	if(jtps.size() == 0) { return; }
	newlb.addEventListener("onSelect", new sampletests_onSelect());
	for(dpi : jtps)
	{
		ArrayList kabom = new ArrayList();
		kabom.add(dpi.get("origid").toString());
		kabom.add(dpi.get("mysoftcode").toString());
		kabom.add(kiboo.checkNullString(dpi.get("formkeeper_id")));
		kabom.add(kiboo.checkNullString(dpi.get("description")));
		kabom.add(kiboo.checkNullString(dpi.get("description2")));
		strarray = kiboo.convertArrayListToStringArray(kabom);	
		lbhand.insertListItems(newlb,strarray,"false","");
	}
}

class jslist_onSelect implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = jobsamples_lb.getSelectedItem();
		glob_selected_jobsample = lbhand.getListcellItemLabel(isel,0);
		showJobSampleTests(glob_selected_jobsample);
	}
}

void loadSampleTests(int itype)
{
Object[] jslist_headers =
{
	new listboxHeaderWidthObj("SampID",true,"60px"),
	new listboxHeaderWidthObj("SampMarking",true,""),
};

	// hide working boxes - tidier
	foldermeta_area.setVisible(false);
	workarea.setVisible(false);

	last_loadtype = itype;
	foldernum = kiboo.replaceSingleQuotes(folderno_tb.getValue());
	sampid = kiboo.replaceSingleQuotes(sampleid_tb.getValue());

	// dev purposes - no need to type
	if(foldernum.equals("") && useraccessobj.accesslevel==9) foldernum = "ALSM36166";

	if(itype == 1 && foldernum.equals("")) return;
	if(itype == 2 && sampid.equals("")) return;

	Listbox newlb = lbhand.makeVWListbox_Width(jobsamples_holder, jslist_headers, "jobsamples_lb", 15);

	if(itype == 2)
	{
		sqlstm = "select jf.folderno_str " +
		"from jobfolders jf left join jobsamples js on js.jobfolders_id = jf.origid " +
		"where js.origid=" + sampid + " and " +
		"jf.deleted = 0 and js.deleted = 0";

		fifold = sqlhand.gpSqlFirstRow(sqlstm);
		if(fifold == null) return;
		foldernum = fifold.get("folderno_str");
	}

	jobfolder_str.setValue(foldernum);
	glob_selected_folderno = foldernum; // save for usage later

	sqlstm = "select js.origid as js_origid, js.sampleid_str, js.samplemarking, js.asma_id, js.asma_station, jf.folderno_str " +
	"from jobfolders jf left join jobsamples js on js.jobfolders_id = jf.origid " +
	"where jf.folderno_str = '" + foldernum + "' and " +
	"jf.deleted = 0 and js.deleted = 0";

	therows = sqlhand.gpSqlGetRows(sqlstm); // grab samples + marking
	if(therows.size() == 0) { return; }
	newlb.addEventListener("onSelect", new jslist_onSelect());

	for(dpi : therows)
	{
		ArrayList kabom = new ArrayList();
		kabom.add(dpi.get("js_origid").toString());
		kabom.add(dpi.get("samplemarking"));
		strarray = kiboo.convertArrayListToStringArray(kabom);	
		lbhand.insertListItems(newlb,strarray,"false","");
	}
	
	foldermeta_area.setVisible(true);
}

// Splicer funcs - uses POI
RESULT_SHEET = 1;
LAB_ID_STRING = "Lab I.D";
LAB_ID_COLUMN = 4;
LAB_TEST_COLUMN = 1;
uploadedWorksheet uploadedResults = null;

void doUploadWorksheet()
{
	// make sure user selected a sample and test
	//if(glob_selected_jobsample.equals("") && glob_selected_formkeeper.equals("")) return;

	uploadedResults = new uploadedWorksheet();
	uploadedResults.getUploadFileData();
	if(uploadedResults.thefiledata == null) { guihand.showMessageBox("ERR: Invalid worksheet"); return; }

	// show uploaded results details
	uploaded_filename.setValue(uploadedResults.thefilename);
}

// organic results worksheet splicer v1 -- VERY-VERY HARDCODED!!
void spliceOrganicResults_v1()
{
	if(uploadedResults == null) return;
try
{
	ByteArrayInputStream mybytes = new ByteArrayInputStream(uploadedResults.thefiledata);
	HSSFWorkbook excelWB = new HSSFWorkbook(mybytes);
	FormulaEvaluator evaluator = excelWB.getCreationHelper().createFormulaEvaluator();
	numsheets = excelWB.getNumberOfSheets();

	// HARDCODED: based on existing excel-template
	// Results are in sheet 2
	if(numsheets < 2) { guihand.showMessageBox("ERR: Not the correct result-template"); return; }

	sheet = excelWB.getSheetAt(RESULT_SHEET);
	numrows = sheet.getPhysicalNumberOfRows();

	foundstring = "";
	int flabidcol = -1, flabidrow = -1;
	boolean foundlabid = false;
	boolean labid_change = false;

	// this one is HARDCODED for the organic excel report-template
	// try to find sample-id
	for(int labi=0; labi<numrows; labi++)
	{
		org.apache.poi.hssf.usermodel.HSSFRow checkrow = sheet.getRow(labi);
		Cell kcell = checkrow.getCell(LAB_ID_COLUMN);
		kstr = POI_GetCellContentString(kcell,evaluator,"#").trim();

		for(int ji=LAB_ID_COLUMN; ji<LAB_ID_COLUMN+5; ji++)
		{
			Cell labidcell = checkrow.getCell(ji);
			if(labidcell != null)
			{
				cellstr = POI_GetCellContentString(labidcell,evaluator,"#").trim();
				if(cellstr.equals(glob_selected_jobsample))
				{
					foundlabid = true;
					flabidcol = ji;
					flabidrow = labi;
					break;
				}
			}
		}

		if(foundlabid) break;
	}

	// found sample-id
	if(foundlabid)
	{
		HashMap tmap = glob_formmaker.thehashmap;
		//alert("flabidcol: " + flabidcol + ", flabidrow: " + flabidrow);
		// start searching from where we found the sample-id
		for(int li=flabidrow; li<numrows; li++)
		{
			org.apache.poi.hssf.usermodel.HSSFRow tst_row = sheet.getRow(li);
			Cell tst_cell = tst_row.getCell(LAB_TEST_COLUMN);
			if(tst_cell != null)
			{
				tstr = POI_GetCellContentString(tst_cell,evaluator,"#").trim();
				//foundstring += "t:" + tstr + ",";

				if(tmap.get(tstr) != null) // find test
				{
					Cell res_cell = tst_row.getCell(flabidcol);
					if(res_cell != null)
					{
						fkey = tmap.get(tstr); // get the component id ..

						rstr = POI_GetCellContentString(res_cell,evaluator,"#").trim();
						//foundstring += "key: " + fkey + " = " + tstr + "->" + rstr + " , ";
						kebox = thebigform.getFellowIfAny(fkey);
						if(kebox != null) kebox.setValue(rstr);
					}
				}
			}
		}

		if(debugflag) alert(foundstring);
	}
}
catch (java.io.IOException e)
{
	guihand.showMessageBox("ERR: Cannot parse worksheet");
}

}

// 0=jobfolder,1=sampleid,2=todaydate,3=username,4=jtporigid,5=mysoftcode,6=testname,7=method,8=results-ntext,9=formkeeper-id
void saveImportResults()
{
	if(glob_formmaker == null) return;

	String[] resultarray = new String[10];
	todaydate = kiboo.getDateFromDatebox(hiddendatebox);
	iresults = glob_formmaker.freezeFormValues();

	resultarray[0] = glob_selected_folderno;
	resultarray[1] = glob_selected_jobsample;
	resultarray[2] = todaydate;
	resultarray[3] = useraccessobj.username;
	resultarray[4] = glob_selected_jtp;
	resultarray[5] = glob_selected_mysoft;
	resultarray[6] = glob_selected_testname;
	resultarray[7] = glob_selected_method;
	resultarray[8] = iresults;
	resultarray[9] = glob_selected_formkeeper;
/*	
	alert(glob_selected_folderno + ":" + glob_selected_jobsample + ":" + todaydate + ":" + useraccessobj.username + ":" +
	glob_selected_jtp + ":" + glob_selected_mysoft + ":" + glob_selected_testname + ":" +
	glob_selected_method + ":" + iresults + ":" + glob_selected_formkeeper);
*/
	if(sqlhand.insertChemistryResult_Form(resultarray))
		saved_msg.setValue("RESULTS SAVED..");
	else
		saved_msg.setValue("ERR: CANNOT SAVE RESULTS!");
}

]]>
</zscript>

<div width="1200px">
<panel id="resultentry3_panel" title="${MYTITLE} ${MYVERSION}" border="normal" collapsible="true" closable="true" >
<panelchildren>
<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" onCreate="self.value = new Date()" />

<hbox>

<vbox>
<grid width="450px">
	<rows>
		<row>
			<label value="Folder number" style="font-size:9px" />
			<textbox id="folderno_tb" style="font-size:9px" />
			<button label="by folder" style="font-size:9px" onClick="loadSampleTests(1)" />
		</row>
		<row>
			<label value="Sample-ID" style="font-size:9px" />
			<textbox id="sampleid_tb" style="font-size:9px" />
			<button label="by sample-id" style="font-size:9px" onClick="loadSampleTests(2)" />
		</row>
	</rows>
</grid>

<div id="foldermeta_area" visible="false">
	<grid width="300px">
		<rows>
			<row>
				<label value="Folder #" />
				<label id="jobfolder_str" />
			</row>
		</rows>
	</grid>
	<div id="jobsamples_holder" width="440px" />

	<grid width="300px">
		<rows>
			<row>
				<label value="Sample ID" />
				<label id="jobsample_id" />
			</row>
		</rows>
	</grid>
	<div id="sampletests_holder" width="440px" />
</div> <!-- foldermeta_area -->

</vbox>

<vbox id="workarea" visible="false" >
<div style="background:#1480a3;padding:2px">
<hbox>
	<button label="Save results" style="font-size:9px" onClick="saveImportResults()" />
	<button label="Upload results worksheet" style="font-size:9px" onClick="doUploadWorksheet()" />
</hbox>
<separator height="2px" />
<hbox>
	<button label="Import organic-results" style="font-size:9px" onClick="spliceOrganicResults_v1()" />
</hbox>
</div>

<grid width="450px">
	<rows>
		<row spans=",3">
			<label value="Uploaded results worksheet" style="font-size:9px" />
			<label id="uploaded_filename" style="font-size:9px" />
		</row>
		<row spans=",2,">
			<label value="Sample ID" />
			<label id="form_sampleid" />
			<div style="background:#cc0000;">
				<label id="saved_msg" style="text-decoration:blink;color:#ffffff;" />
			</div>
		</row>
		<row>
			<label value="Keyin" style="font-size:9px" />
			<label id="keyin_by" style="font-size:9px" />
			<label value="Keyin.Date" style="font-size:9px" />
			<label id="keyin_date" style="font-size:9px" />
		</row>
	</rows>
</grid>

<div id="form_holder" />

</vbox> <!-- workarea -->

</hbox>

<zscript>
<![CDATA[

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>

