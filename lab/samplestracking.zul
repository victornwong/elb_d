<?xml version="1.0" encoding="UTF-8"?>
<?page id="samplestracking_fun"?>
<zk>
<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript src="../alsglobal/alsglobalfuncs.zs" />
<zscript src="../alsglobal/alsglobal_guifuncs.zs" />
<zscript src="../alsglobal/alsglobal_sqlfuncs.zs" />
<zscript src="../alsglobal/securityfuncs.zs" />
<zscript src="../alsglobal/samplereg_funcs.zs" />
<zscript src="../alsglobal/doculink_funcs.zs" />
<zscript src="../alsglobal/divisiongroup_funcs.zs" />
<zscript>
<![CDATA[
/*
Title		: Samples Tracking
Developer	: Victor Wong
Date start	: 2/11/2010
Version		: 1.1

*NOTES*
05/08/2011: mod to load samples-id by startdate and enddate - previous used cutoff date .. too many recs.

*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.util.Date;
import java.util.TimeZone;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;

LISTBOX_SAMPLES_LIMIT = 200;

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

glob_mysoftcode = "";

global_selected_runorigid = "";
global_selected_runstatus = "";
global_runlist_notes_origid = "";

ALS_stock_cat = "";
ALS_groupcode = "";

documentLinkObj documentLinkProp = new documentLinkObj();

/*
// check usergroup access - no access, just close the panel.. min. level 1 can browser through the folder/job list
boolean can_access = check_UsergroupAccess(useraccessobj.origid,SAMPREG_USERGROUP,1);

if(!can_access)
{
	showAccessDenied_Box(useraccessobj);
	globalClosePanel(myincludeid);
}
*/

void playAssignSampleWindow(String irunorigid,String imysoftc, String irunstat)
{
	theparam = "runno=" + irunorigid + "&mysoftcode=" + imysoftc + "&runstat=" + irunstat;
	uniqwindowid = makeRandomId("xrlasx");
	globalActivateWindow("miscwindows","lab/runlistassign_samples.zul", uniqwindowid, theparam, useraccessobj);
}

String showDateInGroupLabel(String prestr, int numdays)
{
	datess = getDateString(todayDate,sdf,numdays);
	return prestr + " : " + datess;
}

// onSelect event for makeALSTestParametersListbox()
class ALSTestParametersLB_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = event.getReference();
		glob_mysoftcode = getListcellItemLabel(selitem,0); // keep a global
		//loadSamplesByTest_Clicker(1);
	}
}

Object[] testparameters_lb_headers = {
	new listboxHeaderObj("mysoftcode",false),
	new listboxHeaderObj("No.Samples",true),
	new listboxHeaderObj("Test",true),
	new listboxHeaderObj("Method",true),
};

// Populate division column - refer to mysoft.stockmasterdetails.stock_cat
// nominal_code=glcode=5xxxxx = services we sell
// istock_cat = as in stockmasterdetails.stock_cat
void populateTestParametersColumn(Div iwhichdiv, String istock_cat, String igroupcode)
{
	if(istock_cat.equals("") || igroupcode.equals("")) return;

sqlstatem = "select count(jobtestparameters.mysoftcode) as TestCounts, " +
"jobtestparameters.uploadToLIMS, " +
"stockmasterdetails.id, stockmasterdetails.description, stockmasterdetails.description2, " +
"stockmasterdetails.stock_cat, stockmasterdetails.groupcode " +
"from jobtestparameters " +
"left join stockmasterdetails " +
"on jobtestparameters.mysoftcode = stockmasterdetails.id " +
"where stockmasterdetails.stock_cat='" + istock_cat + "' " +
"and stockmasterdetails.groupcode='" + igroupcode + "' " +
"and jobtestparameters.uploadToLIMS=0 " +
"group by jobtestparameters.mysoftcode, jobtestparameters.uploadToLIMS, " +
"stockmasterdetails.id, stockmasterdetails.description, stockmasterdetails.description2, " +
"stockmasterdetails.stock_cat, stockmasterdetails.groupcode " +
"order by stockmasterdetails.description";

	sql = als_mysoftsql();
	if(sql == null ) return;
	tlist = sql.rows(sqlstatem);
	sql.close();

	if(tlist.size() == 0) return;

	Listbox newlb = makeVWListbox(iwhichdiv, testparameters_lb_headers, "tests_description_lb", 14);
	newlb.addEventListener("onSelect", new ALSTestParametersLB_Listener());

	teststotal = 0;

	for(ilist : tlist)
	{
		// strarray[0] = convertCodeToLongName(als_divisions,ilist.get("stock_cat"));
		ArrayList kabom = new ArrayList();
		testcc = ilist.get("TestCounts");
		kabom.add(ilist.get("id").toString());
		kabom.add(testcc.toString());
		kabom.add(ilist.get("description"));
		kabom.add(ilist.get("description2"));
		teststotal += testcc;
		strarray = convertArrayListToStringArray(kabom);
		insertListItems(newlb,strarray,"true");
	}
	// 6/7/2010: put in total samples of all tests found.. statistic thing
	mothertotal_lbl.setValue("Total samples: " + teststotal.toString());

} // end of populateTestParametersColumn()

// onSelect event for makeALSSectionListbox()
class ALSSectionLB_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		iwhat = section_groupcode_lb.getSelectedItem().getLabel();
		ALS_groupcode = iwhat;
		populateTestParametersColumn(testparameters_column,ALS_stock_cat,ALS_groupcode);
	}
}

// Populate division column - refer to mysoft.stockmasterdetails.stock_cat
// nominal_code=glcode=5xxxxx = services we sell
// istock_cat = as in stockmasterdetails.stock_cat
void populateSectionColumn(Div iwhichdiv, String istock_cat)
{
	Object[] alssectiondb_lb_headers = {
	new dblb_HeaderObj("",true,"groupcode",1),
	};

	sql = als_mysoftsql();
	if(sql == null ) return;

	sqlstm = "select distinct groupcode from stockmasterdetails where item_type='Service Item' and nominal_code like '5%' " + 
		"and stock_cat='" + istock_cat + "' order by groupcode" ;

	Listbox newlb = makeVWListbox_onDB(iwhichdiv,alssectiondb_lb_headers,"section_groupcode_lb",18,sql,sqlstm);
	sql.close();
	newlb.addEventListener("onSelect", new ALSSectionLB_Listener());

	// save istock_cat , to be used later in ALSSectionLB_Listener
	ALS_stock_cat = istock_cat;

} // end of populateSectionColumn()

// onSelect event for makeALSDivisionListbox()
class ALSDivisionLB_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		iwhat = division_stockcat_lb.getSelectedItem().getLabel();
		// populate section column
		iwhatcode = convertLongNameToCode(als_divisions, iwhat);
		// alert("selected: " +  iwhat + " and code: " + iwhatcode);
		populateSectionColumn(section_column,iwhatcode);
		// if there's previously a test parameters listbox, remove before adding a new one.
		Listbox oldlb = testparameters_column.getFellowIfAny("tests_description_lb");
		if(oldlb != null) oldlb.setParent(null);

		//Listbox newlb = makeVWListbox(testparameters_column, testparameters_lb_headers, "tests_description_lb", 20);
		if(testparameters_column.getFellowIfAny("tests_description_lb") != null) tests_description_lb.setParent(null);
	}
}

// Populate division column - refer to mysoft.stockmasterdetails.stock_cat
// nominal_code=glcode=5xxxxx = services we sell
void populateDivisionColumn(Div iwhichdiv)
{
Object[] alsdivision_lb_headers = {
	new listboxHeaderObj("",true)
};

	sql = als_mysoftsql();
	if(sql == null ) return;
	sqlstatem = "select distinct stock_cat from stockmasterdetails where item_type='Service Item' and nominal_code like '5%' order by stock_cat" ;
	tlist = sql.rows(sqlstatem);
	sql.close();
	if(tlist.size() == 0) return;
	Listbox newlb = makeVWListbox(iwhichdiv, alsdivision_lb_headers, "division_stockcat_lb", 18);
	newlb.addEventListener("onSelect", new ALSDivisionLB_Listener());
	String[] strarray = new String[1];
	for(ilist : tlist)
	{
		strarray[0] = convertCodeToLongName(als_divisions,ilist.get("stock_cat"));
		insertListItems(newlb,strarray,"true");
	}

} // end of populateDivisionColumn()

// used in populateTestParam_SampleId() and kasiexport();
Object[] sampleid_lb_headers = {
	new listboxHeaderObj("origid",false),
	new listboxHeaderObj("Folder",true),
	new listboxHeaderObj("Sp.ID",true),
	new listboxHeaderObj("Company",true),
	new	listboxHeaderObj("Recv.Date",true),
	new listboxHeaderObj("Due.Date",true),
	new listboxHeaderObj("COA.Date",true),
};

// populate listbox according to mysoftcode (test param) and sample-id
// this listbox is for dudes to drag-drop samples into runlist
// loadtuype : 1=normal by branch or watever, 2=by cutoff date
// 05/08/2011: mod to load by startdate and enddate instead of cutoff
void populateTestParam_SampleId(String imysoftc, String ibranch, int loadtype)
{
	sdate = getDateFromDatebox(startdate);
    edate = getDateFromDatebox(enddate);

	sql = als_mysoftsql();
	if(sql == NULL) return;

	// now show all sample-ids which have this test-parameter and not already in a run-list
	branch_str = "";

	if(!ibranch.equals("ALL")) branch_str = " and JobFolders.branch='" + ibranch + "' ";

	sqlst2 = "select top 201 JobTestParameters.jobsamples_id, JobSamples.origid,  JobSamples.sampleid_str, JobSamples.samplemarking, JobSamples.uploadToLIMS, " + 
	"JobTestParameters.uploadToLIMS as jtp_uploadToLIMS, JobTestParameters.origid as jtp_origid, jobsamples.deleted, jobsamples.jobfolders_id, " +
	"JobFolders.origid as jf_origid, JobFolders.datecreated, JobFolders.duedate, JobFolders.branch, JobFolders.ar_code, JobFolders.folderno_str, " +
	"JobFolders.coadate " +
	"from JobTestParameters " + 
	"left join JobSamples on JobTestParameters.jobsamples_id=JobSamples.origid " +
	"left join JobFolders on JobSamples.jobfolders_id=JobFolders.origid " +
	//"where JobTestParameters.uploadToLIMS=0 and jobsamples.deleted=0 and " +
	"where JobTestParameters.mysoftcode=" + imysoftc + //" and JobTestParameters.mysoftcode != 0 " +
	"and jobsamples.deleted=0 " +
	branch_str;
	
	if(loadtype == 2)
		sqlst2 = "select top 201 JobTestParameters.jobsamples_id, JobSamples.origid,  JobSamples.sampleid_str, JobSamples.samplemarking, JobSamples.uploadToLIMS, " + 
		"JobTestParameters.uploadToLIMS as jtp_uploadToLIMS, JobTestParameters.origid as jtp_origid, jobsamples.deleted, jobsamples.jobfolders_id, " +
		"JobFolders.origid as jf_origid, JobFolders.datecreated, JobFolders.duedate, JobFolders.branch, JobFolders.ar_code, JobFolders.folderno_str, " +
		"JobFolders.coadate " +
		"from JobTestParameters " + 
		"left join JobSamples on JobTestParameters.jobsamples_id=JobSamples.origid " +
		"left join JobFolders on JobSamples.jobfolders_id=JobFolders.origid " +
		"where JobTestParameters.mysoftcode=" + imysoftc + //" and JobTestParameters.mysoftcode != 0 " +
		" and jobsamples.deleted=0 " +
		"and jobfolders.datecreated between '" + sdate + "' and '" + edate + "' " +
		branch_str;

	samples_recs = sql.rows(sqlst2);
	sql.close();

	Listbox newlb = makeVWListbox(sampleid_div, sampleid_lb_headers, "sampleid_lb", 10);

	if(samples_recs.size() == 0) return;

	// show rows limit of listbox.. otherwise the browser will crash
	if(samples_recs.size() > LISTBOX_SAMPLES_LIMIT)
		showMessageBox("List limit reached: will show first " + LISTBOX_SAMPLES_LIMIT + " samples only");

	newlb.setRows(30);
	newlb.setMultiple(true);
	samplimitcount = 0;

	for(isamp : samples_recs)
	{
		ArrayList kabom = new ArrayList();

		folderstr = isamp.get("folderno_str");
		kabom.add(isamp.get("jtp_origid").toString());

		foldn = isamp.get("sampleid_str").substring(0,9);
		kabom.add(foldn);

		samplid = padZeros5(isamp.get("jobsamples_id"));
		kabom.add(samplid);

		iar_code = isamp.get("ar_code");
		iar_code = iar_code.toUpperCase().trim();
		icompanyname = "Undefined";

		if(!iar_code.equals(""))
		{
			icompanyname = getCompanyName(iar_code);
			// 11/6/2010: hardcode ar_code CASH and CASH USD in mysoft. Load customer info from table CashSales_CustomerInfo
			if(iar_code.equals("CASH") || iar_code.equals("CASH USD"))
			{
				csrec = getCashSalesCustomerInfo_Rec(folderstr); // get rec based on folder no
				icompanyname = "CshAct: Undefined";
				if(csrec != null) icompanyname = "CshAct: " + csrec.get("customer_name");
			}
		}

		icompanyname = trimListitemLabel(icompanyname,35);
		kabom.add(icompanyname);

		kabom.add(isamp.get("datecreated").toString().substring(0,10));
		kabom.add(isamp.get("duedate").toString().substring(0,10));

		coadate = isamp.get("coadate").toString().substring(0,10);
		coadate_str = (coadate.equals("1900-01-01")) ? "----------" : coadate;
		kabom.add(coadate_str);

		uploadtolims = isamp.get("jtp_uploadToLIMS");

		if(uploadtolims == 0)
		{
			strarray = convertArrayListToStringArray(kabom);
			insertListItems_DragDrop(newlb, strarray,"runsampleid", 2);
		}

		samplimitcount++;
		if(samplimitcount > LISTBOX_SAMPLES_LIMIT) break;
	}
}

// onClick func - can be used by others to refresh the Test-parameter->sample-ids listbox
// loadtype: 1=normal by branch, max 200 recs . 2=by cutoff date
void loadSamplesByTest_Clicker(int loadtype)
{
	if(!check_ListboxExist_SelectItem(testparameters_column,"tests_description_lb")) return;

	selitem = tests_description_lb.getSelectedItem();
	mysoftcode = getListcellItemLabel(selitem,0);
	testdescription = getListcellItemLabel(selitem,2);
	testmethod = getListcellItemLabel(selitem,3);
	branchname = branch_drd.getSelectedItem().getLabel();

	//testnamebranch_str = "Branch: " + branchname + "\nTest: " + testdescription + "\nMthd: " + testmethod;

	branch_lbl.setValue(branchname);
	testparameter_lbl.setValue(testdescription);
	testmethod_lbl.setValue(testmethod);

	//cutoffd = getDateFromDatebox(cutoffdate);

	// load samples based on mysoftcode now..
	populateTestParam_SampleId(mysoftcode,branchname,loadtype);
}

// View folder details by extracting folder-num from sampleid_lb
void viewSampleDetails()
{
	if(!check_ListboxExist_SelectItem(sampleid_div,"sampleid_lb")) return;
	lbitm = sampleid_lb.getSelectedItem();
	//folderno = extractFolderNo(getListcellItemLabel(lbitm, 1));
	folderno = getListcellItemLabel(lbitm, 1);
	theparam = "folderno=" + folderno;
	uniqwindowid = makeRandomId("vf");
	globalActivateWindow("miscwindows","samplereg/folderjobs_driller.zul", uniqwindowid, theparam, useraccessobj);
}

void showDocumentsList(String selected_folderno)
{
	Object[] documentLinks_lb_headers = {
	new dblb_HeaderObj("origid",false,"origid",2),
	new dblb_HeaderObj("Title",true,"file_title",1),
	new dblb_HeaderObj("D.Created",true,"datecreated",3),
	new dblb_HeaderObj("Owner",true,"username",1),
	};

	duclink = "DOCS" + selected_folderno;

	ds_sql = als_DocumentStorage();
	if(ds_sql == null) return;
	sqlstm = "select origid,file_title,datecreated,username from DocumentTable " +
	"where docu_link='" + duclink + "' and deleted=0";

	if(useraccessobj.accesslevel == 9) // admin can send everything..
	{
		sqlstm = "select origid,file_title,datecreated,username from DocumentTable " +
		"where docu_link='" + duclink + "' ";
	}

	Listbox newlb = makeVWListbox_onDB(doculist_holder,documentLinks_lb_headers,"doculinks_lb",6,ds_sql,sqlstm);
	newlb.setMultiple(true);
	//newlb.addEventListener("onSelect", new doculinks_lb_Listener());
	ds_sql.close();
}

void viewDocument()
{
	if(!check_ListboxExist_SelectItem(doculist_holder,"doculinks_lb")) return;
	eorigid = doculinks_lb.getSelectedItem().getLabel();
	theparam = "docid=" + eorigid;
	uniqid = makeRandomId("vd");
	globalActivateWindow("miscwindows","qc/viewlinkingdocument.zul", uniqid, theparam, useraccessobj);
}

void doViewDoculinkPopup()
{
	if(!check_ListboxExist_SelectItem(sampleid_div,"sampleid_lb")) return;
	selitem = sampleid_lb.getSelectedItem();
	foldern = getListcellItemLabel(selitem,1);
	documentLinkProp.global_eq_origid = foldern;
	documentLinkProp.refreshListbox.populateDocumentLinks(documentLinkProp.global_eq_origid, documentLinkProp.document_idprefix);

	// show CRUD buttons for admin
	if(useraccessobj.accesslevel == 9)
	{
		documentLinkProp.refreshListbox.showCrudButtons();
		documentLinkProp.refreshListbox.showAdminButtons();
	}
	doculink_popup.open(viewdoculinks_btn);
}

// Populate tree with sampleID -> tests
void populateSamplesTestParameters(Tree itree, String ifolderno)
{
	sql = als_mysoftsql();
	if(sql == null) return;

	// get all sample IDs for folderno
	// 4/3/2010: sql statement for admin login - can see even deleted samples

	sqlstatem = "select origid,deleted,sampleid_str,samplemarking from " + JOBSAMPLES_TABLE + " where jobfolders_id=" + ifolderno + " and deleted=0 order by sampleid_str asc";

	if(useraccessobj.accesslevel > 8)
		sqlstatem = "select origid,deleted,sampleid_str,samplemarking from " + JOBSAMPLES_TABLE + " where jobfolders_id=" + ifolderno + " order by sampleid_str asc";

	allsampleids = sql.rows(sqlstatem);

	Treechildren tocheck = itree.getTreechildren();
	if(tocheck != null)	tocheck.setParent(null);

	if(allsampleids != null && allsampleids.size() != 0)
	{
		// create a new treechildren for the tree
		Treechildren mychildren = new Treechildren();
		mychildren.setParent(itree);

		String[] strarray = new String[2];

		// loop through each sample IDs and get tests
		for(eachsampleid : allsampleids)
		{
			sdelstr = (eachsampleid.get("deleted") == 1) ? " [del]" : "";

			sampleidstr = eachsampleid.get("sampleid_str") + sdelstr;
			//sampleidstr = padZeros5(eachsampleid.get("origid"));
			sampleidno = eachsampleid.get("origid");
			sampleidnostr = sampleidno.toString();
			samplemark = eachsampleid.get("samplemarking");

			// if sample id str in table ain't set.. set it. old codes didn't update the sample id str properly
			if(sampleidstr.equals(""))
			{
				sampleidstr = param_folderno + padZeros5(sampleidno); // param_folderno is global, def at top

				// 27/2/2010: update sampleid_str field incase of old codes never do it
				sqls3 = "update " + JOBSAMPLES_TABLE + " set sampleid_str='" + sampleidstr + "' where origid=" + sampleidnostr;
				sql.execute(sqls3);
			}

			Treeitem titem = insertTreeLeaf(mychildren, sampleidstr, "font-weight:bold; background:#AACC66; color:#333333");

			// get tests assigned for the sample-id

			sqlstatem2 = "select mysoftcode from " + JOBTESTPARAMETERS_TABLE + " where jobsamples_id=" + sampleidnostr;
			teststosampleid = sql.rows(sqlstatem2);

			if(teststosampleid != null)
			{
				Treechildren newone = new Treechildren();
				newone.setParent(titem);

				// insert sample marking as leaf if available
				if(!samplemark.equals(""))
					insertTreeLeaf(newone, "SM: " + samplemark, "font-size:9px; background:#4466bb; color:#ffffff");

				// loop through all the tests assigned and put them as leafs
				for(eacht2s : teststosampleid)
				{
					mysoftcode = eacht2s.get("mysoftcode").toString();

					stockrec = getStockMasterDetails(mysoftcode);
					testdesc = "-Undefined-";

					if(stockrec != null)
						//testdesc = stockrec.get("Description") + " (" + stockrec.get("Description2") + ")" ;
						testdesc = stockrec.get("Description");

					testdesc = trimListitemLabel(testdesc,45);

					// insertTreeLeaf(newone,testdesc,"font-size:9px");
					strarray[0] = testdesc;

					// get result from Chemistry_Results
					resrec = getLatestResult(sampleidstr, mysoftcode);
					finalresult = "WIP";

					restyle = "font-size:9px";

					if(resrec != null)
					{
						finalres = resrec.get("Final");
						if(finalrec != null)
						{
							if(!resrec.get("Final").equals(""))
							{
								resunit = resrec.get("Result_Unit");
								resunit = (resunit == null) ? "" : resunit;
								finalresult = resrec.get("Final") + " " + resunit;
							}
							//finalresult = "RES";
						}
					}

					strarray[1] = finalresult;
					insertTreeLeaf_Multi(newone, strarray, restyle);
				}
			}
		}
	}
	sql.close();

} // end of populateSamplesTestParameters()

void showPokokAndSoOn()
{
	if(!check_ListboxExist_SelectItem(sampleid_div,"sampleid_lb")) return;
	lbitm = sampleid_lb.getSelectedItem();
	folderno_str = getListcellItemLabel(lbitm,1);
	customern = getListcellItemLabel(lbitm,3);
	folderno = convertFolderNoToInteger(folderno_str).toString();
	folderbreakdown.setLabel(folderno_str + " : " + customern);
	populateSamplesTestParameters(sampletests_tree,folderno);
	showDocumentsList(folderno_str);
}

void exportTheList()
{
	exportListboxExcel_HideColumn(sampleid_div,"sampleid_lb","sampleTracker.xls",sampleid_lb_headers,"Sheet1",export_holder,70, true);
}

]]>
</zscript>

<!-- documents management popup -->
<popup id="doculink_popup">
<div width="400px">
<include id="linkingdoc_include" src="alsglobal/doculink.zul"/>
<separator height="5px" />
<hbox>
	<button label="Close" onClick="doculink_popup.close()" style="font-size:9px" />
</hbox>
</div>
</popup>
<!-- end of documents management popup -->

<div width="1200px">
<panel id="samplestracking_panel" title="Samples Tracker v1.1" border="normal" collapsible="true" closable="true">
<panelchildren>
<div style="padding:2px">
<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" />
<button label="X Close panel" style="font-size:9px" onClick="runs_list_panel.setParent(null)" />
<separator height="3px" />

<hbox>
<groupbox mold="3d" width="150px">
	<caption label="Division" />
	<div id="division_column" />
</groupbox>

<groupbox mold="3d" width="150px">
	<caption label="Section" />
	<div id="section_column" />
</groupbox>

<groupbox mold="3d">
	<caption label="Test Parameters" />
	<div id="testparameters_column" />
	<separator height="5px" />
	<hbox>
		<label id="mothertotal_lbl" style="background:#667788;color:#ffffff" />
		<separator width="20px" />
		<label value="Branch" style="font-size:9px" />
		<listbox id="branch_drd" mold="select" style="font-size:9px" />
		<button id="loadsampleids_btn" label="Load samples" style="font-size:9px" onClick="loadSamplesByTest_Clicker(1)" />

		<label value="Start date" style="font-size:9px" />
		<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" />
		<label value="End date" style="font-size:9px" />
		<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" />
		<button id="loadbycutoffdate_btn" label="Load samples by date" style="font-size:9px" onClick="loadSamplesByTest_Clicker(2)" />
	</hbox>
</groupbox>
</hbox>
<separator height="3px" />
<hbox>
<groupbox mold="3d" width="650px">
	<caption label="Samples" />
	<div style="padding:2px" >
		<grid>
			<columns>
				<column label="" />
				<column label="" />
			</columns>
			<rows>
			<row>
				<label value="Branch" style="font-size:9px" />
				<label id="branch_lbl" style="font-size:9px" />
			</row>
			<row>
				<label value="Test" style="font-size:9px" />
				<label id="testparameter_lbl" style="font-size:9px" />
			</row>
			<row>
				<label value="Method" style="font-size:9px" />
				<label id="testmethod_lbl" style="font-size:9px" />
			</row>
			</rows>
		</grid>
	</div>
	<separator height="3px" />
	<button id="viewfolder_butt" label="Folder details" style="font-size:9px" onClick="viewSampleDetails()" />
	<button label="Load parent folder" style="font-size:9px" onClick="showPokokAndSoOn()" />
	<button label="Kasi export" style="font-size:9px" onClick="exportTheList()" />
	<separator height="3px" />
	<div id="sampleid_div" />
</groupbox>

<vbox>
<groupbox mold="3d">
<caption id="folderbreakdown" label="..." />
<tree id="sampletests_tree" zclass="z-dottree" rows="16" width="100%" >
	<treecols>
		<treecol label="SampleID/Sample Marking/Tests" />
	</treecols>
</tree>
</groupbox>

<groupbox mold="3d">
<caption label="Documents" />
<div id="doculist_holder" />
<separator height="3px" />
<button label="View document" style="font-size:9px" onClick="viewDocument()" />
<button id="viewdoculinks_btn" label="COC/PO/Documents" onClick="doViewDoculinkPopup()" style="font-size:9px" />
</groupbox>

</vbox>
</hbox>

<div id="export_holder" />

</div>
</panelchildren>
</panel>
</div>

<zscript>
setTodayDatebox(hiddendatebox);
setTodayDatebox(startdate);
setTodayDatebox(enddate);

populateDivisionColumn(division_column);
populateDropdownListbox(branch_drd, dd_branches);
//populateDropdownListbox(rl_runstatus,runliststatus_lookup);

documentLinkProp.document_idprefix = "DOCS";
setDocumentLink_DynamicProperty(linkingdoc_include, documentLinkProp, useraccessobj);

// admin login, do something..
if(useraccessobj.accesslevel == 9)
{
}

</zscript>
</zk>
