<?xml version="1.0" encoding="UTF-8"?>
<?page id="subconrequest_mod"?>
<zk>
<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript>
<![CDATA[
MYVERSION = "v0.6";
/*
Title		: Subcon request form manager
Written by	: Victor Wong

Revisions:

29/02/2012: started
05/03/2012: lookup parent 112 = general, 132=subcons-tests
19/03/2012: subcon-tests lookup fields used: val1=price, val2=method, val3=units, val4=LOR, val5=TAT, val6=currency
15/05/2012: added subcon checklist BIRT template

*/

import java.util.*;
import java.text.*;
import java.lang.Float;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.zk.zutl.*;
import org.victor.*;
sechand = new SecurityFuncs();

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

sqlhand = new SqlFuncs();
kiboo = new Generals();
lbhand = new ListboxHandler();
guihand = new GuiFuncs();
gridhand = new GridHandler();
luhand = new LookupFuncs();

// global vars

SCREQ_DRAFT = "DRAFT";
SCREQ_COMMIT = "COMMITTED";
SCREQ_DONE = "COMPLETED";

FOLDERPICK_COLOR = "background:#AAAAAA";
OVERDUE_ROWCOLOR = "background:#F74623";
RELEASED_ROWCOLOR = "background:#AEF520";

Object prevSelectedFolder = null;
String prevSelectedFolder_style = "";

last_subcon_search = 0;

global_selected_subcon = ""; // origid
global_selected_subcon_status = "";

Object global_input_grid = null;

// DB Func: get rec from elb_subcons by origid
Object getSubcon_Rec(String iorigid)
{
	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return null;
	sqlstm = "select * from elb_subcons where origid=" + iorigid;
	retv = sql.firstRow(sqlstm);
	sql.close();
	return retv;
}

void disableThings(boolean iwhat)
{
	upreq_butt.setDisabled(iwhat);
	//upres_butt.setDisabled(iwhat);
	newri_butt.setDisabled(iwhat);
	delri_butt.setDisabled(iwhat);
	saveri_butt.setDisabled(iwhat);
	getsampdet_butt.setDisabled(iwhat);
	picktests_butt.setDisabled(iwhat);
}

void showSubconReq_Metadata(String iorigid)
{
	screc = getSubcon_Rec(iorigid);
	if(screc == null)
	{
		showMessageBox("ERROR!! Cannot get subcon request record");
		return;
	}

	subcon_origid.setValue(screc.get("origid").toString());

	lbhand.matchListboxItems(subcon_name, kiboo.checkNullString(screc.get("subcon_name")));
	lbhand.matchListboxItems(subcon_alscontact, kiboo.checkNullString(screc.get("als_contact")));

	subcon_duedate.setValue(screc.get("duedate"));
	subcon_shipdate.setValue(screc.get("shipdate"));

	if(screc.get("resultdate") != null) subcon_resultdate.setValue(screc.get("resultdate"));

	//subcon_resultdate.setValue(screc.get("resultdate"));
	subcon_extranotes.setValue(kiboo.checkNullString(screc.get("extranotes")));

	lbhand.matchListboxItems(subcon_courier,kiboo.checkNullString(screc.get("courier_company")));
	subcon_airwaybill.setValue(kiboo.checkNullString(screc.get("airwaybill")));
	subcon_letterofintent.setValue(kiboo.checkNullString(screc.get("letterofintent")));

	lbhand.matchListboxItems(subcon_als_division,kiboo.checkNullString(screc.get("als_division")));

	// all print-buttons enable
	prnsubconform_butt.setDisabled(false);
	prncomminv_butt.setDisabled(false);
	prnletter_butt.setDisabled(false);

	// disable all print-buttons if subcon req is not committed or done
	if(global_selected_subcon_status.equals(SCREQ_DRAFT))
	{
		if(useraccessobj.accesslevel != 9) // admin can do printing!!
		{
			prnsubconform_butt.setDisabled(true);
			prncomminv_butt.setDisabled(true);
			prnletter_butt.setDisabled(true);
		}
	}

	// if subcon-req is committed, can activate the update results-date - to capture DONE date
	upres_butt.setDisabled(true);
	//subcon_resultdate.setDisabled(true);
	if(global_selected_subcon_status.equals(SCREQ_COMMIT))
	{
		upres_butt.setDisabled(false);
		//subcon_resultdate.setDisabled(false);
	}
}

// onSelect event for loadSubcons_List()
class subconlb_onSelect implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = subcons_lb.getSelectedItem();
		global_selected_subcon = lbhand.getListcellItemLabel(isel,0);
		global_selected_subcon_status = lbhand.getListcellItemLabel(isel,2);

		showSubconReq_Metadata(global_selected_subcon);
		showReq_Items(global_selected_subcon);

		disableThings((global_selected_subcon_status.equals(SCREQ_DRAFT)) ? false : true);
		workarea.setVisible(true);
	}
}

Object[] subconlb_headers = 
{
	new listboxHeaderObj("Req",true),
	new listboxHeaderObj("Dated",true),
	new listboxHeaderObj("Stat",true),
	new listboxHeaderObj("Subcon",true),
	new listboxHeaderObj("Due",true),
	new listboxHeaderObj("Res",true),
	new listboxHeaderObj("User",true),
	new listboxHeaderObj("Folders",true),
};

void loadSubcons_List(int itype)
{
	last_subcon_search = itype;

	// reset vars
	global_selected_subcon = "";
	prevSelectedFolder = null;

	workarea.setVisible(false); // hide work-area

	sdate = kiboo.getDateFromDatebox(startdate);
    edate = kiboo.getDateFromDatebox(enddate);
	searchtext = kiboo.replaceSingleQuotes(subcon_tb.getValue());

	Listbox newlb = lbhand.makeVWListbox(subconlist_holder, subconlb_headers, "subcons_lb", 15);

	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;

	sqlstm = "select top 100 origid,datecreated,shipdate,duedate,resultdate,username,subcon_name,folders_inside,reqstatus from elb_subcons " +
	"where datecreated between '" + sdate + "' and '" + edate + "' ";

	if(!searchtext.equals(""))
	{
		sqlstm += "and (subcon_name like '%" + searchtext + "%' or als_contact like '%" + searchtext + "%' " + 
		"or folders_inside like '%" + searchtext + "%' or letterofintent like '%" + searchtext + "%' " + 
		"or airwaybill like '%" + searchtext + "%' or extranotes like '%" + searchtext + "') ";
	}

	sqlstm += "order by datecreated";

	screcs = sql.rows(sqlstm);
	sql.close();
	if(screcs.size() == 0) return;

	newlb.addEventListener("onSelect", new subconlb_onSelect());
	
	for(dpi : screcs)
	{
		ArrayList kabom = new ArrayList();

		kabom.add(dpi.get("origid").toString());
		kabom.add(dpi.get("datecreated").toString().substring(0,10));
		kabom.add(dpi.get("reqstatus"));

		kabom.add(dpi.get("subcon_name"));
		kabom.add((dpi.get("duedate") == null) ? "---" : dpi.get("duedate").toString().substring(0,10));
		kabom.add((dpi.get("resultdate") == null) ? "---" : dpi.get("resultdate").toString().substring(0,10));

		kabom.add(dpi.get("username"));
		kabom.add(dpi.get("folders_inside"));

		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhand.insertListItems(newlb,strarray,"false","");
	}
}

// insert new subcon req
void newSubconRequest()
{
	todate = kiboo.getDateFromDatebox(hiddendatebox);

	sqlstm = "insert into elb_subcons (datecreated,reqstatus,shipdate,duedate,username,subcon_name," +
	"als_contact,extranotes,folders_inside) values ('" + todate + "','" + SCREQ_DRAFT + "','" + todate + "','" +
	todate + "','" + useraccessobj.username + "','','','','')";

	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	sql.execute(sqlstm);
	sql.close();

	loadSubcons_List(1); // refresh
}

void updateSubconReq()
{
	if(global_selected_subcon.equals("")) return;

	scn = subcon_name.getSelectedItem().getLabel();
	scac = subcon_alscontact.getSelectedItem().getLabel();
	scduedate = kiboo.getDateFromDatebox(subcon_duedate);
	scshipdate = kiboo.getDateFromDatebox(subcon_shipdate);
	//subcon_resultdate.setValue(screc.get("resultdate"));
	scen = kiboo.replaceSingleQuotes(subcon_extranotes.getValue());
	sccourier = subcon_courier.getSelectedItem().getLabel();
	scairway = kiboo.replaceSingleQuotes(subcon_airwaybill.getValue());
	scletter = kiboo.replaceSingleQuotes(subcon_letterofintent.getValue());
	
	scdivi = subcon_als_division.getSelectedItem().getLabel();

	sqlstm = "update elb_subcons set subcon_name='" + scn + "', als_contact='" + scac + "', duedate='" + scduedate + "'," +
	"shipdate='" + scshipdate + "', extranotes='" + scen + "', als_division='" + scdivi + "', " + 
	"courier_company='" + sccourier + "',airwaybill='" + scairway +"',letterofintent='" + scletter + "' where origid=" + global_selected_subcon;

	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	sql.execute(sqlstm);
	sql.close();

	loadSubcons_List(1); // refresh
}

String[] reqitemHeader = { "SampleMarking", "Folder", "SampleID", "Test", "Cost" };

void showReq_Items(String iorigid)
{
	if(reqitems_holder.getFellowIfAny("subcon_reqs") != null) subcon_reqs.setParent(null);

	// create the grid and rows
	thegrid = new Grid();
	thegrid.setId("subcon_reqs");

	gridrows = gridhand.gridMakeRows("","",thegrid);
	gridhand.makeGridHeaderColumns(reqitemHeader, thegrid);
	thegrid.setParent(reqitems_holder);
	global_input_grid = gridrows; // later usage

	sqlstm = "select test_request,samplemarking,folderno_str,sampleid,tests_cost from elb_subcon_items where parent_id=" + global_selected_subcon;

	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	frecs = sql.rows(sqlstm);
	sql.close();

	if(frecs.size() == 0) return;

	for(dpi : frecs)
	{
		newrow = gridhand.gridMakeRow("","","",gridrows);
		newrow.addEventListener("onClick", new reqItemOnSelect());

		gridhand.makeTextboxToParent(dpi.get("samplemarking"),"","100%","30px",true,newrow);
		gridhand.makeTextboxToParent(dpi.get("folderno_str"),"","","",false,newrow);
		gridhand.makeTextboxToParent(dpi.get("sampleid"),"","","",false,newrow);
		woli = gridhand.makeTextboxToParent(dpi.get("test_request"),"","100%","30px",true,newrow);
		woli.setDisabled(true);
		//makeLabelMultilineToParent(dpi.get("test_request"),"",newrow);

		tsc = gridhand.makeTextboxToParent(dpi.get("tests_cost").toString(),"","","",false,newrow);
		tsc.setVisible(false);
	}
}

class reqItemOnSelect implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selrow = event.getTarget();

		if(prevSelectedFolder != null)
		{
			if(prevSelectedFolder != selrow)
			{
				if(prevSelectedFolder_style.equals(""))
					prevSelectedFolder.setStyle(null);
				else
					prevSelectedFolder.setStyle(prevSelectedFolder_style);
			}
			else
				return; // selected same as previous, return - don't waste cpu
		}

		prevSelectedFolder_style = (selrow.getStyle() == null) ? "" : selrow.getStyle();
		prevSelectedFolder = selrow;
		selrow.setStyle(FOLDERPICK_COLOR);

		//selid = selrow.getId();
		//selid = selid.substring(2,selid.length());
	}
}

// insert new request item
void newReqItem()
{
	if(global_selected_subcon.equals("")) return;

	newrow = gridhand.gridMakeRow("","","",global_input_grid);
	newrow.addEventListener("onClick", new reqItemOnSelect());

	gridhand.makeTextboxToParent("","","100%","30px",true,newrow);
	gridhand.makeTextboxToParent("","","","",false,newrow);
	gridhand.makeTextboxToParent("","","","",false,newrow);

	woli = gridhand.makeTextboxToParent("","","100%","30px",true,newrow);
	woli.setDisabled(true);

	//makeLabelMultilineToParent("","",newrow);

	stot = gridhand.makeTextboxToParent("","","","",false,newrow);
	stot.setVisible(false);
}

void deleteReqItem()
{
	prevSelectedFolder.setParent(null);
}

// -- these can be customized for other modules -- Pick-Sample Details thing -- remember to popup
void getSampleDetails()
{
	if(global_selected_subcon.equals("")) return;
	if(prevSelectedFolder == null) return;
	sampledetails_popup.open(getsampdet_butt);
}

class sampledet2click implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		isel = sampledetails_lb.getSelectedItem();
		ifoldn = lbhand.getListcellItemLabel(isel,0);
		isampid = lbhand.getListcellItemLabel(isel,1);
		ism = lbhand.getListcellItemLabel(isel,2);

		prevSelectedFolder.getChildren().get(0).setValue(ism);
		prevSelectedFolder.getChildren().get(1).setValue(ifoldn);
		prevSelectedFolder.getChildren().get(2).setValue(isampid);

		sampledetails_popup.close();
	}
}

// show sample-details in sampledetails_popup.sampdets_holder
// itype: 1=by folder, 2=by sampleid
void digSampleDetails(int itype)
{
	Object[] sampledets_lb_headers = {
	new listboxHeaderObj("Folder",true),
	new listboxHeaderObj("SampleID",true),
	new listboxHeaderObj("S.Marking",true),
	};

	byfold = kiboo.replaceSingleQuotes(byfolder_tb.getValue());
	bysamp = kiboo.replaceSingleQuotes(bysampleid_tb.getValue());

	sqlstm = "select top 50 jf.folderno_str, js.origid as sampleid, js.samplemarking from jobfolders jf " +
	"left join jobsamples js on js.jobfolders_id = jf.origid where js.deleted=0 ";

	switch(itype)
	{
		case 1:
			sqlstm += "and jf.folderno_str like '%" + byfold + "%' ";
			break;
		case 2:
			sqlstm += "and js.sampleid_str like '%" + bysamp + "%' ";
			break;
	}

	sqlstm += " order by jf.folderno_str";

	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	frecs = sql.rows(sqlstm);
	sql.close();

	Listbox newlb = lbhand.makeVWListbox(sampdets_holder, sampledets_lb_headers, "sampledetails_lb", 10);

	if(frecs.size() == 0) return;

	for(dpi : frecs)
	{
		ArrayList kabom = new ArrayList();
		kabom.add(dpi.get("folderno_str"));
		kabom.add(dpi.get("sampleid").toString());
		kabom.add(dpi.get("samplemarking"));
		strarray = kiboo.convertArrayListToStringArray(kabom);	
		lbhand.insertListItems(newlb,strarray,"true","");
	}
	
	dc_obj = new sampledet2click();
	lbhand.setDoubleClick_ListItems(newlb, dc_obj);
}
// -- ENDOF these can be customized for other modules -- Pick-Sample Details thing

// Save watever being created to db
void saveReqItems()
{
	if(global_selected_subcon.equals("")) return;
	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;

	// remove previous saved items if exist
	sqlstm = "delete from elb_subcon_items where parent_id=" + global_selected_subcon;
	sql.execute(sqlstm);

	brows = subcon_reqs.getChildren().get(0).getChildren(); // get ROWS
	scac = subcon_name.getSelectedItem().getLabel();

	foldinside = "";
	scval = 0.0;

	for(trow : brows)
	{
		smark = kiboo.replaceSingleQuotes(trow.getChildren().get(0).getValue());
		foldn = kiboo.replaceSingleQuotes(trow.getChildren().get(1).getValue());
		sampid = kiboo.replaceSingleQuotes(trow.getChildren().get(2).getValue());
		itest = kiboo.replaceSingleQuotes(trow.getChildren().get(3).getValue());
		tstcost = trow.getChildren().get(4).getValue();

		// convert to float cannot be empty string
		if(tstcost.equals("")) tstcost = "0.0";

		scval += Float.valueOf(tstcost.trim()).floatValue();

		sqlstm2 = "insert into elb_subcon_items (parent_id,test_request,samplemarking,folderno_str,sampleid,tests_cost,subcon_name) values (" + 
		global_selected_subcon.toString() + ",'" + itest + "','" + smark + "','" + foldn + "','" + sampid + "'," + tstcost + ",'" + scac + "')";

		sql.execute(sqlstm2);

		// chopchop the folders_inside
		if(foldinside.indexOf(foldn) == -1) foldinside += foldn + " ";
	}

	// save folders_inside and subcon_amount
	sqlstm3 = "update elb_subcons set folders_inside='" + foldinside + "', subcon_amount=" + scval.toString() + 
	" where origid=" + global_selected_subcon;
	sql.execute(sqlstm3);

	sql.close();
	guihand.showMessageBox("SAVED...");

	loadSubcons_List(1); // refresh
}

// itype: 1=commit, 2=uncommit
void commitSubconRequest(int itype)
{
	if(global_selected_subcon.equals("")) return;

	if(Messagebox.show("Once committed, cannot change anything..", "Are you sure?", 
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO) return;

	defst = (itype == 1) ? SCREQ_COMMIT : SCREQ_DRAFT;

	sqlstm = "update elb_subcons set reqstatus='" + defst + "' where origid=" + global_selected_subcon;
	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	sql.execute(sqlstm);
	sql.close();

	loadSubcons_List(1); // refresh	
}

// Update the subcon return result-date, chg subcon req to DONE too
void updateResultDate()
{
	rsdate = kiboo.getDateFromDatebox(subcon_resultdate_update);
	sqlstm = "update elb_subcons set resultdate='" + rsdate + "', reqstatus='" + SCREQ_DONE + "' where origid=" + global_selected_subcon;
	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	sql.execute(sqlstm);
	sql.close();
	updateres_date_popup.close();
	loadSubcons_List(1); // refresh	
}

// hard-delete. will del req-items as well!!! only admin access
void deleteSubconRequest()
{
	if(global_selected_subcon.equals("")) return;

	if(Messagebox.show("HARD DELETE!!", "Are you sure?",
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO) return;

	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;

	sqlstm = "delete from elb_subcons where origid=" + global_selected_subcon;
	sql.execute(sqlstm);

	sqlstm2 = "delete from elb_subcon_items where parent_id=" + global_selected_subcon;
	sql.execute(sqlstm2);

	sql.close();
	loadSubcons_List(1); // refresh	
}

// 25/04/2012: subcon tests lookup-id in value8 of subcon rec.
// customized for this sub-con tests picking from lookup
// test cost =  lookups.value1
void pickTests_clicker()
{
Object[] sctests_lb_headers = {
	new listboxHeaderWidthObj("Tests",true,"180px"),
	new listboxHeaderWidthObj("Method",true,"200px"),
	new listboxHeaderWidthObj("TAT",true,""),
	new listboxHeaderWidthObj("val1",false,""),
	
};

	if(prevSelectedFolder == null) return;

	// check subcon selected
	scac = subcon_name.getSelectedItem().getLabel();
	ilucode = "";
	
	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return;
	
	// subcon tests lookup-id in value8 of subcon rec.
	sqlstm2 = "select value8 from lookups where name='" + scac + "'";
	yrec = sql.firstRow(sqlstm2);
	if(yrec == null) { sql.close(); return; }

	ilucode = yrec.get("value8");
	
	if(ilucode == null || ilucode.equals(""))
	{
		sql.close();
		guihand.showMessageBox("ERR: No tests being defined for this sub-contractor");
		return;
	}

	Listbox newlb = lbhand.makeVWListbox_Width(sct_holder, sctests_lb_headers, "subcon_tests_lb", 5);

	sqlstm = "select disptext,value1,value2,value5 from lookups where myparent='" + ilucode + "' and expired=0";
	trecs = sql.rows(sqlstm);
	sql.close();
	if(trecs.size() == 0) return;

	newlb.setRows(8);
	newlb.setCheckmark(true);
	newlb.setMultiple(true);

	for(dpi : trecs)
	{
		ArrayList kabom = new ArrayList();
		kabom.add(dpi.get("disptext"));
		kabom.add(kiboo.checkNullString(dpi.get("value2")));
		kabom.add(kiboo.checkNullString(dpi.get("value5")));
		kabom.add(kiboo.checkNullString(dpi.get("value1")));
		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhand.insertListItems(newlb,strarray,"false","");
	}

	picksctests_popup.open(picktests_butt);
}

void pickupTests_clicker()
{
	if(prevSelectedFolder == null) return;

	// see what's been picked .. and make the list
	trecs = subcon_tests_lb.getSelectedItems();
	if(trecs.size() == 0) return;

	scval = 0.0;
	showstr = "";

	for(dpi : trecs)
	{
		showstr += lbhand.getListcellItemLabel(dpi,0) + ",";
		scval += Float.valueOf(lbhand.getListcellItemLabel(dpi,3).trim()).floatValue();
	}

	showstr = showstr.substring(0,showstr.length()-1);

	prevSelectedFolder.getChildren().get(3).setValue(showstr);
	prevSelectedFolder.getChildren().get(4).setValue(scval.toString()); // save total-cost of tests - to be updated into db

	picksctests_popup.close();
}

// itype: 1=subcon-forms, 2=commercial-invoice, 3=letter of intent, 4=subcon-checklist
void printForms(int itype)
{
	theparam = "scn=" + global_selected_subcon + "&ity=" + itype.toString();
	uniqwindowid = kiboo.makeRandomId("psc");
	runmestr = "lab/printSubconForms_v1.zul";
	guihand.globalActivateWindow(mainPlayground,"miscwindows",runmestr, uniqwindowid, theparam, useraccessobj);
}

// -- These can be used in other modules
// itype(customize for other mods) : 1=general lookups, 2=subcon-tests
void activateLookupEditor(int itype)
{
	uniqwindowid = kiboo.makeRandomId("le");
	runmestr = "alsglobal/staticlookupman.zul";
	theparam = "lu=112&wt=General%20Lookups";
	if(itype == 2) theparam = "lu=132&wt=Subcons%20Tests";
	guihand.globalActivateWindow(mainPlayground,"miscwindows",runmestr, uniqwindowid, theparam, useraccessobj);
}

// Customize this for other modules
void adminReloadLookups()
{
	luhand.populateListbox_ByLookup(subcon_courier,"DELIVERY_METHOD",2);
	luhand.populateListbox_ByLookup(subcon_alscontact,"ALS_CONTACTS",2);
	luhand.populateListbox_ByLookup(subcon_name,"SUBCON_NAMES",1);
	luhand.populateListbox_ByLookup(subcon_als_division,"ALSM_DIVISIONS",2);
}

// 11/06/2012: check authorized person to setup subcon tests
void subconTestSetup()
{
	unam = useraccessobj.username;
	canrun = false;
	if(unam.equals("intan")) canrun = true;
	if(unam.equals("padmin")) canrun = true;
	
	if(canrun) activateLookupEditor(2);
	else guihand.showMessageBox("Sorry, you are not authorized to setup test items");

}

]]>
</zscript>

<!-- pick subcon tests - tickbox -->
<popup id="picksctests_popup">
<groupbox mold="3d" width="450px">
	<div id="sct_holder" />
	<separator height="2px" />
	<hbox>
		<button label="Pick tests" style="font-size:9px" onClick="pickupTests_clicker()" />
		<button label="Close" style="font-size:9px" onClick="picksctests_popup.close()" />
	</hbox>
</groupbox>
</popup>
<!-- ENDOF pick subcon tests - tickbox -->

<!-- popup to update result-date -->
<popup id="updateres_date_popup">
<groupbox mold="3d">
	<grid>
		<rows>
			<row>
				<label value="Received result date" style="font-size:9px" />
				<datebox id="subcon_resultdate_update" format="yyyy-MM-dd" style="font-size:9px" />
			</row>
		</rows>
	</grid>
	<separator height="3px" />
	<hbox>
		<button label="Update" style="font-size:9px" onClick="updateResultDate()" />
		<button label="Close" style="font-size:9px" onClick="updateres_date_popup.close()" />
	</hbox>
</groupbox>
</popup>
<!-- ENDOF popup to update result-date -->

<!-- getSampleDetails popup -->
<popup id="sampledetails_popup">
<groupbox mold="3d" width="500px">
	<grid>
		<rows>
			<row>
				<label value="By folder" style="font-size:9px" />
				<textbox id="byfolder_tb" style="font-size:9px" />
				<button label="Dig" style="font-size:9px" onClick="digSampleDetails(1)" />
				<label value="By sample.ID" style="font-size:9px" />
				<textbox id="bysampleid_tb" style="font-size:9px" />
				<button label="Dig" style="font-size:9px" onClick="digSampleDetails(2)" />
			</row>
		</rows>
	</grid>
	<separator height="2px" />
	<div id="sampdets_holder" />
</groupbox>
</popup>
<!-- ENDOF getSampleDetails popup -->

<div width="1200px">
<panel id="subconreq_panel" title="Subcon-Request Management ${MYVERSION}" border="normal" collapsible="true" closable="true" >
<panelchildren>
<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" />
<hbox>
	<groupbox mold="3d" width="550px"> <!-- subcon reqs -->
		<grid>
		<rows>
			<row>
				<label value="Start date" style="font-size:9px" />
				<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" />
				<label value="End date" style="font-size:9px" />
				<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" />
				<label value="Search" style="font-size:9px" />
				<textbox id="subcon_tb" width="99%" style="font-size:9px" />
				<button label="Load" style="font-size:9px" onClick="loadSubcons_List(1)" />
			</row>
		</rows>
		</grid>
		<separator height="3px" />			
		<hbox>
			<button label="New subcon request" style="font-size:9px" onClick="newSubconRequest()" />
			<button label="Commit request" style="font-size:9px" onClick="commitSubconRequest(1)" />
			<button label="Export checklist" style="font-size:9px" onClick="printForms(4)" />
			<button label="Subcon tests setup" style="font-size:9px" onClick="subconTestSetup()" />
		</hbox>
		<separator height="3px" />
		<hbox>
			<button id="prnsubconform_butt" label="Print subcon-form" style="font-size:9px" onClick="printForms(1)" />
			<button id="prncomminv_butt" label="Print commercial-invoice" style="font-size:9px" onClick="printForms(2)" />
			<button id="prnletter_butt" label="Print Letter of Intent" style="font-size:9px" onClick="printForms(3)" />
		</hbox>

		<separator height="3px" />
		<div id="adminstuff" style="background:#ff0000;padding:2px" visible="false">
			<hbox>
				<button label="Uncommit" style="font-size:9px" onClick="commitSubconRequest(2)" />
				<button label="Delete" style="font-size:9px" onClick="deleteSubconRequest()" />
				<button label="Lookups" style="font-size:9px" onClick="activateLookupEditor(1)" />
				<button label="Reload lookups" style="font-size:9px" onClick="adminReloadLookups()" />
				<button label="Subcon tests" style="font-size:9px" onClick="activateLookupEditor(2)" />
			</hbox>
		</div>
		
		<div id="subconlist_holder" />

	</groupbox> <!-- ENDOF subcon reqs -->

	<div id="workarea" visible="false"> <!-- subcon form and so on workarea-->
		<groupbox mold="3d">
		<hbox> <!-- metadata -->
			<grid width="520px">
				<rows>
					<row spans=",3">
						<label value="Subcon Request #" style="font-size:9px" />
						<div style="background:#E6E365;padding:2px">
							<label id="subcon_origid" style="font-weight:bold" />
						</div>
					</row>
					<row>
						<label value="ALS contact" style="font-size:9px" />
						<listbox id="subcon_alscontact" style="font-size:9px" mold="select" />
						<label value="Division" style="font-size:9px" />
						<listbox id="subcon_als_division" style="font-size:9px" mold="select" />
					</row>
					<row>
						<label value="Subcon" style="font-size:9px" />
						<listbox id="subcon_name" style="font-size:9px" mold="select" />
						<label value="Set due date reminder" style="font-size:9px" />
						<datebox id="subcon_duedate" format="yyyy-MM-dd" style="font-size:9px" />
					</row>
					<row>
						<label value="Sample shipped" style="font-size:9px" />
						<datebox id="subcon_shipdate" format="yyyy-MM-dd" style="font-size:9px" />
						<label value="Courier" style="font-size:9px" />
						<listbox id="subcon_courier" style="font-size:9px" mold="select" />
					</row>
					<row spans=",3">
						<label value="Airway-bill" style="font-size:9px" />
						<textbox id="subcon_airwaybill" style="font-size:9px" width="99%" />					
					</row>
					<row spans=",3">
						<label value="Batch description" style="font-size:9px" />
						<textbox id="subcon_letterofintent" style="font-size:9px" width="99%" />
					</row>
					<row spans=",3">
						<label value="Special request / notes" style="font-size:9px" />
						<textbox id="subcon_extranotes" style="font-size:9px" multiline="true" width="99%" height="30px" />
					</row>
					<row spans=",3">
						<label value="Result date" style="font-size:9px" />
						<datebox id="subcon_resultdate" format="yyyy-MM-dd" style="font-size:9px" disabled="true" />					
					</row>
				</rows>
			</grid>

			<vbox>
				<button id="upreq_butt" label="Update request" style="font-size:9px" onClick="updateSubconReq()" />
				<button id="upres_butt" label="Update result date" style="font-size:9px" disabled="true" onClick="updateres_date_popup.open(upres_butt)" />
			</vbox>

		</hbox> <!-- ENDOF metadata -->
		</groupbox>

		<separator height="2px" />
		<groupbox mold="3d" >
		<hbox>
			<button id="newri_butt" label="New item" style="font-size:9px" onClick="newReqItem()" />
			<button id="delri_butt" label="Delete" style="font-size:9px" onClick="deleteReqItem()" />
			<button id="saveri_butt" label="SAVE ITEMS" style="font-size:9px" onClick="saveReqItems()" />
			<button id="getsampdet_butt" label="Get sample details" style="font-size:9px" onClick="getSampleDetails()" />
			<button id="picktests_butt" label="Pick tests" style="font-size:9px" onClick="pickTests_clicker()" />
		</hbox>

		<separator height="3px" />
		<div id="reqitems_holder" />
		</groupbox>

	</div> <!-- ENDOF subcon form and so on workarea-->

</hbox>

<zscript>
<![CDATA[

if(useraccessobj.accesslevel == 9)
{
	adminstuff.setVisible(true);
	byfolder_tb.setValue("41222"); // debugging thang
}

kiboo.setTodayDatebox(hiddendatebox);
kiboo.setTodayDatebox(startdate);
kiboo.setTodayDatebox(enddate);

kiboo.setTodayDatebox(subcon_duedate);
kiboo.setTodayDatebox(subcon_shipdate);
kiboo.setTodayDatebox(subcon_resultdate);
kiboo.setTodayDatebox(subcon_resultdate_update);

//populateDropdownListbox(subcon_courier,lu_DeliveryMethod); // lu_DeliveryMethod = alsglobaldefs.zs

luhand.populateListbox_ByLookup(subcon_courier,"DELIVERY_METHOD",2);
luhand.populateListbox_ByLookup(subcon_als_division,"ALSM_DIVISIONS",2);
luhand.populateListbox_ByLookup(subcon_alscontact,"ALS_CONTACTS",2);
luhand.populateListbox_ByLookup(subcon_name,"SUBCON_NAMES",1);

/*
subcon_name_tb = new Combobox();
makeComboitem2(subcon_name_tb,subconNames,"subcon_name",subconname_holder);
*/

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>

