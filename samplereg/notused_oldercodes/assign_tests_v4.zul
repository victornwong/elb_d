<?xml version="1.0" encoding="UTF-8"?>
<?page id="assigntests_panel4"?>
<zk>
<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript src="../alsglobal/alsglobal_guifuncs.zs" />
<zscript src="../alsglobal/samplereg_funcs.zs" />
<zscript src="../alsglobal/securityfuncs.zs" />
<zscript src="../alsglobal/doculink_funcs.zs" />
<zscript src="../alsglobal/divisiongroup_funcs.zs" />
<zscript src="../alsglobal/testpackage_funcs.zs" />
<zscript>
<![CDATA[
/*
<zscript src="../alsglobal/alsglobalfuncs.zs" />
<zscript src="../alsglobal/alsglobal_sqlfuncs.zs" />
Version		: 4.1
Title		: Assign test parameters to LOGGED folders
Written by	: Victor Wong

Revisions:
25/03/2010: added box to allow search on company - instead of just start-date and end-date
25/03/2010: updated to main file
30/03/2010: added branch field search
12/06/2010: recode some of the section - optimize too
20/09/2010: recoded the test-package selector, allow double-click to select package - show clients and test-parameters too
25/10/2010: added extra button to set folder's PKD (pejabat kesihatan daerah) samples
25/01/2011: abit of cleanup and optimization
03/08/2011: insert unitprice from testpackage_items
11/10/2011: add ASMA ID/stations fields at sample-marking box - only for ASMA ar_code
27/03/2012: ported tests-panel selector to byte-codes

Ima idea - assigned-tests convert back to test-package

fields:
units = stockrec.get("newfield10")
billme = stockrec.get("newfield9")
lor = stockrec.get("newfield8")
selling_price = stockrec.get("selling_price")

*/

import java.util.*;
import java.text.*;
import java.lang.Float;
import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.zk.zutl.*;
import org.victor.*;
sechand = new SecurityFuncs();

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

kiboo = new Generals();
sqlhand = new SqlFuncs();
lbhandler = new ListboxHandler();
guihand = new GuiFuncs();
samphand = new SampleReg();
luhand = new LookupFuncs();

TestsPanel testspanel;

documentLinkObj documentLinkProp = new documentLinkObj();

Object whathuh;
Object whathuh_samples;

last_foldersearch_type = 0;

global_selected_sampleid = "";
global_selected_foldernum = "";
global_selected_arcode = "";

// const for max chars in listbox item
SAMPLEID_SAMPLEMARKING_LEN = 35;

/*
// Database func: Get rec from lookup based on idlookups
Object getLookupRec(String idlookups)
{
	sql = sqlhand.als_mysoftsql();
	if(sql == null ) return null;
	sqlstm = "select * from lookups where idlookups=" + idlookups;
	retval = sql.firstRow(sqlstm);	
	sql.close();
	return retval;
}
*/

// check whether can do CRUD on samples. uses whathuh var to access folderJobObj
boolean foldersamplesCRUD_Check()
{
	retval = true;
	if(!whathuh.fj_folderstatus.equals(FOLDERDRAFT))
	{
		guihand.showMessageBox("Folder/job already logged or commited. Modification can only be performed by HOD or senior supervisor");
		retval = false;
	}
	return retval;
}

ALS_stock_cat = "";

void hideTestParametersBox()
{
	//mysoft_testparams.setVisible(false);	
}

void showTestParametersBox()
{
	//mysoft_testparams.setVisible(true);
}

void storeTestParameter(String iwhich)
{
	testjobid = testparamid.getValue();
	if(testjobid.equals("")) return;

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	sqlstk = "select newfield10,newfield9,newfield8,selling_price from stockmasterdetails where id=" + iwhich;
	stockrec = sql.firstRow(sqlstk);

	if(stockrec != null)
	{
		units = kiboo.checkNullString(stockrec.get("newfield10"));
		billme = kiboo.checkNullString(stockrec.get("newfield9"));
		lor = kiboo.checkNullString(stockrec.get("newfield8"));
		selling_price = (stockrec.get("selling_price") == null) ? 0.0 : stockrec.get("selling_price");

		sqlstatem = "update JobTestParameters set mysoftcode=" + iwhich + ", lor='" + lor + 
		"', bill='" + billme + "',price=" + selling_price.toString() + " where origid=" + testjobid;
		sql.execute(sqlstatem);
	}

	sql.close();
}

// onSelect event to be used in TestsPanel.populateTestParametersColumn()
// can customize this one for other modules
class ALSTestParametersLB_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		iwhat = tests_description_lb.getSelectedItem().getLabel();
		idex = testparameters_lb.getSelectedIndex();
		// test selected if this event got activated.. just need to store the test id which is hidden in the listbox, column 1
		// 3/2/2010: tied in with JobTestParameters table
		storeTestParameter(iwhat);
		// refresh folder->samples->tests listbox and select what's been previously selected
		startTestParametersSearch(sampleid);
		testparameters_lb.setSelectedIndex(idex);
	}
}

// Show the sample marking and notes from database
void showSampleMarking_Notes(String isampid)
{
	sampno = Integer.parseInt(samphand.extractSampleNo(isampid));
	samprec = samphand.getFolderSampleRec(sampno.toString());

	samp_matrix_tb.setValue("");

	if(samprec != null)
	{
		// this 2 textbox s are hardcoded and def in UI section
		sampmark_tb.setValue(samprec.get("samplemarking"));
		sampnotes_tb.setValue(samprec.get("extranotes"));
		
		// 25/1/2011: show the sample-matrix
		// samp_matrix_tb def in UI
		matrix = samprec.get("matrix");
		if(!matrix.equals(""))
		{
			matrixrec = luhand.getLookupRec_ByID(matrix); // TODO: should be in Lookups.java
			if(matrixrec != null)
			{
				disptext = kiboo.checkNullString(matrixrec.get("disptext"));
				samp_matrix_tb.setValue(disptext);
			}
		}

		// 11/10/2011: ASMA only stuff
		asmastuff.setVisible(false);
		asma_id.setValue("");
		asma_station.setValue("");

		if(global_selected_arcode.equals("300A/008"))
		{
			asmid = kiboo.checkNullString(samprec.get("asma_id"));
			asmstat = kiboo.checkNullString(samprec.get("asma_station"));
			asma_id.setValue(asmid);
			asma_station.setValue(asmstat);
			asmastuff.setVisible(true);
		}
	}
}

class SamplesLB_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		irecno = samples_lb.getSelectedItem().getLabel();
		sampleid.setValue(irecno);

		// 25/1/2011: save global sample-id - use later in other funcs
		global_selected_sampleid = samphand.extractSampleNo(irecno);

		startTestParametersSearch(sampleid);
		hideTestParametersBox();

		// 5/3/2010: show sample marking and notes for editing if any
		showSampleMarking_Notes(irecno);
	}
}

Object[] samples_lb_headers = {
	new listboxHeaderObj("SampleID",true),
	new listboxHeaderObj("Sample Marking",true),
};

Object[] asmasamples_lb_headers = {
	new listboxHeaderObj("SampleID",true),
	new listboxHeaderObj("Sample Marking",true),
	new listboxHeaderObj("ASMA-ID",true),
	new listboxHeaderObj("STATION",true),
};

// Search and populate samples in folders listbox
// 25/1/2011: limit searches to max 150 samples
void startFolderSamplesSearch(Textbox ifolderno)
{
	global_selected_sampleid = ""; // reset each time - always current when user click

	foldns = ifolderno.getValue();
	thefolderno = samphand.convertFolderNoToInteger(foldns);
	if(thefolderno == 0) return;
	
	Listbox newlb;
	
	sqlstatem = "select top 200 origid,samplemarking,asma_station,asma_id from JobSamples where jobfolders_id=" + thefolderno.toString() +
	" and deleted=0 order by origid";
	
	if(global_selected_arcode.equals("300A/008"))
		newlb = lbhandler.makeVWListbox(samples_div, asmasamples_lb_headers, "samples_lb", 5);
	else
		newlb = lbhandler.makeVWListbox(samples_div, samples_lb_headers, "samples_lb", 5);

    sql = sqlhand.als_mysoftsql();
    if(sql == null) return;
	tlist = sql.rows(sqlstatem);
	sql.close();

	if(tlist.size() == 0) return;
	newlb.setRows(15);
	newlb.addEventListener("onSelect", new SamplesLB_Listener());

	//String[] strarray = new String[2];
	for(ilist : tlist)
	{
		ArrayList kabom = new ArrayList();
		ifno = ilist.get("origid");
		//strarray[0] = foldns + kiboo.padZeros5(ifno);
		kabom.add(foldns + kiboo.padZeros5(ifno));

		// 12/3/2010: chomp sample marking so it won't clutter the listbox			
		ismtemp = lbhandler.trimListitemLabel(ilist.get("samplemarking"), SAMPLEID_SAMPLEMARKING_LEN);
		kabom.add(ismtemp);

		if(global_selected_arcode.equals("300A/008"))
		{
			kabom.add(kiboo.checkNullString(ilist.get("asma_id")));
			kabom.add(kiboo.checkNullString(ilist.get("asma_station")));
		}

		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhandler.insertListItems(newlb,strarray,SAMPLES_PREFIX,"");
	}

} // end of startFolderSamplesSearch()

class FolderLB_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = folderjobs_lb.getSelectedItem();
		global_selected_foldernum = folderjobs_lb.getSelectedItem().getLabel();

		global_selected_arcode = lbhandler.getListcellItemLabel(selitem,6);

		// folderno is hidden Textbox defined in the UI section
		folderno.setValue(global_selected_foldernum);

		/*
		ifoldn = samphand.convertFolderNoToInteger(irecno);
		therec = getFolderJobRec(ifoldn.toString());
		ifoldstat = therec.get("folderstatus");
		*/

		startFolderSamplesSearch(folderno);

		if(testparameters_div.getFellowIfAny("testparameters_lb") != null) testparameters_lb.setParent(null);
		hideTestParametersBox();

		// 5/3/2010: clear the sample marking and notes textbox. uses hardcode textboxes in UI section
		sampmark_tb.setValue("");
		sampnotes_tb.setValue("");

	}
}

Object[] jobfolders_lb_headers = {

	new listboxHeaderObj("FolderNo",true),
	new listboxHeaderObj("RecvDate",true),
	new listboxHeaderObj("Customer",true),
	//new listboxHeaderObj("Status",true),
	new listboxHeaderObj("Brnch",true),
	new listboxHeaderObj("PKD",true),
	new listboxHeaderObj("Share",true),
	new listboxHeaderObj("arcode",false),
};

/* 
Do the folders search and populate listbox

25/3/2010: change the select command to:
select jobfolders.origid,jobfolders.ar_code,jobfolders.datecreated,customer.ar_code,customer.customer_name
from jobfolders left join customer on customer.ar_code = jobfolders.ar_code 
where jobfolders.datecreated between '2010-03-01' and '2010-03-15' 
and customer.customer_name like 'kawan%' group by jobfolders.origid,jobfolders.ar_code,jobfolders.datecreated,
customer.ar_code,customer.customer_name

30/3/2010: added in branch search
30/9/2010: added search by folder - itype 1=normal 2=byfolder
25/1/2011: show jobfolders.share_sample
17/3/2011: remove "folderstatus" col from the listbox

*/
void startFolderJobsSearch(Datebox startd, Datebox endd, Textbox icustomer_tb, int itype)
{
	sdate = kiboo.getDateFromDatebox(startd);
    edate = kiboo.getDateFromDatebox(endd);
	cnm = icustomer_tb.getValue();
	
	last_foldersearch_type = itype;
	
	if(sdate == null || edate == null)
    {
        guihand.showMessageBox("Please specify start and end date for search");
        return;
    }
    
    sql = sqlhand.als_mysoftsql();
    if(sql == null) return;
    
    // reset global vars
    global_selected_foldernum = "";
    global_selected_sampleid = "";
    global_selected_arcode = "";
	
	// 29/3/2010: check branch
	branch_str = "";
	
	ibranch = useraccessobj.branch;
	if(!ibranch.equals("ALL")) // if admin login, should be able to see all folders else filter according to branch
		branch_str = "and branch='" + ibranch + "' ";

	loggedTest = "and folderstatus='" + FOLDERLOGGED + "' ";
	
	if(useraccessobj.accesslevel == 9) loggedTest = "and folderstatus in ('" + FOLDERLOGGED + "','" + FOLDERCOMMITED + "') " ;
	
	// 2/2/2010: find those folders that're LOGGED
	sqlstatem = "select top 200 origid,branch,datecreated,ar_code,pkd_samples,share_sample from JobFolders " + 
	"where datecreated between '" + sdate + "' and '" + edate + "' " + 
	"and deleted=0 " + loggedTest + branch_str + " order by datecreated desc";
	
	// 25/3/2010: new select cmd to search based on s.date, e.date and customer-name - req by Zainab
	if(!cnm.equals(""))
	{
		xcnm = kiboo.replaceSingleQuotes(cnm); // play safe
		sqlstatem = "select top 200 jobfolders.origid, jobfolders.ar_code as jf_arcode, jobfolders.datecreated, " + 
			"jobfolders.branch, " + 
			"jobfolders.pkd_samples, jobfolders.share_sample, customer.ar_code,customer.customer_name " +
			"from jobfolders left join customer " +
			"on customer.ar_code = jobfolders.ar_code where " +
			"jobfolders.datecreated between '" + sdate + "' and '" + edate + "'" + 
			"and customer.customer_name like '%" + xcnm + "%' " +
			"and deleted=0 " + loggedTest + branch_str;
	}
	
	// 30/9/2010: search by folder number
	if(itype == 2)
	{
		flst = byfolder_tb.getValue();
		if(!flst.equals(""))
		{
			sqlstatem = "select top 200 origid,branch,datecreated,ar_code,pkd_samples,share_sample from JobFolders " + 
				"where deleted=0 " + loggedTest + branch_str + 
				" and folderno_str like '%" + flst + "%' order by datecreated desc";
		}
	}

	tlist = sql.rows(sqlstatem);
	sql.close();
	
	folder_buttons_div.setVisible(true);

	Listbox newlb = lbhandler.makeVWListbox(folderjobs_div, jobfolders_lb_headers, "folderjobs_lb", 10);
	if(tlist.size() == 0) return;

	newlb.setRows(20);
	newlb.addEventListener("onSelect", new FolderLB_Listener());

	for(ilist : tlist)
	{
		ArrayList kabom = new ArrayList();
		ifolderno = ilist.get("origid");

		folderbranch = ilist.get("branch");
		folderprefix = kiboo.folderPrefixByBranch(folderbranch);
		folderstr = folderprefix + kiboo.padZeros5(ifolderno);

		kabom.add(folderstr);
		kabom.add(ilist.get("datecreated").toString().substring(0,10));

		// get customer name from ar_code - will be slow if alot, scan 1 by 1
		iar_code = ilist.get("ar_code");
		iar_code = iar_code.toUpperCase().trim();
		icompanyname = "Undefined";

		if(!iar_code.equals(""))
		{
			// 11/6/2010: hardcode ar_code CASH and CASH USD in mysoft. Load customer info from table CashSales_CustomerInfo
			if(iar_code.equals("CASH") || iar_code.equals("CASH USD"))
			{
				csrec = samphand.getCashSalesCustomerInfo_Rec(folderstr);	// get rec based on folder no
				icompanyname = "CshAct: Undefined";
				if(csrec != null) icompanyname = "CshAct: " + csrec.get("customer_name");
			}
			else
				icompanyname = sqlhand.getCompanyName(iar_code);
		}

		kabom.add(icompanyname);

		//kabom.add(ilist.get("folderstatus"));
		kabom.add(ilist.get("branch"));

		pkdwop = "---";
		if(ilist.get("pkd_samples") != null) pkdwop = (ilist.get("pkd_samples") == 0) ? "---" : "-Y-";

		kabom.add(pkdwop);
		kabom.add(ilist.get("share_sample"));
		kabom.add(iar_code);

		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhandler.insertListItems(newlb,strarray,folderprefix,"");
	}

} // end of startFolderJobsSearch()

// Auto select those test-parameters boxes
void autoAssignTestParametersBox(String iwhich)
{
	therec = getJobTestParametersRec(iwhich);
	if(therec == null) return;

	imysoftcode = therec.get("mysoftcode");
	if(imysoftcode == 0) return;

	istockrec = samphand.getStockMasterDetails(imysoftcode.toString());
	if(istockrec == null) return;

	istockcat = istockrec.get("Stock_Cat");
	igroupcode = istockrec.get("GroupCode");

	populateSectionColumn(section_column,istockcat);
	populateTestParametersColumn(testparameters_column,istockcat,igroupcode);

	// auto-select the thing in the listboxes.. tricky part
	divisionln = convertCodeToLongName(als_divisions,istockcat);

	lbhandler.matchListboxItems(division_stockcat_lb, divisionln);
	lbhandler.matchListboxItems(section_groupcode_lb, igroupcode);

	tscode = istockrec.get("ID").toString();
	lbhandler.matchListboxItems(tests_description_lb,tscode);
}

class TestParams_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		irecno = testparameters_lb.getSelectedItem().getLabel();
		testparamid.setValue(irecno); // save the rec no in the hidden textbox
		// update test-parameters selection-box with whatever test being assigned
		autoAssignTestParametersBox(irecno);
		// show the test-parameters selection box
		showTestParametersBox();
	}
}

Object[] testparameterssearch_lb_headers = {
	new listboxHeaderObj("TestNo",false),
	new listboxHeaderObj("S#",true),
	new listboxHeaderObj("Description",true),
	new listboxHeaderObj("mysoftcode",false),
};
	
// Do the search and populate listbox
void startTestParametersSearch(Textbox isampleid)
{
	tsi = isampleid.getValue();
	if(tsi.equals("")) return;

	tsampid = samphand.extractSampleNo(tsi);

	Listbox newlb = lbhandler.makeVWListbox(testparameters_div, testparameterssearch_lb_headers, "testparameters_lb", 5);

    sql = sqlhand.als_mysoftsql();
    if(sql == null) return;

	// 2/2/2010: find those folders that're LOGGED
	//sqlstatem = "select * from JobTestParameters where jobsamples_id=" + tsampid + " order by origid";

	sqlstatem = "select jobtestparameters.origid, jobtestparameters.mysoftcode, " +
	"jobtestparameters.sorter, jobtestparameters.lor, jobtestparameters.bill, stockmasterdetails.description, stockmasterdetails.description2 " +
	"from jobtestparameters " +
	"left join stockmasterdetails on jobtestparameters.mysoftcode=stockmasterdetails.id " +
	"where jobtestparameters.jobsamples_id=" + tsampid +
	"order by jobtestparameters.sorter";

	tlist = sql.rows(sqlstatem);

	if(tlist.size() == 0)
	{
		sql.close();
		return;
	}

	newlb.setRows(15);
	newlb.addEventListener("onSelect", new TestParams_Listener());
	newlb.setMultiple(true);
	sort_count = 1;

	for(ilist : tlist)
	{
		ArrayList kabom = new ArrayList();
		testorigid = ilist.get("origid").toString();
		kabom.add(testorigid);
		
		// 13/9/2010: put in sorter col, check against sorter in table, if = 1, update local sorter number into table
		tblsorter = ilist.get("sorter");
		
		if(sort_count != tblsorter)
		{
			tblsorter = sort_count;
			sqlstm = "update jobtestparameters set sorter=" + tblsorter.toString() + " where origid=" + testorigid;
			sql.execute(sqlstm);
			}

		kabom.add(tblsorter.toString());

		desc1 = kiboo.checkNullString_RetWat(ilist.get("description"),"----------");
		desc2 = kiboo.checkNullString_RetWat(ilist.get("description2"),"----------");

		myscode = ilist.get("mysoftcode");
		yystr = (myscode.equals("0")) ? "-NO TEST SELECTED-" : desc1 + " (" + desc2 + ")";
		yystr = lbhandler.trimListitemLabel(yystr,60);

		kabom.add(yystr);
		kabom.add(myscode.toString());

		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhandler.insertListItems(newlb,strarray,"false","");
		sort_count++;
	}

	sql.close();

} // end of startTestParametersSearch()

// create a new empty test-parameter linking to the sample-id
// refer to table JobTestParameters
// 15/9/2010: added additional fields
void createNewTestParameter()
{
	// make sure something selected
	ifoldno = folderno.getValue();
	isampid = sampleid.getValue();
	if(ifoldno.equals("") || isampid.equals("")) return;

	tsampid = samphand.extractSampleNo(isampid);

	nextsorter = testparameters_lb.getItemCount() + 1;
	nextsorter = nextsorter.toString();

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	sqlstatem = "insert into JobTestParameters (jobsamples_id,mysoftcode,starlimscode,status,uploadtomysoft," + 
	"uploadtolims,sorter,lor,bill,price,units) values " + 
	"(" + tsampid + ",0,0,'DRAFT',0,0," + nextsorter + ",'','YES',0.0,'')";

	sql.execute(sqlstatem);
	sql.close();
	startTestParametersSearch(sampleid);

	// 18/03/2011: audit trail
	todaydate = kiboo.getDateFromDatebox(hiddendatebox);
	sqlhand.addAuditTrail(global_selected_foldernum,"Add test parameter", useraccessobj.username, todaydate);
}

// 15/08/2011: finally add the multi-selection
void deleteTestParameter()
{
	if(testparameters_lb.getSelectedCount() == 0) return;

	todaydate = kiboo.getDateFromDatebox(hiddendatebox);
	allitems = testparameters_lb.getSelectedItems().toArray();

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	for(i=0; i<testparameters_lb.getSelectedItems().size(); i++)
	{
		selitem = allitems[i];
		torigid = lbhandler.getListcellItemLabel(selitem,0);
		testdesc = lbhandler.getListcellItemLabel(selitem,2);
		sqlstatem = "delete from JobTestParameters where origid=" + torigid;
		sql.execute(sqlstatem);
		// 18/03/2011: audit trail
		sqlhand.addAuditTrail(global_selected_foldernum,"Delete test : " + testdesc, useraccessobj.username, todaydate);
	}

	sql.close();
	startTestParametersSearch(sampleid); // refresh
}

// Copy tests assigned to selected sample to the next sample. Will allow user to work faster, instead of selecting tests for each samples which might have the same tests.
void copyTestsToNext()
{
	isampid = sampleid.getValue();
	if(isampid.equals("")) return;

	lb_itemcount = samples_lb.getItemCount();
	if(lb_itemcount == 0) return;

	thisitem = samples_lb.getSelectedIndex();
	lb_nextitem = thisitem + 1;

	// no more next item, return
	if(lb_nextitem > lb_itemcount-1) return;

	nextsampid = samples_lb.getItemAtIndex(lb_nextitem).getLabel();

	// alert("sampleid : " + isampid + " lb_itemcount: " + lb_itemcount.toString() + " thisitem: " + thisitem.toString() + " lb_nextitem: " + lb_nextitem.toString());
	// samples_lb.setSelectedIndex(lb_nextitem);

	// now copy what're the tests for the selected sample to the next sample
	// need not check for dups. if user copy twice, the tests will appear 2 times for that sample
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	this_sampidint = convertSampleNoToInteger(isampid);
	next_sampidint = convertSampleNoToInteger(nextsampid);

	// get all tests assigned for selected sample
	sqlstatem = "select * from JobTestParameters where jobsamples_id=" + this_sampidint.toString();
	tlist = sql.rows(sqlstatem);

	if(tlist != null)
	{
		for(ilist:tlist)
		{
			tpid = (ilist.get("testpackageid") == null) ? "0" : ilist.get("testpackageid").toString();
			tpprice = (ilist.get("packageprice") == null) ? "0.0" : ilist.get("packageprice").toString();

			sqlstatem2 = "insert into JobTestParameters (jobsamples_id,mysoftcode,starlimscode,status," + 
			"uploadtomysoft,uploadtolims,sorter,lor,bill,price,units,testpackageid,packageprice) values (" + 
			next_sampidint.toString() + ", " + ilist.get("mysoftcode") + ", 0, 'DRAFT', 0, 0, " + 
			ilist.get("sorter") + ",'" + ilist.get("lor") + "','" + ilist.get("bill") + "'," + 
			ilist.get("price").toString() + ", '" + ilist.get("units") + "'," + tpid + "," + tpprice + ")";
			sql.execute(sqlstatem2);
		}
	}
	
	sql.close();
}

// Dup all tests assigned to selected sample to all below it
void dupAllTests()
{
	isampid = sampleid.getValue();
	if(isampid.equals("")) return;

	if (Messagebox.show("Duplicate selected sample's tests to other samples", "Are you sure?", 
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO)
			return;

	this_sampidint = convertSampleNoToInteger(isampid).toString();

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	// get all the tests for selected sample id, save into an array
	sqlstatem = "select mysoftcode,sorter,lor,bill,price,units,testpackageid,packageprice from JobTestParameters where jobsamples_id=" + this_sampidint;
	tcodes = sql.rows(sqlstatem);

	reccount = tcodes.size();

	if(tcodes != null && reccount > 0)
	{
		// get selected sample 's jobfolders_id , main link for other samples
		samprec = samphand.getFolderSampleRec(this_sampidint);
		jobfolderid = samprec.get("jobfolders_id");
		
		Integer[] samptestcodes = new Integer[reccount];
		Integer[] sorters = new Integer[reccount];
		String[] lors = new String[reccount];
		String[] bills = new String[reccount];
		Float[] prices = new Float[reccount];
		String[] units = new String[reccount];
		// 11/08/2011: testpackage-id and packageprice
		String[] testpid = new String[reccount];
		String[] testpprice = new String[reccount];

		// store the mysoftcode and stuff into array
		i = 0;
		for(kki : tcodes)
		{
			samptestcodes[i] = kki.get("mysoftcode");
			sorters[i] = kki.get("sorter");
			lors[i] = kki.get("lor");
			bills[i] = kki.get("bill");
			prices[i] = kki.get("price").floatValue();
			units[i] = kki.get("units");

			testpid[i] = (kki.get("testpackageid") == null) ? "0" : kki.get("testpackageid").toString();
			testpprice[i] = (kki.get("packageprice") == null) ? "0.0" : kki.get("packageprice").toString();

			i++;
		}

		// now find all other samples
		sqlstatem2 = "select origid from JobSamples where origid<>" + this_sampidint + " and jobfolders_id=" + jobfolderid;
		othersamprecs = sql.rows(sqlstatem2);

		for(iik : othersamprecs)
		{
			kiko = iik.get("origid").toString();

			// 14/9/2010: add couple of new fields, sorters/lors/bills/prices
			// loop through all the tests stored in samptestcodes
			for(i=0; i<samptestcodes.length; i++)
			{
				kitest = samptestcodes[i].toString();
				theprice = prices[i].toString();
				sqlstatem3 = "insert into JobTestParameters (jobsamples_id,mysoftcode,starlimscode,status," +
				"uploadtomysoft,uploadtolims,sorter,lor,bill,price,units,testpackageid,packageprice) values (" +
				kiko + ", " + kitest + ", 0, 'DRAFT', 0, 0," + 
				sorters[i].toString() + ",'" + lors[i] + "','" + bills[i] + "'," + 
				theprice + ",'" + units[i] + "'," + testpid[i] + "," + testpprice[i] + ")";

				sql.execute(sqlstatem3);
			}
		}
	}
	sql.close();
	guihand.showMessageBox("Selected sample's tests have been duplicated to other samples");
}

// Will commit the folder/job - folderstatus will change to FOLDERCOMMITED (def in alsglobaldefs.zs).
// This section is where the upload to MySoft and STARLIMS will happen
// uses folderjobs_lb.
void commitFolder()
{
	if(!lbhandler.check_ListboxExist_SelectItem(folderjobs_div,"folderjobs_lb")) return;
	ifoldn = folderjobs_lb.getSelectedItem().getLabel();

	//guihand.showMessageBox("Point of no return, once this folder/job is commited, you cannot change anything no more..");

	if (Messagebox.show("Commit folder/job: " + ifoldn, "Are you sure?", 
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.YES)
	{
		sql = sqlhand.als_mysoftsql();
		if(sql == null) return;
		todaydate = kiboo.getDateFromDatebox(hiddendatebox);

		// 07/10/2011: save commit date to jobfolders.comitdate

		iorig = Integer.parseInt(extractFolderNo(ifoldn)).toString();
		sqlstatem = "update jobfolders set folderstatus='" + FOLDERCOMMITED + "', comitdate='" + todaydate + "' where origid=" + iorig;
		sql.execute(sqlstatem);
		sql.close();

		guihand.showMessageBox("Commited : " + ifoldn);

		// refresh folder/job listbox
		startFolderJobsSearch(startdate,enddate,customer_tb,last_foldersearch_type);

		// clear samples listbox - already commited, should be cleared to avoid confusion
		if(samples_div.getFellowIfAny("samples_lb") != null) samples_lb.setParent(null);
		if(testparameters_div.getFellowIfAny("testparameters_lb") != null) testparameters_lb.setParent(null);

		// 17/9/2010: audit-trail thing..
		sqlhand.addAuditTrail(ifoldn,"TestAssign: Commit folder", useraccessobj.username, todaydate);
	}
}

void printSRA_Wrapper()
{
	ifoldi = folderno.getValue();
	if(ifoldi.equals("")) return;
	printSRA(ifoldi); // samplereg_funcs.zs
}

void printSampleLabels()
{
	// see if we have any samples in listbox - hardcoded samples_lb
	// samples_div, samples_lb_headers, "samples_lb"
	if(samples_div.getFellowIfAny("samples_lb") == null) return;
	if(samples_lb.getItemCount() < 1) return;

	ifoldi = folderno.getValue();
	if(ifoldi.equals("")) return;

	// 24/2/2010: save samples id full string eg. ALSM000010001 before printing.
	//saveFolderSamplesNo_Main(samples_lb); // samplereg_funcs.zs

	printSampleLabels(ifoldi); // samplereg_funcs.zs

} // end of printSampleLabels()

// Update sample marking and extra notes
// samples_div, samples_lb_headers, "samples_lb"
// 11/10/2011: update also asma_id and asma_station if ar_code = 300A/008
void updateSampleMarking(Textbox isampmark, Textbox isampnotes)
{
	if(!lbhandler.check_ListboxExist_SelectItem(samples_div,"samples_lb")) return;

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	sampleid_fromtree = samples_lb.getSelectedItem().getLabel();
	sampleid_lb_item = samples_lb.getSelectedItem();

	sampno = Integer.parseInt(samphand.extractSampleNo(sampleid_fromtree)).toString();

	isampm = kiboo.replaceSingleQuotes(isampmark.getValue());
	isampn = kiboo.replaceSingleQuotes(isampnotes.getValue());
	
	// 11/10/2011: for asma station
	asmid = kiboo.replaceSingleQuotes(asma_id.getValue());
	asmstat = kiboo.replaceSingleQuotes(asma_station.getValue());

	// 18/03/2011: audit trail
	sqlstm = "select samplemarking,extranotes from jobsamples where origid=" + sampno;
	osmprec = sql.firstRow(sqlstm);
	if(osmprec != null)
	{
		osm = osmprec.get("samplemarking");
		// insert audit-trail if prev sample-marking exist
		if(!osm.equals(""))
		{
			oen = osmprec.get("extranotes");

			todaydate = kiboo.getDateFromDatebox(hiddendatebox);
			auditstr = "Change " + sampleid_fromtree + " sample-marking orig: " + osm;
			sqlhand.addAuditTrail(global_selected_foldernum, auditstr, useraccessobj.username, todaydate);
		}
	}

	sqlstatem = "update JobSamples set samplemarking='" + isampm + "'," + 
	"extranotes='" + isampn + "', asma_id='" + asmid + "',asma_station='" + asmstat + "' where origid=" + sampno;
	sql.execute(sqlstatem);
	sql.close();

	// 26/4/2010: need to redraw better..
	startFolderSamplesSearch(folderno);
}

// 18/03/2011: copy selected sample-marking to next
void copySampleMarkingToNext()
{
	if(global_selected_sampleid.equals("")) return;

	lbitemcount = samples_lb.getItemCount();
	//if(lbitemcount < 2) { guihand.showMessageBox("Nothing to copy to.."); return; }
	selindex = samples_lb.getSelectedIndex();
	nextindex = selindex + 1;
	if(nextindex >= lbitemcount) { return; }

	nextitem = samples_lb.getItemAtIndex(selindex+1);
	next_sampleid = samphand.extractSampleNo(lbhandler.getListcellItemLabel(nextitem,0));

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	sqlstatem = "select samplemarking,jobfolders_id from JobSamples where origid=" + global_selected_sampleid;
	fsamprec = sql.firstRow(sqlstatem);

	if(fsamprec != null)
	{
		smpmark = fsamprec.get("samplemarking");
		if(smpmark == null) smpmark = "";
		sqlstm = "update jobsamples set samplemarking='" + smpmark + "' where origid=" + next_sampleid;
		sql.execute(sqlstm);
	}
	sql.close();
	startFolderSamplesSearch(folderno); // refresh (folderno = hidden textbox - archane method 18/03/2011)
}

// 12/3/2010: to dup all sample-marking to sampleid
void dupSampleMarking()
{
	isampid = sampleid.getValue();
	if(isampid.equals("")) return;
	this_sampidint = convertSampleNoToInteger(isampid).toString();

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	// get all the tests for selected sample id, save into an array
	sqlstatem = "select samplemarking,jobfolders_id from JobSamples where origid=" + this_sampidint;
	fsamprec = sql.firstRow(sqlstatem);

	if(fsamprec != null)
	{
		firstsampm_str = fsamprec.get("samplemarking");
		jobfolderid = fsamprec.get("jobfolders_id");

		// make sure it ain't blank, otherwise it'll overwrite other sample-marking keyed
		if(!firstsampm_str.equals(""))
		{
			if (Messagebox.show("Duplicate selected sample marking to other samples", "Are you sure?", 
				Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO)
					break;

			// set other sampleid in this folder to the sample-marking
			sqlstatem2 = "select origid,sampleid_str from JobSamples where origid<>" + this_sampidint + " and jobfolders_id=" + jobfolderid;
			othersamprecs = sql.rows(sqlstatem2);

			// other sample-id, lets dup 'em marking
			if(othersamprecs != null)
			{
				for(otrec : othersamprecs)
				{
					ooid = otrec.get("origid");
					sampid_str = otrec.get("sampleid_str");
					sqls3 = "update JobSamples set samplemarking='" + firstsampm_str + "' where origid=" + ooid.toString();
					sql.execute(sqls3);
					matchItemUpdateLabel(samples_lb, sampid_str, 1, firstsampm_str);
				}
			}
		}
	}

	sql.close();	
	startFolderSamplesSearch(folderno);
}

// chopped from testpackages_man.zul
// 13/9/2010: move test-item up=1 or down=2 .. report-template sorter field
void moveTestItem_clicker(int idirection)
{
//testparameters_div, testparameterssearch_lb_headers, "testparameters_lb"
	if(!lbhandler.check_ListboxExist_SelectItem(testparameters_div,"testparameters_lb")) return;

	selindex = testparameters_lb.getSelectedIndex();
	selitem = testparameters_lb.getSelectedItem();
	nextindex = selindex;
	nextitem = selitem;
	doit = false;

	switch(idirection)
	{
		case 1:	// move up
			nextindex--;
			if(nextindex != -1) doit = true;
			break;

		case 2: // move down
			nextindex++;
			if(nextindex <= testparameters_lb.getItemCount()-1) doit = true;
			break;
	}

	if(doit)
	{
		nextitem = testparameters_lb.getItemAtIndex(nextindex);

		// get sorter numbers and swap
		oldsorter = lbhandler.getListcellItemLabel(selitem,1);
		oldid = lbhandler.getListcellItemLabel(selitem,0);

		newsorter = lbhandler.getListcellItemLabel(nextitem,1);
		newid = lbhandler.getListcellItemLabel(nextitem,0);

		sql = sqlhand.als_mysoftsql();
		if(sql == null) return;

		// update old
		sqlstm1 = "update jobtestparameters set sorter=" + newsorter + " where origid=" + oldid;
		sql.execute(sqlstm1);
		// update new
		sqlstm2 = "update jobtestparameters set sorter=" + oldsorter + " where origid=" + newid;
		sql.execute(sqlstm2);
		sql.close();
		
		startTestParametersSearch(sampleid); // refresh
	}
}

// 26/3/2010: to enable or disable certain buttons / input depend on user security level/group
void activateSecurity()
{
	// disable commit button , need level 3 to be able to commit folder
	dis_cmt = sechand.check_UsergroupAccess(useraccessobj.origid,SAMPREG_USERGROUP,SAMPREG_ACCESSLEVEL + 1);
	if(!dis_cmt) commit_butt.setDisabled(true);
}

void refreshSampleMarkingBox()
{
	startFolderSamplesSearch(folderno);
}

void doViewDoculinkPopup()
{
	// make sure we've some sampleid selected before showing the worksheet list
	if(folderjobs_lb.getSelectedIndex() == -1) return;
	
	foldern = folderjobs_lb.getSelectedItem().getLabel();
	
	//alert(foldern);

	documentLinkProp.global_eq_origid = foldern;
	documentLinkProp.refreshListbox.populateDocumentLinks(documentLinkProp.global_eq_origid, documentLinkProp.document_idprefix);

	// show CRUD buttons for admin
	if(useraccessobj.accesslevel == 9)
	{
		documentLinkProp.refreshListbox.showCrudButtons();
		documentLinkProp.refreshListbox.showAdminButtons();
	}

	doculink_popup.open(viewdoculinks_btn);
}

//-------- Test Package related ------

void showTestsForTestPackage(Div idiv, String itpo)
{
	Object[] tests_tp_lb_headers = {
	new listboxHeaderObj("Params",true),
	new listboxHeaderObj("LOR",true)
	};

	Listbox newlb = lbhandler.makeVWListbox(idiv, tests_tp_lb_headers, "tests_tp_lb", 5);

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	sqlstatem = "select stockmasterdetails.description, testpackage_items.lor from testpackage_items " +
	"left join stockmasterdetails on testpackage_items.mysoftcode = stockmasterdetails.id " +
	"where testpackage_items.testpackage_id=" + itpo + " order by testpackage_items.sorter";
	tp_recs = sql.rows(sqlstatem);
	sql.close();

	if(tp_recs.size() == 0) return;

	for(tpi : tp_recs)
	{
		ArrayList kabom = new ArrayList();
		testp = tpi.get("description");
		testp = (testp == null) ? "------" : testp;
		kabom.add(testp);
		kabom.add(tpi.get("lor"));
		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhandler.insertListItems(newlb,strarray,"false","");
	}
}

// doubleClicker for populateTestPackages()
class testpackageDoubleClick_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		//selitem = testpackages_lb.getSelectedItem();
		crampTestPackage(); // cramp tests from test-package into sample
	}
}

// onSelect listner for populateTestPackages()
class testpackageOnSelect_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = event.getReference();
		tporigid = lbhandler.getListcellItemLabel(selitem,0);
		showTestsForTestPackage(tp_tests_holder,tporigid);
	}
}

// Show test-packages linked to ar_code, if ar_code == "", show all
void populateTestPackages(Div idiv, String iarcode)
{
	Object[] testpackages_lb_headers = {
	new listboxHeaderObj("Origid",false),
	new listboxHeaderObj("Name",true),
	new listboxHeaderObj("LastUpdate",true)
	};

	Listbox newlb = lbhandler.makeVWListbox(idiv, testpackages_lb_headers, "testpackages_lb", 5);
	sqlstatem = "select origid,package_name,lastupdate from TestPackages where ar_code='" + iarcode + "' and deleted=0 order by package_name";

	if(iarcode.equals("")) // show all test-packages
		sqlstatem = "select origid,package_name,lastupdate from TestPackages where deleted=0 order by package_name";

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	tp_recs = sql.rows(sqlstatem);
	sql.close();

	if(tp_recs.size() == 0) return;
	newlb.setRows(10);
	newlb.addEventListener("onSelect", new testpackageOnSelect_Listener());

	for(tpi : tp_recs)
	{
		ArrayList kabom = new ArrayList();
		kabom.add(tpi.get("origid").toString());

		pckname = tpi.get("package_name");
		if(pckname.equals("")) pckname = "-undefined-";
		kabom.add(lbhandler.trimListitemLabel(pckname,30));

		kabom.add(tpi.get("lastupdate").toString().substring(0,10));

		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhandler.insertListItems(newlb,strarray,"false","");
	}
	
	dc_obj = new testpackageDoubleClick_Listener();
	lbhandler.setDoubleClick_ListItems(newlb, dc_obj);
}

// onSelect listner for showClientToTestPackage()
class tp2clients_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = event.getReference();
		ar_code = lbhandler.getListcellItemLabel(selitem,0);
		populateTestPackages(testpackages_div,ar_code);
	}

}

// Show test-packages linked to client - will show ALL
void showClientToTestPackage(Div idiv)
{
	Object[] tp2client_lb_headers = {
	new listboxHeaderObj("ar_code",false),
	new listboxHeaderObj("Customer",true),
	};

	Listbox newlb = lbhandler.makeVWListbox(idiv, tp2client_lb_headers, "tp2clients_lb", 5);

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	sqlstatem = "select distinct testpackages.ar_code, customer.customer_name from TestPackages " +
	"left join customer on testpackages.ar_code=customer.ar_code " +
	"where testpackages.deleted=0 order by customer.customer_name";
	custrecs = sql.rows(sqlstatem);
	sql.close();

	if(custrecs.size() == 0) return;
	newlb.setRows(20);
	newlb.addEventListener("onSelect", new tp2clients_Listener());
	
	for(dpi : custrecs)
	{
		ArrayList kabom = new ArrayList();
		kabom.add(dpi.get("ar_code"));
		compname = dpi.get("customer_name");
		compname = (compname == null) ? "--ALL--" : compname;
		kabom.add(compname);
		strarray = kiboo.convertArrayListToStringArray(kabom);
		lbhandler.insertListItems(newlb,strarray,"false","");
	}
}

// 03/08/2011: insert unitprice def in testpackage_items into jobtestparameters. testpackage_id stored too
void crampTestPackage()
{
	// make sure selected a sample-id
	isampid = sampleid.getValue();
	if(isampid.equals("")) return;

	this_sampidint = convertSampleNoToInteger(isampid).toString();

	// make sure selected a test package
	if(testpackages_lb.getSelectedIndex() == -1) return;

	testpack = testpackages_lb.getSelectedItem().getLabel(); // which test package selected

	// get list of test parameters (mysoftcode) as def in test-package
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	sqlst = "select mysoftcode,sorter,lor,bill,units,unitprice from TestPackage_Items where deleted=0 and testpackage_id=" + testpack;
	tp_items = sql.rows(sqlst);
	
	// 14/9/2010: get the last sorter num. from listbox
	lbindex = testparameters_lb.getItemCount()-1;
	lastsorter = 0;
	if(lbindex != -1)
	{
		lastitem = testparameters_lb.getItemAtIndex(lbindex);
		lastsorter = Integer.parseInt(lbhandler.getListcellItemLabel(lastitem,1));
	}

	if(tp_items != null)
	{
		for(tpi : tp_items)
		{
			tp_mysc = tpi.get("mysoftcode").toString();
			tp_sorter = (lastsorter + tpi.get("sorter")).toString();

			tp_lor = tpi.get("lor");
			tp_bill = tpi.get("bill");
			tp_units = tpi.get("units");
			tp_price = tpi.get("unitprice");

			//insertTestParameter(this_sampidint, tp_mysc); // need to optimize this.. calling the func will open/close sql-obj, waste processing
			
			sqlstatem = "insert into JobTestParameters (jobsamples_id,mysoftcode,starlimscode,status," + 
			"uploadtomysoft,uploadtolims,sorter,lor,bill,price,units,testpackageid,packageprice) values " + 
			"(" + this_sampidint + "," + tp_mysc + ",0,'DRAFT',0,0," + tp_sorter + ",'" + 
			tp_lor + "','" + tp_bill + "', 0.0, '" + tp_units + "'," + testpack + "," + tp_price + ")";

			sql.execute(sqlstatem);
		}
	}

	sql.close();
	startTestParametersSearch(sampleid); // refresh
}

void showTestPackages_clicker()
{
	showClientToTestPackage(tp2client_holder);
	testPackagePopup.open(testpackage_btn);
}
//-------- End of Test Package related ------

// 25/10/2010: set pkd_samples flag
void setPKDSamples_clicker()
{
	if(folderjobs_lb.getSelectedIndex() == -1 ) return; // nothing , return
	ifoldn = folderjobs_lb.getSelectedItem().getLabel();

	sqlstm = "select pkd_samples from jobfolders where folderno_str='" + ifoldn + "'";
	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;
	kkb = sql.firstRow(sqlstm);

	if(kkb != null)
	{
		pkdflag = kkb.get("pkd_samples");
		pkdtoggler = (pkdflag == 1) ? "0" : "1";
		sqlstm = "update jobfolders set pkd_samples=" + pkdtoggler + " where folderno_str='" + ifoldn + "'";
		sql.execute(sqlstm);
		startFolderJobsSearch(startdate,enddate,customer_tb,last_foldersearch_type); // refresh

		pkdmsg = ifoldn;
		pkdmsg += (pkdflag == 0) ? " : PKD flag set.." : " : PKD flag removed..";
		guihand.showMessageBox(pkdmsg);
	}
	sql.close();
}

// -------- search stock items, ALS version .. can be used in other mods -- remember the popup too
// knockoff from assign_tests_v2.zul
void autoAssignTestParametersBox(String imysoftcode)
{
	istockrec = samphand.getStockMasterDetails(imysoftcode);
	if(istockrec == null) return;

	istockcat = istockrec.get("Stock_Cat");
	igroupcode = istockrec.get("GroupCode");

	populateSectionColumn(section_column,istockcat);
	populateTestParametersColumn(testparameters_column,istockcat,igroupcode);

	// auto-select the thing in the listboxes.. tricky part
	divisionln = convertCodeToLongName(als_divisions,istockcat);
	lbhandler.matchListboxItems(division_stockcat_lb, divisionln);
	lbhandler.matchListboxItems(section_groupcode_lb, igroupcode);
	tscode = istockrec.get("ID").toString();
	lbhandler.matchListboxItems(tests_description_lb,tscode);

	//mysoft_testparams.setVisible(true); // 25/1/2011: just show the boxes
}

class itemsearchDoubleClick_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = founditems_lb.getSelectedItem();
		selected_test = lbhandler.getListcellItemLabel(selitem,0);
		autoAssignTestParametersBox(selected_test);
		//showStockItem_Metadata(selected_test);
		//newstockitem_btn.setLabel("Update test/sale item"); // change button label if item selected
		searchitem_popup.close();
	}
}

void searchStockItem_clicker()
{
Object[] finditems_lb_headers = {
	new dblb_HeaderObj("mysoftcode",false,"id",2),
	new dblb_HeaderObj("Stock.Code",true,"stock_code",1),
	new dblb_HeaderObj("Test",true,"description",1),
	new dblb_HeaderObj("Method",true,"description2",1),
	new dblb_HeaderObj("Division",true,"stock_cat",1),
	new dblb_HeaderObj("Section",true,"groupcode",1),
	};

	srchstr = kiboo.replaceSingleQuotes(itemsearch_text.getValue());
	if(srchstr.equals("")) return;

	sql = sqlhand.als_mysoftsql();
    if(sql == null) return;

	sqlstatem = "select id,stock_code,description,description2,stock_cat,groupcode from stockmasterdetails " + 
		"where item_type='Service Item' and nominal_code like '5%' " +
		"and (stock_code like '%" + srchstr + "%' or description like '%" + srchstr + "%' or description2 like '%" + srchstr + "%') " +
		"order by description" ;

	Listbox newlb = lbhandler.makeVWListbox_onDB(founditems_holder,finditems_lb_headers,"founditems_lb",5,sql,sqlstatem);
	sql.close();

	if(newlb.getItemCount() > 5) newlb.setRows(10);
	if(newlb.getItemCount() > 0)
	{
		dc_obj = new itemsearchDoubleClick_Listener();
		lbhandler.setDoubleClick_ListItems(newlb, dc_obj);
	}
}
// -------- ENDOF search stock items, ALS version .. can be used in other mods -- remember the popup too

// 25/1/2011: Sample matrix related - uses matrix_manager.zul to setup the matrix-subs

// Hardcoded for ALS .. change accordingly for other system
MATRIX_LOOKUP_ID = "41";

global_selected_matrixclass = "";
global_matrixclass_disptext = "";
global_selected_submatrix = "";

class submatrix_DC implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		// check if sample selected
		if(global_selected_sampleid.equals("")) return;

		selitem = submatrix_lb.getSelectedItem();
		idlookups = lbhandler.getListcellItemLabel(selitem,0);
		disptext = lbhandler.getListcellItemLabel(selitem,2);

		// store sample-matrix Lookup->idlookups
		sql = sqlhand.als_mysoftsql();
	    if(sql == null) return;
	    sqlstm = "update jobsamples set matrix=" + idlookups + " where origid=" + global_selected_sampleid;
	    sql.execute(sqlstm);
	    sql.close();

	    samp_matrix_tb.setValue(disptext);
	    matrix_popup.close();
	}
}

void showSubMatrix(String theparent, String parentdisptext)
{
	Object[] submatrixclass_lb_headers =
	{
	new listboxHeaderObj("idlookups",false),
	new listboxHeaderObj("Ref.Code",true),
	new listboxHeaderObj("Sub.Matrix",true),
	};

	submatrix_caption.setLabel(parentdisptext);
	Listbox newlb = lbhandler.makeVWListbox(sub_matrix_div, submatrixclass_lb_headers, "submatrix_lb", 5);
	sql = sqlhand.als_mysoftsql();
    if(sql == null) return;

	expstring = " and expired=0";
	// Admin can see deleted/expired item
	if(useraccessobj.accesslevel == 9) expstring = "";

	sqlstm = "select idlookups,name,disptext,expired from Lookups where myparent='" + theparent + "'" + expstring;
	mcrecs = sql.rows(sqlstm);
	sql.close();

	if(mcrecs.size() == 0) return;
	newlb.setRows(15);

	for(dpi : mcrecs)
	{
		ArrayList kaboom = new ArrayList();
		kaboom.add(dpi.get("idlookups").toString());
		kaboom.add(dpi.get("name"));
		expkk = (dpi.get("expired") == 0) ? "" : "[DEL] ";
		kaboom.add(expkk + dpi.get("disptext"));
		strarray = kiboo.convertArrayListToStringArray(kaboom);
		lbhandler.insertListItems(newlb,strarray,"false","");
	}
	
	dc_obj = new submatrix_DC();
	lbhandler.setDoubleClick_ListItems(newlb, dc_obj);
}

class matrixclasslb_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = event.getReference();
		global_selected_matrixclass = lbhandler.getListcellItemLabel(selitem,0);
		global_matrixclass_disptext = lbhandler.getListcellItemLabel(selitem,2);
		showSubMatrix(global_selected_matrixclass,global_matrixclass_disptext);
	}
}

void showMatrixClass()
{
	Object[] matrixclass_lb_headers = {
	new listboxHeaderObj("idlookups",false),
	new listboxHeaderObj("name",false),
	new listboxHeaderObj("M.Group",true),
	};

	// if there's a submatrix listbox shown earlier, remove it and reset other vars
	if(sub_matrix_div.getFellowIfAny("submatrix_lb") != null)
	{
		kabing = sub_matrix_div.getFellow("submatrix_lb");
		kabing.setParent(null);
		submatrix_caption.setLabel("Sub-Matrix");
		global_selected_matrixclass = "";
		global_matrixclass_disptext = "";
	}

	Listbox newlb = lbhandler.makeVWListbox(matrixclass_div, matrixclass_lb_headers, "matrixclass_lb", 15);
	sql = sqlhand.als_mysoftsql();
    if(sql == null) return;

	expstring = " and expired=0";
	// Admin can see deleted/expired item
	if(useraccessobj.accesslevel == 9) expstring = "";

	sqlstm = "select idlookups,name,disptext,expired from Lookups where myparent='" + MATRIX_LOOKUP_ID + "'" + expstring;
	mcrecs = sql.rows(sqlstm);
	sql.close();

	if(mcrecs.size() == 0) return;
	newlb.addEventListener("onSelect", new matrixclasslb_Listener());
	
	for(dpi : mcrecs)
	{
		ArrayList kaboom = new ArrayList();
		kaboom.add(dpi.get("idlookups").toString());
		kaboom.add(dpi.get("name"));
		expkk = (dpi.get("expired") == 0) ? "" : "[DEL] ";
		kaboom.add(expkk + dpi.get("disptext"));
		strarray = kiboo.convertArrayListToStringArray(kaboom);
		lbhandler.insertListItems(newlb,strarray,"false","");
	}
}

void assignMatrix()
{
	if(global_selected_sampleid.equals("")) return;
	showMatrixClass();
	matrix_popup.open(samp_matrix_tb);
}

// END OF - Sample matrix related - uses matrix_manager.zul to setup the matrix-subs

// Chopped from browsejobs.zul
void changeShareSample_clicker()
{
	if(!lbhandler.check_ListboxExist_SelectItem(folderjobs_div,"folderjobs_lb")) return;
	jfold = folderjobs_lb.getSelectedItem().getLabel();
	extfold = extractFolderNo(jfold);
	extfold = Integer.parseInt(extfold).toString();

	newss = share_sample2.getSelectedItem().getLabel();

	sql = sqlhand.als_mysoftsql();
    if(sql == null) return;
    sqlstm = "update JobFolders set share_sample='" + newss + "' where origid=" + extfold;
    sql.execute(sqlstm);
    sql.close();

    startFolderJobsSearch(startdate,enddate,customer_tb,1); // refresh
}

void runSampleMatrixConfig()
{
	wnid = kiboo.makeRandomId("kaboom");
	guihand.globalActivateWindow(mainPlayground,"miscwindows","qc/matrix_manager.zul",wnid,"",useraccessobj);	
}

// 18/03/2011 : memorize assigned tests as test-package - Ima's idea
void memorizeTestPackage()
{
	if(global_selected_foldernum.equals("")) return;

	compname = getCompanyName(global_selected_arcode);
	mt_companyname.setValue(compname);

	memorizeTests_popup.open(memorizetests_btn);
}

void realMemorizeTestPackage()
{
	memorizeTests_popup.close();
	if(testparameters_div.getFellowIfAny("testparameters_lb") == null) return;

	packagename = kiboo.replaceSingleQuotes(mt_package_name.getValue()).trim();
	if(packagename.equals("")) return;
	if(!isUniqTestPackageName(packagename)) { guihand.showMessageBox("Test package name already exist"); return; }

	todaydate = kiboo.getDateFromDatebox(hiddendatebox);
	createNewTestPackage_packname(todaydate, global_selected_arcode, useraccessobj.username, packagename);

	sql = sqlhand.als_mysoftsql();
    if(sql == null) return;
    sqlstm = "select origid from testpackages where package_name='" + packagename + "' and ar_code='" + global_selected_arcode + "'";
    tprec = sql.firstRow(sqlstm);

	if(tprec != null)
	{
		tporigid = tprec.get("origid").toString();
		allitems = testparameters_lb.getItems();
		for(dpi : allitems)
		{
			themysoftc = lbhandler.getListcellItemLabel(dpi,3);
			if(!themysoftc.equals("0"))
			{
				thesorter = lbhandler.getListcellItemLabel(dpi,1);
				sqlstatem = "insert into TestPackage_Items (mysoftcode,testpackage_id,deleted,sorter,lor,bill,units) values " + 
					"(" + themysoftc + "," + tporigid + ",0," + thesorter + ",'','YES','')";
				sql.execute(sqlstatem);
			}
		}
	}

	sql.close();
}

// Show folders audit-trail in popup
// Can be used in other modules - remember the pop-up
void showFolderAuditTrail()
{
	Object[] audtrails_lb_headers = {
	new dblb_HeaderObj("origid",false,"origid",2),
	new dblb_HeaderObj("Date",true,"datecreated",3),
	new dblb_HeaderObj("Username",true,"username",1),
	new dblb_HeaderObj("Actions",true,"audit_notes",1),
	};

	if(global_selected_foldernum.equals("")) return;

	sql = sqlhand.als_mysoftsql();
    if(sql == null) return;
	sqlstm = "select origid,username,audit_notes,datecreated from elb_systemaudit where linking_code='" + global_selected_foldernum + "' order by datecreated";
	Listbox newlb = lbhandler.makeVWListbox_onDB(audittrails_holder,audtrails_lb_headers,"auditrails_lb",10,sql,sqlstm);
	sql.close();
	audittrail_caption.setLabel("Audit trails: " + global_selected_foldernum);
	audittrail_popup.open(audittrail_btn);
}

]]>
</zscript>

<!-- Memorize assigned tests as test-package -->
<popup id="memorizeTests_popup">
<groupbox mold="3d" width="400px">
<caption label="Memorize tests-assigned as test-package" />
<grid>
	<columns>
		<column label="" />
		<column label="" />
	</columns>
	<rows>
	<row>
		<label value="Company" style="font-size:9px" />
		<label id="mt_companyname" style="font-size:9px" />
	</row>
	<row>
		<label value="Package name" style="font-size:9px" />
		<textbox id="mt_package_name" style="font-size:9px" width="180px" />
	</row>
	</rows>
</grid>
</groupbox>
<hbox>
<button label="Memorize" style="font-size:9px" onClick="realMemorizeTestPackage()" />
<button label="Close" style="font-size:9px" onClick="memorizeTests_popup.close()" />
</hbox>
</popup>
<!-- end of Memorize assigned tests as test-package -->

<!-- Folders audit-trail popup -->
<popup id="audittrail_popup">
<groupbox mold="3d" width="500px">
<caption id="audittrail_caption" label="Audit trails" />
<div id="audittrails_holder" />
</groupbox>
<button label="Close" style="font-size:9px" onClick="audittrail_popup.close()" />
</popup>
<!-- end of Folders audit-trail popup -->

<!-- sample matrix popup -->
<popup id="matrix_popup">
<groupbox mold="3d">
<caption label="Sample matrix selector" />
<hbox>
<groupbox width="100px">
<caption label="Matrix group"/>
<div id="matrixclass_div" />
</groupbox>

<groupbox width="300px">
<caption id="submatrix_caption" label="Sub-Matrix"/>
<div id="sub_matrix_div" />
</groupbox>
</hbox>
</groupbox>
<separator height="3px" />
<button label="Close" style="font-size:9px" onClick="matrix_popup.close()" />
</popup>
<!-- end of sample matrix popup -->

<!-- stock items search popup -->
<popup id="searchitem_popup">
<groupbox mold="3d" width="600px" style="padding:3px">
	<caption label="Search Items.." />
	<hbox>
		<label value="Search item" style="font-size:9px" />
		<textbox id="itemsearch_text" style="font-size:9px" width="200px" />
		<button label="Find" style="font-size:9px" onClick="searchStockItem_clicker()" />
	</hbox>
	<separator height="3px" />
	<div id="founditems_holder" />
</groupbox>
</popup>
<!-- end of stock items search popup -->

<!-- Test Package selection popup -->
<popup id="testPackagePopup">
<groupbox width="600px" >
<caption label="Test Packages" />
	<hbox>
		<groupbox mold="3d" width="310px" >
			<caption label="Client" />
			<div id="tp2client_holder" />
		</groupbox>
		<vbox>
			<groupbox mold="3d">
				<caption label="Packages" />
				<div id="testpackages_div" />
			</groupbox>
			<groupbox>
				<caption label="Tests" />
				<div id="tp_tests_holder" />
			</groupbox>
		</vbox>
	</hbox>
</groupbox>
<separator height="3px" />
<hbox>
<!--	<button label="Get test package" onClick="crampTestPackage()" style="font-size:9px" /> -->
<!--	<button label="Refresh" onClick="populateTestPackages(testpackages_div)" style="font-size:9px" /> -->
	<button label="Close" onClick="testPackagePopup.close()" style="font-size:9px" />
</hbox>
</popup>
<!-- end of Test package selection popup -->

<popup id="doculink_popup">
<groupbox width="400px">
	<include id="linkingdoc_include" src="alsglobal/doculink.zul"/>
	<separator height="5px" />
	<hbox>
		<button label="Close" onClick="doculink_popup.close()" style="font-size:9px" />
	</hbox>
</groupbox>
</popup>

<div width="1200px">
<panel id="assign_tests_panel" title="Assign Test Parameters v.4.1" border="normal" collapsible="true" closable="true" >
<panelchildren>
<!-- <button label="X Close panel" style="font-size:9px" onClick="assign_tests_panel.setParent(null)" /> -->
<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" onCreate="self.value = new Date()" />
<div style="padding:2px" >

<hbox>
<groupbox mold="3d" width="630px">
	<hbox>
		<label value="Start date" style="font-size:9px" />
		<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" onCreate="self.value = new Date()" />
		<label value="End date" style="font-size:9px" />
		<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" onCreate="self.value = new Date()" />
		<label value="Customer" style="font-size:9px" />
		<textbox id="customer_tb" width="200px" style="font-size:9px" />
		<button label="Search" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,1)" style="font-size:9px" />
	</hbox>
	<hbox>
		<label value="By folder" style="font-size:9px" />
		<textbox id="byfolder_tb" style="font-size:9px" />
		<button label="Dig" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,2)" style="font-size:9px" />
	</hbox>

	<separator height="3px" />
	<div id="folderjobs_div" />
	<separator height="3px" />

	<div id="folder_buttons_div" visible="false">
		<label value="Reset Share-Sample" style="font-size:9px" />
		<listbox id="share_sample2" mold="select" style="font-size:9px" />
		<zscript>
			lbhandler.populateDropdownListbox(share_sample2,sharesamplechop);
		</zscript>
		<button label="Change" style="font-size:9px" onClick="changeShareSample_clicker()" />

		<button id="viewdoculinks_btn" label="View COC/PO/Documents" style="font-size:9px" onClick="doViewDoculinkPopup()" />
		<button label="Print SRA" onClick="printSRA_Wrapper()" style="font-size:9px" />
		<button label="Set PKD Samples" style="font-size:9px" onClick="setPKDSamples_clicker()" />
		<separator height="3px" />
		<button id="audittrail_btn" label="Audit trail" style="font-size:9px" onClick="showFolderAuditTrail()" />
		<button id="commit_butt" label="COMMIT folder/job" onClick="commitFolder()" style="font-size:10px;font-weight:bold" />
	</div>

	<!-- to keep track of things -->
	<textbox id="folderno" visible="false" />
	<textbox id="sampleid" visible="false" />
	<textbox id="testparamid" visible="false" />
</groupbox>

<groupbox mold="3d">
	<hbox>
		<button label="Copy Tests to Next" onClick="copyTestsToNext()" style="font-size:9px" />
		<button label="Dup Tests All" onClick="dupAllTests()" style="font-size:9px" />
		<button label="Print labels" onClick="printSampleLabels()" style="font-size:9px" />
	</hbox>
	<hbox>
		<button label="Copy sampmarking to next" onClick="copySampleMarkingToNext()" style="font-size:9px" />
		<button label="Dup SampMarking" onClick="dupSampleMarking()" style="font-size:9px" />
		<button label="Refresh" onClick="refreshSampleMarkingBox()" style="font-size:9px" />
	</hbox>

	<separator height="3px" />
	<div id="samples_div" />
	<separator height="3px" />

	<grid>
		<rows>
		<row>
			<label value="Sample marking" style="font-size:9px" />
			<textbox id="sampmark_tb" multiline="true" height="30px" width="99%" style="font-size:9px" />
			<button label="Update" onClick="updateSampleMarking(sampmark_tb,sampnotes_tb)" style="font-size:9px" />
		</row>
		<row spans=",2" id="asmastuff" visible="false">
			<label value="ASMA-ID" style="font-size:9px" />
			<hbox>
				<textbox id="asma_id" width="50px" style="font-size:9px" />
				<label value="Station" style="font-size:9px" />
				<textbox id="asma_station" width="50px" style="font-size:9px" />
			</hbox>
		</row>
		<row>
			<label value="Sample description" style="font-size:9px" />
			<textbox id="sampnotes_tb" multiline="true" height="30px" width="99%" style="font-size:9px" />
			<button label="Matrix config" style="font-size:9px" onClick="runSampleMatrixConfig()" />
		</row>
		<row>
			<label value="Sample matrix" style="font-size:9px" />
			<textbox id="samp_matrix_tb" width="250px" style="font-size:9px" />
			<button id="assignmatrix_btn" label="Assign matrix" style="font-size:9px" onClick="assignMatrix()" />
		</row>
		</rows>
	</grid>
</groupbox>

</hbox>

<hbox>
<groupbox mold="3d" width="450px">
	<caption label="Folders::Samples::Tests" />
	<hbox>
	<button label="Add test" onClick="createNewTestParameter()" style="font-size:9px" />
	<button label="Remove test" onClick="deleteTestParameter()" style="font-size:9px" />
	<button id="testpackage_btn" label="Test package" style="font-size:9px" onClick="showTestPackages_clicker()" />
	<button id="memorizetests_btn" label="Memorize tests" style="font-size:9px" onClick="memorizeTestPackage()" />
	<button id="searchitem_btn" label="Search test" style="font-size:9px" onClick="searchitem_popup.open(searchitem_btn)" />
	</hbox>
	<separator height="3px" />

	<div id="testparameters_div" />
	<separator height="3px" />
	<hbox>
		<button label="Move up" style="font-size:9px" onClick="moveTestItem_clicker(1)" />
		<button label="Move down" style="font-size:9px" onClick="moveTestItem_clicker(2)" />
	</hbox>
</groupbox>

<groupbox mold="3d">
	<label value="Division" />
	<div id="division_column" />
</groupbox>

<groupbox mold="3d">
	<label value="Section" />
	<div id="section_column" />
</groupbox>

<groupbox mold="3d">
	<label value="Test parameters" />
	<div id="testparameters_column" />
</groupbox>

</hbox>

</div>

<zscript>
<![CDATA[

//startFolderJobsSearch(startdate,enddate,customer_tb,1);
// show empty samples listbox when loaded
//startFolderSamplesSearch(folderno);
//populateDivisionColumn(division_column);

testspanel = new TestsPanel(division_column,"",section_column,"",testparameters_column,"");
testspanel.populateDivisionColumn();
testspanel.testOnClicker = new ALSTestParametersLB_Listener();

//makeTestParametersListbox(testparameters_div);
Listbox newlb = lbhandler.makeVWListbox(testparameters_div, testparameterssearch_lb_headers, "testparameters_lb",5);
newlb.addEventListener("onSelect", new TestParams_Listener());

activateSecurity();

documentLinkProp.document_idprefix = "DOCS";
setDocumentLink_DynamicProperty(linkingdoc_include, documentLinkProp, useraccessobj);

]]>
</zscript>
</panelchildren>
</panel>
</div>
</zk>
