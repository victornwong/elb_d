<?xml version="1.0" encoding="UTF-8"?>
<?page id="browse_folder_jobs"?>
<zk>
<zscript src="../alsglobal/alsglobaldefs.zs" />
<zscript src="../alsglobal/alsglobalfuncs.zs" />
<zscript src="../alsglobal/alsglobal_guifuncs.zs" />
<zscript src="../alsglobal/alsglobal_sqlfuncs.zs" />
<zscript src="../alsglobal/securityfuncs.zs" />
<zscript src="../alsglobal/samplereg_funcs.zs" />
<zscript src="../alsglobal/doculink_funcs.zs" />
<zscript src="../alsglobal/emailfuncs.zs" />
<zscript>
<![CDATA[
/*
Title: Folders browser for all users to find stuff
Written by: Victor Wong

**NOTES**
30/9/2010: added search by folder-number - added folder->samples->tests breakdown tree
7/1/2011: added func to allow user to change shared-sample flag

*/

import java.util.*;
import java.text.*;
import java.io.*;

import groovy.sql.Sql;
import org.zkoss.zk.ui.*;
import org.zkoss.util.media.AMedia;

myincludeid = Executions.getCurrent().getParameter("myid");
useraccessobj = getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE);

// check usergroup access - no access, just close the panel.. min. level 1 can browser through the folder/job list
boolean can_access = check_UsergroupAccess(useraccessobj.origid,SAMPREG_USERGROUP,1);

if(!can_access)
{
	showAccessDenied_Box(useraccessobj);
	globalClosePanel(myincludeid);
}

last_foldersearch_type = 0;
selected_arcode = "";
selected_folderno = "";

documentLinkObj documentLinkProp = new documentLinkObj();

void localPlayDriller()
{
	if(folderjobs_lb.getSelectedIndex() == -1) return;
	ifolderno = folderjobs_lb.getSelectedItem().getLabel();
	theparam = "folderno=" + ifolderno;
	uniqwindowid = makeRandomId("ldx");
	globalActivateWindow("miscwindows","samplereg/folderjobs_driller.zul", uniqwindowid, theparam, useraccessobj);
}

// onSelect event for makeALSTestParametersListbox()
class folderjobslb_Listener implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		selitem = event.getReference();
		selected_folderno = getListcellItemLabel(selitem,0);
		customern = getListcellItemLabel(selitem,5);

		selected_arcode = getListcellItemLabel(selitem,9);
		folderbreakdown.setLabel(selected_folderno + " : " + customern);

		// 30/9/2010: let user view the folder->samples->tests tree
		folderno_str = convertFolderNoToInteger(selected_folderno).toString();
		
		// 29/11/2010: check how many samples, too many, browser crash
		numsamp = Integer.parseInt(getListcellItemLabel(selitem,4));
		if(numsamp > 100)
			showMessageBox("Too many samples, will not show test parameters. Browser will crash!!");
		else
			populateSamplesTestParameters(sampletests_tree,folderno_str);

		// show the documents linked to the folder
		showDocumentsList(selected_folderno);
		
		// 7/1/2011: matchpick the share-sample selector
		thess = getListcellItemLabel(selitem,11);
		matchListboxItems(share_sample2, thess);
	}
}

Object[] folders_lb_headers = {
	new listboxHeaderObj("FolderNo",true),
	new listboxHeaderObj("RecvDate",true),
	new listboxHeaderObj("TAT",true),
	new listboxHeaderObj("DueDate",true),
	new listboxHeaderObj("Samples",true),
	new listboxHeaderObj("Customer",true),
	new listboxHeaderObj("Status",true),
	new listboxHeaderObj("Lab.Stat",true),
	new listboxHeaderObj("Brnch",true),
	new listboxHeaderObj("arcode",false),
	new listboxHeaderObj("PKD",true),
	new listboxHeaderObj("Share",true),
	};
	
// Do the search and populate listbox
// 25/10/2010: added pkd_samples flag display
void startFolderJobsSearch(Datebox startd, Datebox endd, Textbox icustomer_tb, int itype)
{
	sdate = getDateFromDatebox(startd);
    edate = getDateFromDatebox(endd);
	cnm = icustomer_tb.getValue();
	last_foldersearch_type = itype;
	
	if(sdate == null || edate == null)
    {
        showMessageBox("Please specify start and end date for search");
        return;
    }

    sql = als_mysoftsql();
    if(sql == NULL) return;
	
	// 29/3/2010: check branch
	branch_str = "";

	ibranch = useraccessobj.branch;
	// user with ALL or SA for branch can see evertything..
	if(!ibranch.equals("ALL") && !ibranch.equals("SA"))
	{
		branch_str = "and branch='" + ibranch + "' ";
	}

	sqlstatem = "select top 200 origid,branch,datecreated,tat,duedate,ar_code,folderstatus,folderno_str,labfolderstatus,pkd_samples,share_sample from JobFolders " + 
	"where datecreated between '" + sdate + "' and '" + edate + "'" + 
	" and deleted=0 and folderstatus in ('" + FOLDERCOMMITED + "','" + FOLDERLOGGED + "') " + branch_str + " order by datecreated desc";
	
	// 25/3/2010: new select cmd to search based on s.date, e.date and customer-name - req by Zainab
	if(!cnm.equals(""))
	{
		xcnm = replaceSingleQuotes(cnm); // play safe
		sqlstatem = "select top 200 jobfolders.origid, jobfolders.ar_code, jobfolders.datecreated, jobfolders.folderstatus, jobfolders.branch," + 
			"jobfolders.duedate, jobfolders.tat, jobfolders.folderno_str, jobfolders.labfolderstatus, " + 
			"jobfolders.pkd_samples, jobfolders.share_sample, customer.ar_code,customer.customer_name " +
			"from jobfolders left join customer " +
			"on customer.ar_code = jobfolders.ar_code where " +
			"jobfolders.datecreated between '" + sdate + "' and '" + edate + "'" + 
			"and customer.customer_name like '%" + xcnm + "%' " +
			"and deleted=0 and folderstatus in ('" + FOLDERCOMMITED + "','" + FOLDERLOGGED + "') " +
			branch_str;
	}
	
	// 30/9/2010: search by folder number
	if(itype == 2)
	{
		flst = replaceSingleQuotes(byfolder_tb.getValue());
		if(!flst.equals(""))
		{
			sqlstatem = "select top 200 origid,branch,datecreated,duedate,ar_code,folderstatus,folderno_str,tat,labfolderstatus,pkd_samples,share_sample from JobFolders " + 
				"where deleted=0 and folderstatus in ('" + FOLDERCOMMITED + "','" + FOLDERLOGGED + "') " + branch_str + 
				" and folderno_str like '%" + flst + "%' order by datecreated desc";
		}
	}

	// 1/10/2010: by sample-ID - underscore in select = match any 1 char (9 in total, ALSM12345)
	if(itype == 3)
	{
		smpid = replaceSingleQuotes(bysampleid_tb.getValue());
		if(!smpid.equals(""))
		{
			sqlstatem = "select top 10 count(jobfolders.origid) as jobcount, jobfolders.origid,jobfolders.branch,jobfolders.datecreated,jobfolders.duedate," + 
			"jobfolders.ar_code,jobfolders.folderstatus,jobfolders.folderno_str,jobfolders.tat,jobfolders.labfolderstatus,jobfolders.pkd_samples, jobfolders.share_sample from JobFolders " + 
			"left join jobsamples on jobsamples.jobfolders_id = jobfolders.origid " +
			"where jobfolders.deleted=0 and jobfolders.folderstatus in ('" + FOLDERCOMMITED + "','" + FOLDERLOGGED + "') " + branch_str + 
			" and jobsamples.sampleid_str like '_________%" + smpid + "%' " +
			"group by jobfolders.origid,jobfolders.branch,jobfolders.datecreated,jobfolders.duedate," + 
			"jobfolders.ar_code,jobfolders.folderstatus,jobfolders.folderno_str,jobfolders.tat,jobfolders.labfolderstatus,jobfolders.pkd_samples, jobfolders.share_sample " +
			"order by jobfolders.datecreated desc";
		}
	}

	// 29/11/2010: by share-sample thing
	if(itype == 4)
	{
		shsmp = share_sample.getSelectedItem().getLabel();
		sqlstatem = "select top 200 origid,branch,datecreated,duedate,ar_code,folderstatus,folderno_str,tat,labfolderstatus,pkd_samples,share_sample from JobFolders " + 
			"where deleted=0 and folderstatus in ('" + FOLDERCOMMITED + "','" + FOLDERLOGGED + "') " + branch_str +
			" and datecreated between '" + sdate + "' and '" + edate + "'" + 
			" and share_sample='" + shsmp + "' order by datecreated desc";
	}

	// 29/11/2010: by PKD sample
	if(itype == 5)
	{
		sqlstatem = "select top 200 origid,branch,datecreated,duedate,ar_code,folderstatus,folderno_str,tat,labfolderstatus,pkd_samples,share_sample from JobFolders " + 
			"where deleted=0 and folderstatus in ('" + FOLDERCOMMITED + "','" + FOLDERLOGGED + "') " + branch_str +
			" and datecreated between '" + sdate + "' and '" + edate + "'" + 
			" and pkd_samples=1 order by datecreated desc";
	}

	tlist = sql.rows(sqlstatem);
	sql.close();

	reccount = tlist.size();
	Listbox newlb = makeVWListboxWithFooter(folders_searchdiv, folders_lb_headers, "folderjobs_lb", 10, reccount.toString() + " folders");
	newlb.addEventListener("onSelect", new folderjobslb_Listener());

	if(reccount == 0) return;

	newlb.setRows(25);
	total_numsamples = 0;

	for(ilist : tlist)
	{
		ArrayList kabom = new ArrayList();

		ifolderno = ilist.get("origid");
		db_folderno_str = ilist.get("folderno_str");

		kabom.add(db_folderno_str);
		kabom.add(ilist.get("datecreated").toString().substring(0,10));

		kabom.add(ilist.get("tat") + " day(s)");
		kabom.add(ilist.get("duedate").toString().substring(0,10));

		// 27/2/2010: get number of samples for this folder
		numsamples = getNumberOfSamples_InFolder(ifolderno);
		kabom.add(numsamples.toString());

		total_numsamples = total_numsamples + numsamples;

		// get customer name from ar_code - will be slow if alot, scan 1 by 1
		iar_code = ilist.get("ar_code");
		iar_code = iar_code.toUpperCase().trim();
		icompanyname = "Undefined";

		if(!iar_code.equals(""))
		{
			// 11/6/2010: hardcode ar_code CASH and CASH USD in mysoft. Load customer info from table CashSales_CustomerInfo
			if(iar_code.equals("CASH") || iar_code.equals("CASH USD"))
			{
				csrec = getCashSalesCustomerInfo_Rec(db_folderno_str); // get rec based on folder no
				icompanyname = "CshAct: Undefined";
				if(csrec != null) icompanyname = "CshAct: " + csrec.get("customer_name");
			}
			else
				icompanyname = getCompanyName(iar_code);
		}

		kabom.add(trimListitemLabel(icompanyname,45));
		kabom.add(ilist.get("folderstatus"));
		kabom.add(ilist.get("labfolderstatus"));
		kabom.add(ilist.get("branch"));
		kabom.add(iar_code);

		pkdwop = "---";
		if(ilist.get("pkd_samples") != null) pkdwop = (ilist.get("pkd_samples") == 0) ? "---" : "-Y-";

		kabom.add(pkdwop);
		
		sharesmp = checkNullString_RetWat(ilist.get("share_sample"),"-----");
		if(sharesmp.equals("")) sharesmp = "-----";
		kabom.add(sharesmp);

		strarray = convertArrayListToStringArray(kabom);
		insertListItems(newlb,strarray,JOBFOLDERS_PREFIX);
	}

	// 8/3/2010: hardcoded numofsamples_lbl def in UI section. To show total number of samples collected
	numofsamples_lbl.setValue("Total samples : " + total_numsamples.toString());

} // end of startFolderJobsSearch()

void doViewDoculinkPopup()
{
	if(folderjobs_lb.getSelectedIndex() == -1) return;
	foldern = folderjobs_lb.getSelectedItem().getLabel();
	documentLinkProp.global_eq_origid = foldern;
	documentLinkProp.refreshListbox.populateDocumentLinks(documentLinkProp.global_eq_origid, documentLinkProp.document_idprefix);

	// show CRUD buttons for admin
	if(useraccessobj.accesslevel == 9)
	{
		documentLinkProp.refreshListbox.showCrudButtons();
		documentLinkProp.refreshListbox.showAdminButtons();
	}
	doculink_popup.open(viewdoculinks_btn);
}

// 11/8/2010: to show cash-account details, stored in a diff table mah..
void showCashAccountDetails_clicker()
{
	if(folderjobs_lb.getSelectedIndex() == -1) return;
	foldern = folderjobs_lb.getSelectedItem().getLabel();

	csrec = getCashSalesCustomerInfo_Rec(foldern);
	if(csrec == null)
	{
		showMessageBox("Sorry.. cannot find cash-account customer details");
		return;
	}
	
	ca_customer_name_tb.setValue(csrec.get("customer_name"));
	ca_contact_person1_tb.setValue(csrec.get("contact_person1"));
	ca_address1_tb.setValue(csrec.get("address1"));
	ca_address2_tb.setValue(csrec.get("address2"));
	ca_city_tb.setValue(csrec.get("city"));
	ca_zipcode_tb.setValue(csrec.get("zipcode"));
	ca_state_tb.setValue(csrec.get("state"));
	ca_country_tb.setValue(csrec.get("country"));
	ca_telephone_tb.setValue(csrec.get("telephone"));
	ca_fax_tb.setValue(csrec.get("fax"));
	ca_email_tb.setValue(csrec.get("email"));

	cashaccount_details_Popup.open(showcashacct_btn);
}

// Populate tree with sampleID -> tests
// 29/11/2010: put limit 100 samples rec to process, else browser crash!!
void populateSamplesTestParameters(Tree itree, String ifolderno)
{
	sql = als_mysoftsql();
	if(sql == null) return;

	// get all sample IDs for folderno
	// 4/3/2010: sql statement for admin login - can see even deleted samples

	sqlstatem = "select top 100 origid,deleted,sampleid_str,samplemarking from " + JOBSAMPLES_TABLE + " where jobfolders_id=" + ifolderno + " and deleted=0 order by sampleid_str asc";

	if(useraccessobj.accesslevel > 8)
		sqlstatem = "select top 100 origid,deleted,sampleid_str,samplemarking from " + JOBSAMPLES_TABLE + " where jobfolders_id=" + ifolderno + " order by sampleid_str asc";

	allsampleids = sql.rows(sqlstatem);

	Treechildren tocheck = itree.getTreechildren();
	if(tocheck != null)	tocheck.setParent(null);

	if(allsampleids != null && allsampleids.size() != 0)
	{
		// create a new treechildren for the tree
		Treechildren mychildren = new Treechildren();
		mychildren.setParent(itree);

		String[] strarray = new String[2];

		// loop through each sample IDs and get tests
		for(eachsampleid : allsampleids)
		{
			sdelstr = (eachsampleid.get("deleted") == 1) ? " [del]" : "";

			sampleidstr = eachsampleid.get("sampleid_str") + sdelstr;
			//sampleidstr = padZeros5(eachsampleid.get("origid"));
			sampleidno = eachsampleid.get("origid");
			samplemark = eachsampleid.get("samplemarking");

			// if sample id str in table ain't set.. set it. old codes didn't update the sample id str properly
			if(sampleidstr.equals(""))
			{
				sampleidstr = param_folderno + padZeros5(sampleidno); // param_folderno is global, def at top

				// 27/2/2010: update sampleid_str field incase of old codes never do it
				sqls3 = "update " + JOBSAMPLES_TABLE + " set sampleid_str='" + sampleidstr + "' where origid=" + sampleidno.toString();
				sql.execute(sqls3);
			}

			Treeitem titem = insertTreeLeaf(mychildren, sampleidstr, "font-weight:bold; background:#AACC66; color:#333333");

			// get tests assigned for the sample-id

			sqlstatem2 = "select mysoftcode from " + JOBTESTPARAMETERS_TABLE + " where jobsamples_id=" + sampleidno.toString();
			teststosampleid = sql.rows(sqlstatem2);

			if(teststosampleid != null)
			{
				Treechildren newone = new Treechildren();
				newone.setParent(titem);

				// insert sample marking as leaf if available
				if(!samplemark.equals(""))
					insertTreeLeaf(newone, "SM: " + samplemark, "font-size:9px; background:#4466bb; color:#ffffff");

				// loop through all the tests assigned and put them as leafs
				for(eacht2s : teststosampleid)
				{
					mysoftcode = eacht2s.get("mysoftcode").toString();

					stockrec = getStockMasterDetails(mysoftcode);
					testdesc = "-Undefined-";

					if(stockrec != null)
						//testdesc = stockrec.get("Description") + " (" + stockrec.get("Description2") + ")" ;
						testdesc = stockrec.get("Description");

					testdesc = trimListitemLabel(testdesc,45);

					// insertTreeLeaf(newone,testdesc,"font-size:9px");
					strarray[0] = testdesc;

					// get result from Chemistry_Results
					resrec = getLatestResult(sampleidstr, mysoftcode);
					finalresult = "WIP";

					restyle = "font-size:9px";

					if(resrec != null)
					{
						finalres = resrec.get("Final");
						if(finalrec != null)
						{
							if(!resrec.get("Final").equals(""))
							{
								resunit = resrec.get("Result_Unit");
								resunit = (resunit == null) ? "" : resunit;
								finalresult = resrec.get("Final") + " " + resunit;
							}
							//finalresult = "RES";
						}
					}

					strarray[1] = finalresult;
					insertTreeLeaf_Multi(newone, strarray, restyle);
				}
			}
		}
	}
	sql.close();

} // end of populateSamplesTestParameters()

void showDocumentsList(String selected_folderno)
{
	Object[] documentLinks_lb_headers = {
	new dblb_HeaderObj("origid",false,"origid",2),
	new dblb_HeaderObj("Title",true,"file_title",1),
	new dblb_HeaderObj("D.Created",true,"datecreated",3),
	new dblb_HeaderObj("Owner",true,"username",1),
	};

	duclink = "DOCS" + selected_folderno;

	ds_sql = als_DocumentStorage();
	if(ds_sql == null) return;
	sqlstm = "select origid,file_title,datecreated,username from DocumentTable " +
	"where docu_link='" + duclink + "' and deleted=0";

	if(useraccessobj.accesslevel == 9) // admin can send everything..
	{
		sqlstm = "select origid,file_title,datecreated,username from DocumentTable " +
		"where docu_link='" + duclink + "' ";
	}

	Listbox newlb = makeVWListbox_onDB(doculist_holder,documentLinks_lb_headers,"doculinks_lb",6,ds_sql,sqlstm);
	newlb.setMultiple(true);
	//newlb.addEventListener("onSelect", new doculinks_lb_Listener());
	ds_sql.close();
}

void viewDocument()
{
	if(!check_ListboxExist_SelectItem(doculist_holder,"doculinks_lb")) return;
	eorigid = doculinks_lb.getSelectedItem().getLabel();
	theparam = "docid=" + eorigid;
	uniqid = makeRandomId("vd");
	globalActivateWindow("miscwindows","qc/viewlinkingdocument.zul", uniqid, theparam, useraccessobj);
}

// List out email addresses def in customer_emails
void showEmailsbyCustomer()
{
	Object[] custemails_lb_headers = {
	new dblb_HeaderObj("origid",false,"origid",2),
	new dblb_HeaderObj("Name",true,"contact_name",1),
	new dblb_HeaderObj("E-Mail",true,"contact_email",1),
	};

	sql = als_mysoftsql();
    if(sql == NULL) return;
	sqlstm = "select origid,contact_name,contact_email from customer_emails where ar_code='" + selected_arcode + "' order by contact_name";
	Listbox newlb = makeVWListbox_onDB(emails_holder,custemails_lb_headers,"custemails_lb",5,sql,sqlstm);
	newlb.setMultiple(true);
	sql.close();
}

// knockoff from send_email_coa.zul .. if update there, do here too
// The real-thing, send out selected COAs to client via email
void sendOutCOA_clicker()
{
	if(!check_ListboxExist_SelectItem(emails_holder,"custemails_lb")) return;
	if(!check_ListboxExist_SelectItem(doculist_holder,"doculinks_lb")) return;
	
	if (Messagebox.show("Really send document(s) to client..", "Are you sure?", 
		Messagebox.YES | Messagebox.NO, Messagebox.QUESTION) ==  Messagebox.NO) return;

	seldocs = doculinks_lb.getSelectedItems();
	emails = custemails_lb.getSelectedItems();

	ds_sql = als_DocumentStorage();
	if(ds_sql == null) { showMessageBox("Cannot connect to document server.."); return; }

	receivers = "";
	String[] recv_names = new String[emails.size()];
	String[] recv_emails = new String[emails.size()];
	cctt = 0;

	// get the list of email addresses selected
	for(dpi : emails)
	{
		receivers += getListcellItemLabel(dpi,2) + ",";
		recv_names[cctt] = getListcellItemLabel(dpi,1);
		recv_emails[cctt] = getListcellItemLabel(dpi,2);
		cctt++;
	}

	String[] tmpfnames = new String[seldocs.size()];
	String[] dorigid = new String[seldocs.size()];
	fnamecount = 0;

	// make tmp-file out of documents
	for(dpi : seldocs)
	{
		dorigid[fnamecount] = getListcellItemLabel(dpi,0); // get document origid
		sqlstm = "select file_name,file_data from DocumentTable where origid=" + dorigid[fnamecount];
		docrec = ds_sql.firstRow(sqlstm);
		
		if(docrec != null)
		{
			kfilename = docrec.get("file_name");
			kblob = docrec.get("file_data");
			kbarray = kblob.getBytes(1,(int)kblob.length());
			tmpfnames[fnamecount] = session.getWebApp().getRealPath("tmp/" + kfilename);
			outstream = new FileOutputStream(tmpfnames[fnamecount]);
			outstream.write(kbarray);
			outstream.close();
			fnamecount++;
		}
	}
	ds_sql.close();

	// now compose the email with attachments
	subjstr = "RE: [e-Document] " + selected_folderno;
	msgtxt =  "Job/Folder No.: " + selected_folderno + "\n";
	msgtxt += "This email contains the electronic version of the requested document(s).\n\n";
	msgtxt += "This email is machine generated, DO NOT REPLY to this email.\n";
	msgtxt += "Please contact our customer service or sales person if you have any enquiries.\n\n";
	msgtxt += "-- e-LabMan\n";
	msgtxt += "ALS | Malaysia - Indonesia\n9 Jalan Astaka U8/84, Bukit Jelutong\n40150 Shah Alam, Selangor\n\n";
	msgtxt += "PHONE +60 3 7845 8257\nFAX +60 3 7845 8258\nEMAIL sales@alsglobal.com.my\n";
	msgtxt += "WEB http://www.alsglobal.com\n\n-Please consider the environment before printing this email-";

	sendEmailWithAttachment(SMTP_SERVER,ELABMAN_EMAIL,receivers,subjstr,msgtxt,tmpfnames);

	// delete temporary files before cabut
	for(i=0;i<tmpfnames.length;i++)
	{
		File f = new File(tmpfnames[i]);
		if(f.exists()) f.delete();
	}

	todaysdate = getDateFromDatebox(hiddendatebox);

	// update tables on stuff sent out
	sql = als_mysoftsql();
    if(sql == NULL) return;

	for(i=0;i <dorigid.length; i++)
	{
		for(j=0; j<recv_names.length; j++)
		{
			sqlstm = "insert into stuff_emailed (linking_code,docutype,docu_link,datesent,contact_name,contact_email,username) values " +
			"('" + selected_folderno + "','COA'," + dorigid[i] + ",'" + todaysdate + "','" + 
			recv_names[j] + "','" + recv_emails[j] + "','" + useraccessobj.username + "')";

			sql.execute(sqlstm);
		}
	}
	sql.close();

	// put a bit of audit-trail later

	showMessageBox("Document(s) sent..");
}

void sendDocViaEmail_clicker()
{
	showEmailsbyCustomer();
	senddocemail.open(sendemail_doc_btn);
}

void kasiExport_clicker()
{
	exportListboxExcel(folders_searchdiv,"folderjobs_lb","folderslist.xls",folders_lb_headers,"FoldersList",kasiexport_holder,65);
}

// Admin notify all about unchanged CASH account folders - work on what're found - check for "CshAct:"
//folders_searchdiv, folders_lb_headers, "folderjobs_lb
void admin_NotifyCashFolders()
{
	if(!check_ListboxExist_SelectItem(folders_searchdiv, "folderjobs_lb")) return;

	kkx = "These job-folders are still using CASH AR-Code. Please create an account for each and re-assign the folders ASAP. " +
		  "This is to prevent mis-billing or any incomprehensible human-errors.\n\n" +
		  "Folder.No\tRecv.Date\tCustomer\n" +
		  "---------\t---------\t--------\n\n";
	subj = "[NOTIFICATION] UNASSIGNED CASH ACCOUNT FOLDERS";
	for(i=0; i<folderjobs_lb.getItemCount(); i++)
	{
		selitem = folderjobs_lb.getItemAtIndex(i);
		custn = getListcellItemLabel(selitem,5).substring(0,6);

		// If it's a cash-account thing.. add to the string
		if(custn.equals("CshAct"))
		{
			foldn = getListcellItemLabel(selitem,0);
			recvd = getListcellItemLabel(selitem,1);
			fullcustn = getListcellItemLabel(selitem,5).substring(7);
			lopi = foldn + "\t" + recvd + "\t" + fullcustn + "\n";
			kkx += lopi;
		}
	}

	kkx += "\nThis notification will be distributed regularly..";
	topeople = convertStringArrayToString(cashacct_email_notification);
	simpleSendEmail(SMTP_SERVER,ELABMAN_EMAIL, topeople, subj, kkx);
	showMessageBox("Sent unmodded CASH account folders list to everyone..");
}

// Same wrapper func to print SRA .. 
void printSRA_Wrapper()
{
	if(selected_folderno.equals("")) return;
	printSRA(selected_folderno); // samplereg_funcs.zs

}

// generate/print draft-report
void printDraftReport()
{
	if(!check_ListboxExist_SelectItem(folders_searchdiv,"folderjobs_lb")) return;
	jfold = folderjobs_lb.getSelectedItem().getLabel();
	extfold = extractFolderNo(jfold);
	extfold = Integer.parseInt(extfold).toString();

	theparam = "folder_no=" + extfold;
	uniqwindowid = makeRandomId("pdrf");
	globalActivateWindow("miscwindows","lab/print_drafttemplate.zul", uniqwindowid, theparam, useraccessobj);
}

// 7/1/2011: change share-folder flag
void changeShareSample_clicker()
{
	if(!check_ListboxExist_SelectItem(folders_searchdiv,"folderjobs_lb")) return;
	jfold = folderjobs_lb.getSelectedItem().getLabel();
	extfold = extractFolderNo(jfold);
	extfold = Integer.parseInt(extfold).toString();
	
	newss = share_sample2.getSelectedItem().getLabel();

	sql = als_mysoftsql();
    if(sql == NULL) return;
    sqlstm = "update JobFolders set share_sample='" + newss + "' where origid=" + extfold;
    sql.execute(sqlstm);
    sql.close();

    startFolderJobsSearch(startdate,enddate,customer_tb,1); // refresh
}

// 19/2/2011: auto-email SRN to client
void sendSRN_email()
{
	if(!check_ListboxExist_SelectItem(folders_searchdiv,"folderjobs_lb")) return;
	jfold = folderjobs_lb.getSelectedItem().getLabel();
	extfold = extractFolderNo(jfold);
	extfold = Integer.parseInt(extfold).toString();

	sql = als_mysoftsql();
    if(sql == NULL) return;

	// get emails from customer_emails per ar_code
    sqlstm = "select customer_emails.contact_email from customer_emails " +
    "left join jobfolders on customer_emails.ar_code=jobfolders.ar_code " +
    "where jobfolders.origid=" + extfold;
    // "and customer_emails.send_srn=1"
    temails = sql.rows(sqlstm);
    
   	sqlstm = "select count(origid) as samplecount from " + JOBSAMPLES_TABLE + " where deleted=0 and jobfolders_id=" + extfold;
   	nsrec = sql.firstRow(sqlstm);
   	numsamples = 0;
   	if(nsrec != null) numsamples = nsrec.get("samplecount");
   	
   	sqlstm = "select folderno_str from jobfolders where origid=" + extfold;
   	fst = sql.firstRow(sqlstm);
   	foldernostr = "--UNDEFINED--";
   	if(fst != null) foldernostr = fst.get("folderno_str");

    sql.close();

    if(temails.size() == 0) return;

    to_string = "";
    for(dpi : temails)
    {
    	kkb = dpi.get("contact_email");
    	if(!kkb.equals("")) to_string += kkb + ",";
    }

    to_string = to_string.substring(0,to_string.length()-1);
    subj = "[NOTIFICATION] SAMPLE(S) RECEIVED : " + foldernostr;
    emailbody = 
    "Lab identification number: " + foldernostr + "\n\n" +
    "We have recently received " + numsamples.toString() + " sample(s) from your company.\n" +
    "Your sample(s) are being processed at the moment.\n\n" +
    "If you required any assistance, please contact the account manager assigned to you. Please quote " + foldernostr + " during enquiry.\n\n" +
    "**THIS NOTIFICATION IS AUTO-GENERATED**";

	//simpleSendEmail(SMTP_SERVER,"info@alsglobal.com.my", to_string, subj, emailbody);
	simpleSendEmail(SMTP_SERVER,"info@alsglobal.com.my", "it@alsglobal.com.my", subj, emailbody);
	
    alert("srn email sent");
}

]]>
</zscript>

<!-- send document via email popup -->
<popup id="senddocemail" >
<div width="400px">
<hbox>
<groupbox>
<caption label="E-Mail Addresses" />
<div id="emails_holder" />
<separator height="3px" />
<button label="Send out documents" style="font-size:9px" onClick="sendOutCOA_clicker()" />
</groupbox>
</hbox>
</div>
</popup>
<!-- end of send document via email popup -->

<!-- result worksheets management popup -->
<popup id="doculink_popup">
<div width="400px">
<include id="linkingdoc_include" src="alsglobal/doculink.zul"/>
<separator height="5px" />
<hbox>
	<button label="Close" onClick="showDocumentsList(selected_folderno); doculink_popup.close()" style="font-size:9px" />
</hbox>
</div>
</popup>
<!-- end of result worksheets management popup -->

<!-- cash account customer details popup -->
<popup id="cashaccount_details_Popup">
<groupbox>
<caption id="cashacctdetail_lbl" label="Cash account - customer details" />

<grid>
	<columns>
		<column label="" />
		<column label="" />
		<column label="" />
		<column label="" />
	</columns>
	<rows>
		<row>
			<label value="Cust.Name" style="font-size:9px" />
			<textbox id="ca_customer_name_tb" width="200px" style="font-size:9px" />
			<label value="Cont.Person" style="font-size:9px" />
			<textbox id="ca_contact_person1_tb" width="200px" style="font-size:9px" />
		</row>
		<row>
			<label value="Address1" style="font-size:9px" />
			<textbox id="ca_address1_tb" width="200px" style="font-size:9px" />
			<label value="City" style="font-size:9px" />
			<textbox id="ca_city_tb" width="200px" style="font-size:9px" />
		</row>
		<row>
			<label value="Address2" style="font-size:9px" />
			<textbox id="ca_address2_tb" width="200px" style="font-size:9px" />
			<label value="Zipcode" style="font-size:9px" />
			<textbox id="ca_zipcode_tb" width="200px" style="font-size:9px" />
		</row>
		<row>
			<label value="State" style="font-size:9px" />
			<textbox id="ca_state_tb" width="200px" style="font-size:9px" />
			<label value="Country" style="font-size:9px" />
			<textbox id="ca_country_tb" width="200px" style="font-size:9px" />		
		</row>
		<row>
			<label value="Telephone" style="font-size:9px" />
			<textbox id="ca_telephone_tb" width="200px" style="font-size:9px" />
			<label value="Fax" style="font-size:9px" />
			<textbox id="ca_fax_tb" width="200px" style="font-size:9px" />		
		</row>
		<row>
			<label value="Email" style="font-size:9px" />
			<textbox id="ca_email_tb" width="200px" style="font-size:9px" />		
		</row>
	</rows>
</grid>
</groupbox>
<separator height="3px" />
<hbox>
	<!-- <button label="Save" style="font-size:9px" onClick="ca_save_Clicker()" /> -->
	<button label="Close" style="font-size:9px" onClick="cashaccount_details_Popup.close()" />
</hbox>
</popup>
<!-- end of popup -->

<div width="1200px">
<panel id="folderjobspanel" title="Folders/Jobs Browser v.2" border="normal" collapsible="true" closable="true">
<panelchildren>
<datebox id="hiddendatebox" format="yyyy-MM-dd" visible="false" />

<hbox>

<vbox>
<groupbox mold="3d" width="100%">
<caption label="Search parameters" />
<hbox>
<grid>
	<columns>
		<column label="" />
		<column label="" />
		<column label="" />
	</columns>
	<rows>
		<row>
			<hbox>
				<label value="Start date" style="font-size:9px" />
				<datebox id="startdate" format="yyyy-MM-dd" style="font-size:9px" />
			</hbox>
			<hbox>
				<label value="End date" style="font-size:9px" />
				<datebox id="enddate" format="yyyy-MM-dd" style="font-size:9px" />
			</hbox>
			<hbox>
				<label value="Customer" style="font-size:9px" />
				<textbox id="customer_tb" width="160px" style="font-size:9px" />
				<button label="Search" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,1)" style="font-size:9px" />
			</hbox>
		</row>
		<row>
			<hbox>
				<label value="Filter by" style="font-size:9px" />
				<listbox id="share_sample" mold="select" style="font-size:9px" />
				<zscript>
					populateDropdownListbox(share_sample,sharesamplechop);
				</zscript>
				<button label="Dig" style="font-size:9px" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,4)" />
			</hbox>
			<label value="(Max. 200 folders per click)" style="font-size:9px" />
			<button label="Dig by PKD" style="font-size:9px" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,5)" />
		</row>
	</rows>
</grid>
<grid>
	<columns>
		<column label="" />
		<column label="" />
	</columns>
	<rows>
		<row>
			<label value="By folder" style="font-size:9px" />
			<hbox>
				<textbox id="byfolder_tb" style="font-size:9px" />
				<button label="Dig" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,2)" style="font-size:9px" />
			</hbox>
		</row>
		<row>
			<label value="By sample.ID" style="font-size:9px" />
			<hbox>
				<textbox id="bysampleid_tb" style="font-size:9px" />
				<button label="Dig" onClick="startFolderJobsSearch(startdate,enddate,customer_tb,3)" style="font-size:9px" />
			</hbox>
		</row>
	</rows>
</grid>

</hbox>

</groupbox>

<!-- search results box -->
<groupbox mold="3d" width="850px" style="padding:3px">
	<caption label="Search results" />
	<button id="sendsrn_button" label="sendSRN" visible="false" onClick="sendSRN_email()" />
	<hbox>
		<button label="Folder details" onClick="localPlayDriller()" style="font-size:9px" />
		<button id="showcashacct_btn" label="CashAcct Details" onClick="showCashAccountDetails_clicker()" style="font-size:9px" />
		<button label="Print SRA" style="font-size:9px" onClick="printSRA_Wrapper()" />
		<button label="Generate Draft-Report" style="font-size:9px" onClick="printDraftReport()" />

		<label value="Reset Share-Sample" style="font-size:9px" />
		<listbox id="share_sample2" mold="select" style="font-size:9px" />
		<zscript>
			populateDropdownListbox(share_sample2,sharesamplechop);
		</zscript>
		<button label="Change" style="font-size:9px" onClick="changeShareSample_clicker()" />
	</hbox>
	<separator height="3px" />
	<div id="folders_searchdiv" />
	<separator height="3px" />
	<label id="numofsamples_lbl" />
	<separator height="3px" />
	<button label="Export list to Excel" style="font-size:9px" onClick="kasiExport_clicker()" />
	<separator height="3px" />
	<div id="adminstuffy" style="padding:2px;background:#bb1122" visible="false">
		<hbox>
		<label value="AdminStuff:" style="font-size:9px" />
		<separator width="5px" />
		<button label="Notify unmod cashfolder" style="font-size:9px" onClick="admin_NotifyCashFolders()" />
		<!-- <textbox id="adminboxi" multiline="true" width="250px" height="80px" style="font-size:9px" /> -->
		</hbox>
	</div>
	<div id="kasiexport_holder" />
</groupbox>
</vbox>

<vbox>
<groupbox mold="3d">
<caption id="folderbreakdown" label="..." />
<tree id="sampletests_tree" zclass="z-dottree" rows="16" width="100%" >
	<treecols>
		<treecol label="SampleID/Sample Marking/Tests" />
	</treecols>
</tree>
</groupbox>

<groupbox mold="3d">
<caption label="Documents" />
<div id="doculist_holder" />
<separator height="3px" />
<button label="View document" style="font-size:9px" onClick="viewDocument()" />
<button id="viewdoculinks_btn" label="Upload COC/PO/Documents" onClick="doViewDoculinkPopup()" style="font-size:9px" />
<button id="sendemail_doc_btn" label="E-Mail" style="font-size:9px" onClick="sendDocViaEmail_clicker()" visible="false" />
</groupbox>

</vbox>

</hbox>

<zscript>
<![CDATA[

setTodayDatebox(startdate);
setTodayDatebox(enddate);
setTodayDatebox(hiddendatebox);

startFolderJobsSearch(startdate,enddate,customer_tb,1);

documentLinkProp.document_idprefix = "DOCS";
setDocumentLink_DynamicProperty(linkingdoc_include, documentLinkProp, useraccessobj);

if(useraccessobj.accesslevel == 9)
{
	adminstuffy.setVisible(true);
	sendemail_doc_btn.setVisible(true);

	sendsrn_button.setVisible(true);
}

]]>
</zscript>

</panelchildren>
</panel>
</div>
</zk>
