<?xml version="1.0" encoding="UTF-8"?>
<?page id="als_portal_main" ?>
<?page title="Victor's Playground"?>
<?link rel="shortcut icon" type="image/x-icon" href="/favicon.ico"?>
<zk>
<zscript src="alsglobal/alsglobaldefs.zs" />
<zscript src="alsglobal/alsglobal_birtreport.zs" />

<style src="/real-world.css" />
<style>
.z-panel-header { color:#eeeeee; background:#06333a; }
</style>

<zscript>
<![CDATA[
MYTITLE = "e-LABMAN ";
MYVERSION = "v3.70";
/*
color:#111111;
	background:#f57900;
New dynamic-menu main screen thing
Written by Victor Wong
Dated: 08/10/2011

03/04/2012: optimized and ported byte-compiled
18/06/2014: abit of grouping of the top buttons into popup

*/

TIMER_DELAY = "10000";

import org.zkoss.zk.ui.*;
import org.victor.*;

Generals kiboo = new Generals();
ListboxHandler lbhandler = new ListboxHandler();
SqlFuncs sqlhand = new SqlFuncs();
SecurityFuncs sechand = new SecurityFuncs();
MenuFuncs menuhand = new MenuFuncs();
GuiFuncs guihand = new GuiFuncs();
luhand = new LookupFuncs();

// Get access obj set by login-page
useraccessobj = sechand.getUserAccessObject();
if(useraccessobj == null) Executions.sendRedirect(MAINLOGIN_PAGE); // no access obj, redirect back to login page

ArrayList menuTreeModules;
ArrayList menuBirtReports;
ArrayList menuExternalBirtReports;

mainProgramTitle = MYTITLE + MYVERSION;

mainPlayground = "//als_portal_main/";
theBirtViewer = "reporting/birtReportViewer_v2.zul";
theExternalBirtViewer = "reporting/exBirtReportViewer_v1.zul";

Object[] internalModules =
{
	new modulesObj(100,"menueditormod",9,GUI_PANEL,"adminmodules/menueditor_v1.zul",0, ""),
	new modulesObj(101,"usercontrolmod",9,GUI_PANEL,"adminmodules/usercontroller.zul",0, ""),
	new modulesObj(102,"foldermanager",9,GUI_PANEL,"adminmodules/folderjobs_dbman.zul",0, ""),
	new modulesObj(103,"auditlogs",9,GUI_PANEL,"adminmodules/adminauditlogs.zul",0, ""),
	new modulesObj(104,"lookupsedit",9,GUI_PANEL,"alsglobal/staticlookupman.zul",0,"lu=112&wt=General%20Lookups"),
	new modulesObj(105,"subcontests",9,GUI_PANEL,"alsglobal/staticlookupman.zul",0,"lu=132&wt=Subcons%20Tests"),
	new modulesObj(106,"lbldefs",9,GUI_PANEL,"adminmodules/lookupFieldsEditor_v1.zul",0,""),
	new modulesObj(107,"cltempman",9,GUI_PANEL,"alsglobal/checkListTemplate_v1.zul",0,""),
	new modulesObj(108,"ituserman",9,GUI_PANEL,"itest_mods/itest_users_v1.zul",0,""),
	new modulesObj(109,"xmlformman",9,GUI_PANEL,"adminmodules/xmlformTemplate_v1.zul",0,""),
	new modulesObj(110,"superuser",9,GUI_WINDOW,"adminmodules/superUserFuncs_v1.zul",0,""),
	new modulesObj(111,"walllcman",9,GUI_PANEL,"adminmodules/wallLCmanager_v1.zul",0,""),
};

moduleCounter = 1;

// Load external module into main program
// recoded this globalActivateWindow() from alsglobal_guifuncs.zs with iplayg
void activateModule(String iplayg, String parentdiv_name, String winfn, String windId, String uParams, Object uAO)
{
	Include newinclude = new Include();
	newinclude.setId(windId);

	includepath = winfn + "?myid=" + windId + "&" + uParams;
	newinclude.setSrc(includepath);

	sechand.setUserAccessObj(newinclude, uAO); // securityfuncs.zs

	Div contdiv = Path.getComponent(iplayg + parentdiv_name);
	newinclude.setParent(contdiv);

} // activateModule()

void runModule(Object apmod, String iprefix)
{
	//newid = makeRandomId(iprefix);
	newid = iprefx + moduleCounter.toString();
	moduleCounter++;

	apfn = apmod.module_fn;
	mydivname = (apmod.module_gui == GUI_PANEL) ? "workbox" : "miscwindows" ;
	activateModule(mainPlayground,mydivname,apfn,newid,apmod.parameters,useraccessobj);
}

// Internal menu-items onClick processor
class internalMenuItem_Clicker implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		theid = event.getTarget().getId();
		menutype = theid.substring(0,2);
		menuid = Integer.parseInt(theid.substring(2,theid.length()));

		if(menutype.equals("IM")) // internal menu-items
		{
			for(i=0; i < internalModules.length; i++)
			{
				if(menuid == internalModules[i].module_num)
				{
					if(useraccessobj.accesslevel >= internalModules[i].accesslevel) runModule(internalModules[i],"imn");
					//showAccessDenied_Box(useraccessobj);
				}
			}
		}
	}
}

class externalMenuItem_Clicker implements org.zkoss.zk.ui.event.EventListener
{
	public void onEvent(Event event) throws UiException
	{
		theid = event.getTarget().getId();
		menutype = theid.substring(0,2);
		menuid = Integer.parseInt(theid.substring(2,theid.length()));

		for(dpi : menuTreeModules)
		{
			 // match - run it
			if(menuid == dpi.module_num) runModule(dpi,"emn");
		}

		// try BIRT reports
		for(dpi : menuBirtReports)
		{
			if(menuid == dpi.module_num)
			{
				bid = dpi.module_num.toString();
				rtit = dpi.module_name.replace(" ","%20");
				wnid = kiboo.makeRandomId("brv");
				params = "bid=" + bid + "&rti=" + rtit;
				//alert("doing: " + bid + " :: " + rtit + " :: " + params);
				activateModule(mainPlayground,"miscwindows",theBirtViewer,wnid,params,useraccessobj);
			}
		}

		// 09/04/2012: do external BIRT reports
		for(dpi : menuExternalBirtReports)
		{
			if(menuid == dpi.module_num)
			{
				bid = dpi.module_num.toString();
				rtit = dpi.module_name.replace(" ","%20");
				wnid = kiboo.makeRandomId("brv");
				params = "bid=" + bid + "&rti=" + rtit;
				//alert("doing: " + bid + " :: " + rtit + " :: " + params);
				activateModule(mainPlayground,"miscwindows",theExternalBirtViewer,wnid,params,useraccessobj);
			}
		}
	}
}

// the recursive func to drawout the menu
void menuFiller(Sql isql, List imenurecs, int imenulevel, int parentid, Object iparent)
{
	if(imenurecs == null)
	{
		mparentid = parentid.toString();
		sqlstm = "select * from elb_menutree where menuparent=" + mparentid + " order by position";
		imenurecs = isql.rows(sqlstm);
	}

	if(imenurecs.size() == 0) return;

	exmenuclicker = new externalMenuItem_Clicker();

	for(dpi : imenurecs)
	{
		thisid = dpi.get("origid").toString();

		thisguitype = (dpi.get("guitype") == null) ? "PANEL" : dpi.get("guitype");
		if(thisguitype.equals("SEPARATOR"))
		{
			sepak = new Menuseparator();
			sepak.setParent(iparent);
			continue;
		}

		// check for sub-items within items
		sqlstm2 = "select * from elb_menutree where menuparent=" + thisid + " order by position";
		subrecs = isql.rows(sqlstm2);

		menuitemdisable = true; // default menu item is always disable/hidden

		// check if limited_users is def in table, user must be inside before showing the menu-item
		limiteduser_flag = true;
		if(dpi.get("limited_users") != null)
		{
			lmuserslist = dpi.get("limited_users").trim();
			if(!lmuserslist.equals(""))
			{
				limiteduser_flag = false; // always set false when come into here - check

				splito = lmuserslist.split(" ");
				for(i=0; i<splito.length; i++)
				{
					lmuser = splito[i];
					if(lmuser.equals(useraccessobj.username))
					{
						limiteduser_flag = true;
						break;
					}
				}
			}
		}

		// check accesslevel for menu-item
		levelcheck = false;
		if(useraccessobj.accesslevel >= dpi.get("accesslevel")) levelcheck = true;
		
		// usergroup check
		usergroup_flag = false;
		if(dpi.get("usergroup") != null)
		{
			theusergroup =  dpi.get("usergroup");

			if(theusergroup.equals("")) // blank usergroup means everyone can access
				usergroup_flag = true;
			else
			if(!theusergroup.equals("ALL"))
			{
				sqlstm = "select accesslevel from portalGroupAccess where user_origid=" + useraccessobj.origid.toString() + 
				" and usergroup_code='" + dpi.get("usergroup") + "'";

				ugchk = isql.firstRow(sqlstm);
				if(ugchk != null)
				{
					if(dpi.get("usergrouplevel") != null)
						if(ugchk.get("accesslevel") >= dpi.get("usergrouplevel")) usergroup_flag = true;
				}
			}
			else
				usergroup_flag = true;
		}
		else
			usergroup_flag = true;

		// all 3 flags must be true - then enable/show menu-item
		if(limiteduser_flag && levelcheck && usergroup_flag) menuitemdisable = false;

		// final - check if menu-item is disabled
		xdisa = dpi.get("disabled");
		if(xdisa) menuitemdisable = true;

		// final - admin see all - don't care
		if(useraccessobj.accesslevel == 9) menuitemdisable = false;

		if(subrecs.size() > 0)
		{
			// if any sub-items for this, must create item as <menu> instead of <menuitem>,
			// then attach <menupopup> to it for sub-items
			
			if(!menuitemdisable) // show sub-menu + items if authorized to
			{
				mtabid = "MT" + thisid;
				menuhand.menuTabMaker(mtabid,dpi.get("menulabel"),kiboo.checkNullString(dpi.get("label_style")),iparent);
				submenuparent = iparent.getFellowIfAny(mtabid);

				mlistid = "ML" + thisid;
				menuhand.menuListMaker(mlistid,submenuparent);

				forsubmenuparent = submenuparent.getFellowIfAny(mlistid);
				menuFiller(isql,subrecs,imenulevel+1,dpi.get("origid"),forsubmenuparent);
			}
		}
		else
		{
			mitemid = "MI" + dpi.get("origid").toString();
			mi = menuhand.menuItemMaker(mitemid,dpi.get("menulabel"), kiboo.checkNullString(dpi.get("label_style")), iparent, 2);
			mi.addEventListener("onClick",exmenuclicker);

			miobj = iparent.getFellowIfAny(mitemid);
			miobj.setDisabled(menuitemdisable);

			if(!menuitemdisable) // if menu-item is not disabled -- put into menuTreeModules lookup
			{
				imodule_num = dpi.get("origid");
				imenulabel = dpi.get("menulabel");
				iaccesslevel = dpi.get("accesslevel");
				imodule_fn = (dpi.get("module_fn") == null) ? "" : dpi.get("module_fn");
				imodal_flag = (dpi.get("modal_flag") == null) ? 0 : (dpi.get("modal_flag")) ? 1 : 0;
				iparameters = (dpi.get("parameters") == null) ? "" : dpi.get("parameters");
				iguitype = (dpi.get("guitype") == null) ? "PANEL" : dpi.get("guitype");

				if(iguitype.equals("PANEL") || iguitype.equals("WINDOW"))
				{
					imodule_gui = (dpi.get("guitype").equals("PANEL")) ? GUI_PANEL : GUI_WINDOW;
					if(!imodule_fn.equals(""))
					{
						wolly = new modulesObj(imodule_num,"",iaccesslevel,imodule_gui,imodule_fn,imodal_flag,iparameters);
						menuTreeModules.add(wolly);
					}
				}

				if(iguitype.equals("REPORT"))
				{
					wolly = new reportModulesObj(imodule_num,imenulabel,iaccesslevel,iparameters);
					menuBirtReports.add(wolly);
				}

				if(iguitype.equals("REPORT_EXT"))
				{
					wolly = new reportModulesObj(imodule_num,imenulabel,iaccesslevel,iparameters);
					menuExternalBirtReports.add(wolly);
				}
			}
		}
	}
}

// main func to get stuff from elb_menutree and draw 'em
void drawMenuBar()
{
	// clear previous menu-bar
	if(mainmenu_holder.getFellowIfAny("mainmenu") != null) mainmenu.setParent(null);

	// create new ArrayList each time reload menu -- safer
	menuTreeModules = new ArrayList();
	menuBirtReports = new ArrayList();
	menuExternalBirtReports = new ArrayList();

	// create main-menu bar
	menuhand.menuBarMaker("mainmenu","","",mainmenu_holder);

	inmenuclicker = new internalMenuItem_Clicker();

	if(useraccessobj.accesslevel == 9)
	{
		// create built-in menu-editor - admin can view this one only
		menuhand.menuTabMaker("tab_menueditor","Admin","background:#F52707",mainmenu);
		menuhand.menuListMaker("tab_menueditor_list",tab_menueditor);

		// only padmin and toymaker can see these (menu-editor and user-controller, etc)
		tusername = useraccessobj.username;
		if(tusername.equals("padmin") || tusername.equals("toymaker"))
		{
			mi = menuhand.menuItemMaker("IM100","Edit menu items","",tab_menueditor_list,1);
			mi.addEventListener("onClick",inmenuclicker);
			mi = menuhand.menuItemMaker("IM101","User controller","",tab_menueditor_list,1);
			mi.addEventListener("onClick",inmenuclicker);
			mi = menuhand.menuItemMaker("IM108","i-TEST user controller","",tab_menueditor_list,1);
			mi.addEventListener("onClick",inmenuclicker);
			sepak = new Menuseparator();
			sepak.setParent(tab_menueditor_list);

			mi = menuhand.menuItemMaker("IM106","Lookup+Fields editor","",tab_menueditor_list,1);
			mi.addEventListener("onClick",inmenuclicker);
		}
		
		// 13/01/2013: wall and LC manager
		mi = menuhand.menuItemMaker("IM111","Wall / LC manager","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);

		// 28/09/2012: superuser functions - abit of shortcuts
		mi = menuhand.menuItemMaker("IM110","Superuser functions","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);

		mi = menuhand.menuItemMaker("IM102","Real folders manager","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);
		mi = menuhand.menuItemMaker("IM109","VIC-XML form manager","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);
		mi = menuhand.menuItemMaker("IM103","Audit logs","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);
		sepak = new Menuseparator();
		sepak.setParent(tab_menueditor_list);
		mi = menuhand.menuItemMaker("IM104","Lookups","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);
		mi = menuhand.menuItemMaker("IM105","Subcon-tests","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);
		mi = menuhand.menuItemMaker("IM107","Check-list templates","",tab_menueditor_list,1);
		mi.addEventListener("onClick",inmenuclicker);
	
	}

	sql = sqlhand.als_mysoftsql();
	if(sql == null) return;

	// get all menu-tabs
	sqlstm = "select * from elb_menutree where menuname='MAINMENU' order by position";
	menutabs = sql.rows(sqlstm);
	if(menutabs.size() == 0) { sql.close(); return; }
	
	// get user's record
	//sqlstm = "select * from " + TABLE_PORTALUSER + "  where username='" + useraccessobj.username + "'";
	//userrec = sql.firstRow(sqlstm);

	for(dpi : menutabs)
	{
		showmenutab = false;

		// check main accesslevel
		if(useraccessobj.accesslevel >= dpi.get("accesslevel")) showmenutab = true;

		// check usergroup
		if(dpi.get("usergroup") != null)
		{
			if(!dpi.get("usergroup").equals("ALL"))
			{
				sqlstm = "select accesslevel from portalGroupAccess where user_origid=" + useraccessobj.origid.toString() + 
				" and usergroup_code='" + dpi.get("usergroup") + "'";
			
				ugchk = sql.firstRow(sqlstm);
				if(ugchk != null)
				{
					if(dpi.get("usergrouplevel") != null)
						if(ugchk.get("accesslevel") < dpi.get("usergrouplevel")) showmenutab = false;
				}
				else
					showmenutab = false;
			}
		}

		if(showmenutab)
		{
			menuorigid = dpi.get("origid").toString();
			mtabid = "MT" + menuorigid;
			menuhand.menuTabMaker(mtabid,dpi.get("menulabel"),kiboo.checkNullString(dpi.get("label_style")),mainmenu);

			mlistid = "ML" + menuorigid;
			listparent = mainmenu.getFellowIfAny(mtabid);
			menuhand.menuListMaker(mlistid,listparent);
			forsubmenuparent = listparent.getFellowIfAny(mlistid);

			menuFiller(sql,null,1,dpi.get("origid"),forsubmenuparent);
		}
	}

	sql.close();
}

// All general purpose stuff put here

// Logout
void logoutSystem()
{
	Window loginwindow = Path.getComponent("//als_portal_login/loginwin");
	loginwindow.setVisible(true);
	Include logininc = Path.getComponent("//als_portal_login/mainprogram");
	logininc.setSrc("");
	useraccessobj.clearAll();
} // end of logoutSystem()

void changeTopBarColor(int itype)
{
	barcolor = "background:#F777B9;padding:2px";
	switch(itype)
	{
		case 2:
			barcolor = "background:#0A158C;padding:2px";
			break;
	}
	topbar.setStyle(barcolor);
}

// 07/03/2012: for admin to play lookups
// itype: 1=normal lookups(112), can be switch to do other lookups
void activateLookupEditor(int itype)
{
	uniqwindowid = kiboo.makeRandomId("le");
	runmestr = "alsglobal/staticlookupman.zul";
	theparam = "lu=112&wt=General%20Lookups";
	guihand.globalActivateWindow(mainPlayground,"miscwindows",runmestr, uniqwindowid, theparam, useraccessobj);
}

void debugsampledet()
{
	theparam = "folderno=44199";
	uniqwindowid = kiboo.makeRandomId("ldx");
	guihand.globalActivateWindow(mainPlayground,"miscwindows","samplereg/folderdrill_v2.zul", uniqwindowid, theparam, useraccessobj);
}

// itype: 1=lookups editor
// isubparam: anything which is meaningful to other modules
void adminButtons(int itype, int isubparam)
{
	uniqwindowid = kiboo.makeRandomId("le");
	runmestr = "alsglobal/staticlookupman.zul";
	theparam = "lu=112&wt=General%20Lookups";

	switch(itype)
	{
		case 2:
			break;
	}

	guihand.globalActivateWindow(mainPlayground,"miscwindows",runmestr, uniqwindowid, theparam, useraccessobj);
}

Object[] sm_lb_headers = {
		new dblb_HeaderObj("Usergroup",true,"usergroup_code",1),
		new dblb_HeaderObj("Level",true,"accesslevel",2),
	};

// 27/09/2012: update using component.getId() as ref instead of hard-to-remember func-numbers
// 14/09/2012: consolidate 'em scattered stuff
// itype: 1=show msg-board popup, 2=activate dashboard, 3=switch branch, 4=show usergroup setting
// 5=change extra user pin-num
// 05/12/2011: allow user to change special PIN - release report and whatever if access-level permits.
void doFunc(Object iwhat)
{
	itype = iwhat.getId();

	if(itype.equals("msgboard_btn"))
		activateModule(mainPlayground,"workbox","collab/messageboard_v1.zul",kiboo.makeRandomId("msgb"),"",useraccessobj);

	if(itype.equals("dashboard_btn"))
		activateModule(mainPlayground,"workbox","dashboard_v1.zul",kiboo.makeRandomId("dash"),"",useraccessobj);

	if(itype.equals("overdues_btn"))
		activateModule(mainPlayground,"workbox","samplereg/frontSlab_v2.zul",kiboo.makeRandomId("ovd"),"",useraccessobj);

	if(itype.equals("wall_btn"))
		activateModule(mainPlayground,"workbox","alsWall_v1.zul",kiboo.makeRandomId("wlc"),"",useraccessobj);

	if(itype.equals("chgbranch_btn"))
	{
		dubra = branch_drd.getSelectedItem().getLabel();
		useraccessobj.branch = dubra;
		// update the branch-label
		branch_lbl.setValue("Branch: " + useraccessobj.branch);
		admintukarbranch_popup.close();
	}

	if(itype.equals("shwusergroup_btn"))
	{
		sql = sqlhand.als_mysoftsql();
		if(sql == null) return;
		sqlstm = "select usergroup_code,accesslevel from portalgroupaccess where user_origid=" + 
		useraccessobj.origid.toString() + " order by usergroup_code";
		Listbox newlb = lbhandler.makeVWListbox_onDB(usergroup_holder,sm_lb_headers,"ugroups_lb",5,sql,sqlstm);
		sql.close();
		newlb.setStyle("font-size:9px");
		showusergroup_popup.open(iwhat);
	}

	if(itype.equals("chgextrapin_btn"))
	{
		ggt = replaceSingleQuotes(pin_tb.getValue());
		sqlstm = "update portaluser set relreportpin='" + ggt + "' where origid=" + useraccessobj.origid;
		sqlhand.gpSqlExecuter(sqlstm);
		pin_tb.setValue("");
		changerelpin_popup.close();
		guihand.showMessageBox("User PIN updated..");
	}

	if(itype.equals("chgpasswd_btn"))
		activateModule(mainPlayground,"miscwindows","adminmodules/changepassword.zul",
			kiboo.makeRandomId("bpw"), "chgpwd=1",useraccessobj);

	if(itype.equals("srchcust_btn"))
		guihand.globalActivateWindow(mainPlayground,"miscwindows","dispatch/customer_search_popup.zul",
			kiboo.makeRandomId("sct"), "getcust=1",useraccessobj);

	if(itype.equals("bugger_btn"))
		guihand.globalActivateWindow(mainPlayground,"workbox","adminmodules/bugger.zul",
			kiboo.makeRandomId("sct"), "",useraccessobj);

	if(itype.equals("notification_btn"))
		activateModule(mainPlayground,"miscwindows","notification_v1.zul",
			kiboo.makeRandomId("ntw"), "",useraccessobj);

	if(itype.equals("tasktodo_b"))
		activateModule(mainPlayground,"miscwindows","collab/internalTasks_v2.zul",
			kiboo.makeRandomId("itx"), "",useraccessobj);
}

]]>
</zscript>

<!-- popup to change release-report pin -->
<popup id="changerelpin_popup">
<groupbox>
	<caption label="Change Release-Report PIN" />
	<hbox>
		<label value="PIN" sclass="k9" />
		<textbox id="pin_tb" sclass="k9" />
		<button label="Change" sclass="k9" onClick="changePIN()" />
	</hbox>
</groupbox>
</popup>
<!-- end of popup -->

<!-- popup show usergroup -->
<popup id="showusergroup_popup">
<groupbox mold="3d" width="300px">
	<div id="usergroup_holder" />
</groupbox>
</popup>
<!-- end of popup -->

<!-- popup to change branch -->
<popup id="admintukarbranch_popup">
<groupbox>
<caption label="Change lab branch" />
	<hbox>
		<label value="Branch" sclass="k9" />
		<listbox id="branch_drd" mold="select" sclass="k9" />
		<button id="chgbranch_btn" label="Change" sclass="k9" onClick="doFunc(self)" />
		<!-- <button label="Close" sclass="k9" onClick="admintukarbranch_popup.close()" /> -->
	</hbox>
</groupbox>
</popup>
<!-- end of popup -->

<popup id="youhavemsg">
<div width="400px" style="background:#cd2467;padding:5px" onClick="doFunc(notification_btn)" >
	<hbox>
		<image src="alsimg/e-mail_icon_0.png" />
		<vbox>
			<label style="font-size:24px;color:#eeeeee;text-decoration:blink;" >
			You have a new message..
			</label>
			<separator height="2px" />
			<label style="color:#eeeeee">
			Click to view..
			</label>
		</vbox>
		</hbox>
</div>
</popup>

<popup id="utilities_pop">
<div sclass="shadowbox" style="background:#495A9C">
<vbox>
	<button id="chgpasswd_btn" label="Change login password" sclass="k9" onClick="doFunc(self)" />
	<button id="shwusergroup_btn" label="Usergroup" sclass="k9" onClick="doFunc(self)" />

	<button id="dashboard_btn" label="Dashboard" sclass="k9" onClick="doFunc(self)" />
	<button id="overdues_btn" label="Folders overview" sclass="k9" onClick="doFunc(self)" />
	<button id="wall_btn" label="Wall/LabComment" sclass="k9" onClick="doFunc(self)" />
	<button id="notification_btn" label="Notification / Messages" sclass="k9" onClick="doFunc(self)" />
	<!-- <button id="chgextrapin_btn" label="Change PIN" sclass="k9" onClick="doFunc(self); changerelpin_popup.open(chgrelpin_btn)" /> -->
	<button id="srchcust_btn" label="Search customer" sclass="k9" onClick="doFunc(self)" />
	<button id="switchbranch_btn" label="Switch branch" sclass="k9" onClick="admintukarbranch_popup.open(switchbranch_btn)" />
	<!--
	<button label=I'm feeling pink" style="font-size:8px" onClick="changeTopBarColor(1)" />
	<button label="The blues" style="font-size:8px" onClick="changeTopBarColor(2)" />
	-->

	<button id="msgboard_btn" label="Messages" sclass="k9" onClick="doFunc(self)" visible="false" />
</vbox>
</div>
</popup>

<popup id="adminpop">
<div sclass="shadowbox" style="background:#F52C6F">
<vbox>
	<label id="adminmsg" sclass="k9" />
	<button label="ReloadMenu" sclass="k9" onClick="drawMenuBar()" />
	<button label="Lookups" sclass="k9" onClick="adminButtons(1,1)" />
	<!-- <button label="Lookups" sclass="k9" onClick="activateLookupEditor(1)" /> -->
	<!-- <button label="folderdet" sclass="k9" onClick="debugsampledet()" /> -->
	<button id="bugger_btn" label="bugger" sclass="k9" onClick="doFunc(self)" visible="false" />
</vbox>
</div>
</popup>

<!--  style="background-image:url('alsimg/wallpaper/free-wallpaper-5.jpg')"  -->
<div id="mainbox" width="1600px" >
<separator height="5px" />
<textbox id="debugbox" multiline="true" width="100%" height="100px" visible="false" />

<borderlayout width="100%" height="90000px">
<north border="none">
<div>
	<div id="topbar" style="padding:2px" width="100%">
	<hbox>
		<div style="background:#2e3436;padding:5px" width="1600px">
			<vbox>
				<hbox>
					<label id="program_title" style="color:#f57900;font-size:18px;font-weigth:bold" value="${MYTITLE}" />
					<label style="color:#eeeeee;font-size:9px" value="${MYVERSION}" />
					<!-- <label style="color:#f57900;font-size:18px;font-weigth:bold" value="RW System - DEVELOPMENT" /> -->

					<div style="background:#f57900;padding:2px;margin:2px" width="80px">
						<label id="username_lbl" sclass="k9mo" />
					</div>
					<div style="background:#f57900;padding:2px;margin:2px" width="80px">
						<label id="accesslevel_lbl" sclass="k9mo" />
					</div>
					<div style="background:#f57900;padding:2px;margin:2px" width="80px">
						<label id="branch_lbl" sclass="k9mo" />
					</div>

					<button label="Utilities" sclass="k9" onClick="utilities_pop.open(self)" />
					<button id="tasktodo_b" label="Tasks/To-Do" sclass="k9" onClick="doFunc(self)" />

					<separator width="40px" />
					<button label="Logout" sclass="k9" onClick="logoutSystem()" />
					<div id="msg_noti" style="background:#f57900;padding:2px" visible="false">
						<label style="color:#eeeeee;text-decoration:blink;font-weight:bold">YOU HAVE MESSAGE</label>
					</div>
					<button id="adminbutt" label="ADMIN" style="font-size:9px;color:#ff0000;font-weight:bold" visible="false" onClick="adminpop.open(self)" />

				</hbox>
				<div style="background:#3fbcd0;padding:2px" width="2000px" />
			</vbox>
		</div>

	</hbox>
	</div>
	<div id="mainmenu_holder" />
</div>
</north>

<center style="background:#2e3436;">
<!--
style="background:#2e3436;background-image:url('alsimg/wallpaper/free-wallpaper-5.jpg');"
-->
<div>
<!--	<image src="alsimg/sborder_1.png" /> -->

	<div id="workbox" />
	<div id="worksandbox" />
</div>
</center>

<south border="none">
<div>
    <div id="miscwindows" />
</div>
</south>

</borderlayout>

<timer id="maintimer" delay="${TIMER_DELAY}" repeats="true" onTimer="timerFunc()" />

</div>

<zscript>
<![CDATA[

void timerFunc()
{
	//if(useraccessobj.accesslevel != 9) return; // DEBUG

	visflag = false;
	sqlstm = "select top 1 origid from elb_messageboard where to_user='" + useraccessobj.username + "' and readflag=0";
	chkmsg = sqlhand.gpSqlFirstRow(sqlstm);
	if(chkmsg != null)
	{
		//youhavemsg.open(shwusergroup_btn);
		youhavemsg.open(300,200);
	}
	
 	//visflag = true;
	//msg_noti.setVisible(visflag);
}

if(useraccessobj.username.equals("padmin") || useraccessobj.username.equals("toymaker"))
{
	kio = Executions.getCurrent();
	url = kio.getContextPath();
	if(url.indexOf("elbd") != -1) adminmsg.setValue("(DEVELOPMENT VERSION)");

	//adminBar.setVisible(true);
	adminbutt.setVisible(true);
	msgboard_btn.setVisible(true);
	bugger_btn.setVisible(true);
}

drawMenuBar();

//lbhandler.populateDropdownListbox(branch_drd, dd_branches);
luhand.populateListbox_ByLookup(branch_drd,"dd_branches",2);

// show some user details
username_lbl.setValue("Your id: " + useraccessobj.username);
aclvlstr = useraccessobj.accesslevel.toString();
if(aclvlstr.equals("9")) aclvlstr = "ADMIN";
accesslevel_lbl.setValue("Level: " + aclvlstr);
branch_lbl.setValue("Branch: " + useraccessobj.branch);

//program_title.setValue(mainProgramTitle);

// default panels to load
if(!useraccessobj.username.equals("padmin"))
{
	//doFunc(overdues_btn);
	//doFunc(wall_btn);
	//doFunc(dashboard_btn);
	doFunc(tasktodo_b);
}

]]>
</zscript>
</zk>

